{
    "folders": [
        {
            "description": "Folder for mashup", 
            "collection_name": "IOT3_API3", 
            "collection": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "id": "4cc1ef63-0a44-4858-84b1-f3acef6c2d12", 
            "collection_id": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "order": [
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde20", 
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde208", 
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde219", 
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde2210", 
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde2311", 
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde2412", 
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde2513", 
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde2614", 
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde2715", 
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde2816", 
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde2917", 
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde21018", 
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde21119", 
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde21220", 
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde21321", 
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde21422", 
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde21523", 
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde21624", 
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde21725", 
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde21826", 
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde21927", 
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde22028", 
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde22129", 
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde22230", 
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde22331", 
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde22432", 
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde22533", 
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde22634", 
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde22735", 
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde22836", 
                "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde22937"
            ], 
            "name": "mashup"
        }, 
        {
            "description": "Folder for semanticMashupResult", 
            "collection_name": "IOT3_API3", 
            "collection": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "id": "382d8c2d-b2be-434b-a9e6-a49c20cc8e90", 
            "collection_id": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "order": [
                "23baab6b-b324-444c-8469-a8b137cb9d0e1", 
                "23baab6b-b324-444c-8469-a8b137cb9d0e038", 
                "23baab6b-b324-444c-8469-a8b137cb9d0e139", 
                "23baab6b-b324-444c-8469-a8b137cb9d0e240", 
                "23baab6b-b324-444c-8469-a8b137cb9d0e341", 
                "23baab6b-b324-444c-8469-a8b137cb9d0e442", 
                "23baab6b-b324-444c-8469-a8b137cb9d0e543", 
                "23baab6b-b324-444c-8469-a8b137cb9d0e644", 
                "23baab6b-b324-444c-8469-a8b137cb9d0e745", 
                "23baab6b-b324-444c-8469-a8b137cb9d0e846", 
                "23baab6b-b324-444c-8469-a8b137cb9d0e947", 
                "23baab6b-b324-444c-8469-a8b137cb9d0e1048", 
                "23baab6b-b324-444c-8469-a8b137cb9d0e1149", 
                "23baab6b-b324-444c-8469-a8b137cb9d0e1250", 
                "23baab6b-b324-444c-8469-a8b137cb9d0e1351", 
                "23baab6b-b324-444c-8469-a8b137cb9d0e1452", 
                "23baab6b-b324-444c-8469-a8b137cb9d0e1553", 
                "23baab6b-b324-444c-8469-a8b137cb9d0e1654", 
                "23baab6b-b324-444c-8469-a8b137cb9d0e1755", 
                "23baab6b-b324-444c-8469-a8b137cb9d0e1856", 
                "23baab6b-b324-444c-8469-a8b137cb9d0e1957", 
                "23baab6b-b324-444c-8469-a8b137cb9d0e2058", 
                "23baab6b-b324-444c-8469-a8b137cb9d0e2159", 
                "23baab6b-b324-444c-8469-a8b137cb9d0e2260", 
                "23baab6b-b324-444c-8469-a8b137cb9d0e2361", 
                "23baab6b-b324-444c-8469-a8b137cb9d0e2462", 
                "23baab6b-b324-444c-8469-a8b137cb9d0e2563", 
                "23baab6b-b324-444c-8469-a8b137cb9d0e2664", 
                "23baab6b-b324-444c-8469-a8b137cb9d0e2765", 
                "23baab6b-b324-444c-8469-a8b137cb9d0e2866", 
                "23baab6b-b324-444c-8469-a8b137cb9d0e2967", 
                "dbf582e9-bdfa-48fd-959c-5c09ed198690259"
            ], 
            "name": "semanticMashupResult"
        }, 
        {
            "description": "Folder for semanticFanOutPoint", 
            "collection_name": "IOT3_API3", 
            "collection": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "id": "59eae51d-c9ad-4cf8-a359-d00e1c1afd66", 
            "collection_id": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "order": [
                "9b917908-401a-4882-8b2d-7385fb70b5a02", 
                "9b917908-401a-4882-8b2d-7385fb70b5a0068", 
                "9b917908-401a-4882-8b2d-7385fb70b5a0169", 
                "9b917908-401a-4882-8b2d-7385fb70b5a0270", 
                "9b917908-401a-4882-8b2d-7385fb70b5a0371", 
                "9b917908-401a-4882-8b2d-7385fb70b5a0472", 
                "9b917908-401a-4882-8b2d-7385fb70b5a0573", 
                "9b917908-401a-4882-8b2d-7385fb70b5a0674", 
                "9b917908-401a-4882-8b2d-7385fb70b5a0775", 
                "9b917908-401a-4882-8b2d-7385fb70b5a0876", 
                "9b917908-401a-4882-8b2d-7385fb70b5a0977", 
                "9b917908-401a-4882-8b2d-7385fb70b5a01078", 
                "9b917908-401a-4882-8b2d-7385fb70b5a01179", 
                "9b917908-401a-4882-8b2d-7385fb70b5a01280", 
                "9b917908-401a-4882-8b2d-7385fb70b5a01381", 
                "9b917908-401a-4882-8b2d-7385fb70b5a01482", 
                "9b917908-401a-4882-8b2d-7385fb70b5a01583", 
                "9b917908-401a-4882-8b2d-7385fb70b5a01684", 
                "9b917908-401a-4882-8b2d-7385fb70b5a01785", 
                "9b917908-401a-4882-8b2d-7385fb70b5a01886", 
                "9b917908-401a-4882-8b2d-7385fb70b5a01987", 
                "9b917908-401a-4882-8b2d-7385fb70b5a02088", 
                "9b917908-401a-4882-8b2d-7385fb70b5a02189", 
                "9b917908-401a-4882-8b2d-7385fb70b5a02290", 
                "9b917908-401a-4882-8b2d-7385fb70b5a02391", 
                "9b917908-401a-4882-8b2d-7385fb70b5a02492", 
                "9b917908-401a-4882-8b2d-7385fb70b5a02593", 
                "9b917908-401a-4882-8b2d-7385fb70b5a02694", 
                "9b917908-401a-4882-8b2d-7385fb70b5a02795", 
                "9b917908-401a-4882-8b2d-7385fb70b5a02896", 
                "9b917908-401a-4882-8b2d-7385fb70b5a02997"
            ], 
            "name": "semanticFanOutPoint"
        }, 
        {
            "description": "Folder for semanticValidation", 
            "collection_name": "IOT3_API3", 
            "collection": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "id": "e65928eb-7b25-48a1-8386-f012d6bba9da", 
            "collection_id": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "order": [
                "f860ae95-28f9-48af-8f0f-4c223a2798d2253"
            ], 
            "name": "semanticValidation"
        }, 
        {
            "description": "Folder for ontology", 
            "collection_name": "IOT3_API3", 
            "collection": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "id": "46cf2d39-cd70-463c-830d-96bafbffb9bc", 
            "collection_id": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "order": [
                "925c9d40-7311-4d2d-9935-5d516e3207fd3", 
                "925c9d40-7311-4d2d-9935-5d516e3207fd098", 
                "925c9d40-7311-4d2d-9935-5d516e3207fd199", 
                "925c9d40-7311-4d2d-9935-5d516e3207fd2100", 
                "925c9d40-7311-4d2d-9935-5d516e3207fd3101", 
                "925c9d40-7311-4d2d-9935-5d516e3207fd4102", 
                "925c9d40-7311-4d2d-9935-5d516e3207fd5103", 
                "925c9d40-7311-4d2d-9935-5d516e3207fd6104", 
                "925c9d40-7311-4d2d-9935-5d516e3207fd7105", 
                "925c9d40-7311-4d2d-9935-5d516e3207fd8106", 
                "925c9d40-7311-4d2d-9935-5d516e3207fd9107", 
                "925c9d40-7311-4d2d-9935-5d516e3207fd10108", 
                "925c9d40-7311-4d2d-9935-5d516e3207fd11109", 
                "925c9d40-7311-4d2d-9935-5d516e3207fd12110", 
                "925c9d40-7311-4d2d-9935-5d516e3207fd13111", 
                "925c9d40-7311-4d2d-9935-5d516e3207fd14112", 
                "925c9d40-7311-4d2d-9935-5d516e3207fd15113", 
                "925c9d40-7311-4d2d-9935-5d516e3207fd16114", 
                "925c9d40-7311-4d2d-9935-5d516e3207fd17115", 
                "925c9d40-7311-4d2d-9935-5d516e3207fd18116", 
                "925c9d40-7311-4d2d-9935-5d516e3207fd19117", 
                "925c9d40-7311-4d2d-9935-5d516e3207fd20118", 
                "925c9d40-7311-4d2d-9935-5d516e3207fd21119", 
                "925c9d40-7311-4d2d-9935-5d516e3207fd22120", 
                "925c9d40-7311-4d2d-9935-5d516e3207fd23121", 
                "925c9d40-7311-4d2d-9935-5d516e3207fd24122", 
                "925c9d40-7311-4d2d-9935-5d516e3207fd25123", 
                "925c9d40-7311-4d2d-9935-5d516e3207fd26124", 
                "925c9d40-7311-4d2d-9935-5d516e3207fd27125", 
                "925c9d40-7311-4d2d-9935-5d516e3207fd28126", 
                "925c9d40-7311-4d2d-9935-5d516e3207fd29127", 
                "f6d6bb03-bbba-4490-b43c-a6b55748f764248", 
                "3ba87e7b-23a1-4390-b97b-04b88a70395b254", 
                "57d0a782-ad66-4bf8-8daf-9ebf9f547910260"
            ], 
            "name": "ontology"
        }, 
        {
            "description": "Folder for semanticMashupInstance", 
            "collection_name": "IOT3_API3", 
            "collection": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "id": "e9338e3a-4a52-4096-9d74-5f108d653786", 
            "collection_id": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "order": [
                "bfcd48e3-a791-4106-958a-505d8e88e4154", 
                "bfcd48e3-a791-4106-958a-505d8e88e4150128", 
                "bfcd48e3-a791-4106-958a-505d8e88e4151129", 
                "bfcd48e3-a791-4106-958a-505d8e88e4152130", 
                "bfcd48e3-a791-4106-958a-505d8e88e4153131", 
                "bfcd48e3-a791-4106-958a-505d8e88e4154132", 
                "bfcd48e3-a791-4106-958a-505d8e88e4155133", 
                "bfcd48e3-a791-4106-958a-505d8e88e4156134", 
                "bfcd48e3-a791-4106-958a-505d8e88e4157135", 
                "bfcd48e3-a791-4106-958a-505d8e88e4158136", 
                "bfcd48e3-a791-4106-958a-505d8e88e4159137", 
                "bfcd48e3-a791-4106-958a-505d8e88e41510138", 
                "bfcd48e3-a791-4106-958a-505d8e88e41511139", 
                "bfcd48e3-a791-4106-958a-505d8e88e41512140", 
                "bfcd48e3-a791-4106-958a-505d8e88e41513141", 
                "bfcd48e3-a791-4106-958a-505d8e88e41514142", 
                "bfcd48e3-a791-4106-958a-505d8e88e41515143", 
                "bfcd48e3-a791-4106-958a-505d8e88e41516144", 
                "bfcd48e3-a791-4106-958a-505d8e88e41517145", 
                "bfcd48e3-a791-4106-958a-505d8e88e41518146", 
                "bfcd48e3-a791-4106-958a-505d8e88e41519147", 
                "bfcd48e3-a791-4106-958a-505d8e88e41520148", 
                "bfcd48e3-a791-4106-958a-505d8e88e41521149", 
                "bfcd48e3-a791-4106-958a-505d8e88e41522150", 
                "bfcd48e3-a791-4106-958a-505d8e88e41523151", 
                "bfcd48e3-a791-4106-958a-505d8e88e41524152", 
                "bfcd48e3-a791-4106-958a-505d8e88e41525153", 
                "bfcd48e3-a791-4106-958a-505d8e88e41526154", 
                "bfcd48e3-a791-4106-958a-505d8e88e41527155", 
                "bfcd48e3-a791-4106-958a-505d8e88e41528156", 
                "bfcd48e3-a791-4106-958a-505d8e88e41529157", 
                "67493b98-328c-470b-9b3e-ac17e818204e249", 
                "d8ab8614-43b5-463e-ac4b-1b5b03e535a6255", 
                "c09d73c1-a9ba-42f4-ae75-9c30cd0e2ec7261"
            ], 
            "name": "semanticMashupInstance"
        }, 
        {
            "description": "Folder for ontologyRepository", 
            "collection_name": "IOT3_API3", 
            "collection": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "id": "508f6c1b-e81d-48b9-adf4-00d147dff804", 
            "collection_id": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "order": [
                "bed42e72-2382-4873-8792-9f8ed63613d25", 
                "bed42e72-2382-4873-8792-9f8ed63613d20158", 
                "bed42e72-2382-4873-8792-9f8ed63613d21159", 
                "bed42e72-2382-4873-8792-9f8ed63613d22160", 
                "bed42e72-2382-4873-8792-9f8ed63613d23161", 
                "bed42e72-2382-4873-8792-9f8ed63613d24162", 
                "bed42e72-2382-4873-8792-9f8ed63613d25163", 
                "bed42e72-2382-4873-8792-9f8ed63613d26164", 
                "bed42e72-2382-4873-8792-9f8ed63613d27165", 
                "bed42e72-2382-4873-8792-9f8ed63613d28166", 
                "bed42e72-2382-4873-8792-9f8ed63613d29167", 
                "bed42e72-2382-4873-8792-9f8ed63613d210168", 
                "bed42e72-2382-4873-8792-9f8ed63613d211169", 
                "bed42e72-2382-4873-8792-9f8ed63613d212170", 
                "bed42e72-2382-4873-8792-9f8ed63613d213171", 
                "bed42e72-2382-4873-8792-9f8ed63613d214172", 
                "bed42e72-2382-4873-8792-9f8ed63613d215173", 
                "bed42e72-2382-4873-8792-9f8ed63613d216174", 
                "bed42e72-2382-4873-8792-9f8ed63613d217175", 
                "bed42e72-2382-4873-8792-9f8ed63613d218176", 
                "bed42e72-2382-4873-8792-9f8ed63613d219177", 
                "bed42e72-2382-4873-8792-9f8ed63613d220178", 
                "bed42e72-2382-4873-8792-9f8ed63613d221179", 
                "bed42e72-2382-4873-8792-9f8ed63613d222180", 
                "bed42e72-2382-4873-8792-9f8ed63613d223181", 
                "bed42e72-2382-4873-8792-9f8ed63613d224182", 
                "bed42e72-2382-4873-8792-9f8ed63613d225183", 
                "bed42e72-2382-4873-8792-9f8ed63613d226184", 
                "bed42e72-2382-4873-8792-9f8ed63613d227185", 
                "bed42e72-2382-4873-8792-9f8ed63613d228186", 
                "bed42e72-2382-4873-8792-9f8ed63613d229187", 
                "f3392ee4-1c1f-4386-9f25-9e7ffd570acb250", 
                "1421fcfb-ea28-44de-a055-739f58162ea7256", 
                "8261fa4b-667d-46fd-8122-696ff3ace629262"
            ], 
            "name": "ontologyRepository"
        }, 
        {
            "description": "Folder for semanticMashupJobProfile", 
            "collection_name": "IOT3_API3", 
            "collection": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "id": "98a02b2d-181d-44cb-a913-25dd48a501d4", 
            "collection_id": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "order": [
                "6abdddbc-b380-4ef6-94c3-eea0462c5f716", 
                "6abdddbc-b380-4ef6-94c3-eea0462c5f710188", 
                "6abdddbc-b380-4ef6-94c3-eea0462c5f711189", 
                "6abdddbc-b380-4ef6-94c3-eea0462c5f712190", 
                "6abdddbc-b380-4ef6-94c3-eea0462c5f713191", 
                "6abdddbc-b380-4ef6-94c3-eea0462c5f714192", 
                "6abdddbc-b380-4ef6-94c3-eea0462c5f715193", 
                "6abdddbc-b380-4ef6-94c3-eea0462c5f716194", 
                "6abdddbc-b380-4ef6-94c3-eea0462c5f717195", 
                "6abdddbc-b380-4ef6-94c3-eea0462c5f718196", 
                "6abdddbc-b380-4ef6-94c3-eea0462c5f719197", 
                "6abdddbc-b380-4ef6-94c3-eea0462c5f7110198", 
                "6abdddbc-b380-4ef6-94c3-eea0462c5f7111199", 
                "6abdddbc-b380-4ef6-94c3-eea0462c5f7112200", 
                "6abdddbc-b380-4ef6-94c3-eea0462c5f7113201", 
                "6abdddbc-b380-4ef6-94c3-eea0462c5f7114202", 
                "6abdddbc-b380-4ef6-94c3-eea0462c5f7115203", 
                "6abdddbc-b380-4ef6-94c3-eea0462c5f7116204", 
                "6abdddbc-b380-4ef6-94c3-eea0462c5f7117205", 
                "6abdddbc-b380-4ef6-94c3-eea0462c5f7118206", 
                "6abdddbc-b380-4ef6-94c3-eea0462c5f7119207", 
                "6abdddbc-b380-4ef6-94c3-eea0462c5f7120208", 
                "6abdddbc-b380-4ef6-94c3-eea0462c5f7121209", 
                "6abdddbc-b380-4ef6-94c3-eea0462c5f7122210", 
                "6abdddbc-b380-4ef6-94c3-eea0462c5f7123211", 
                "6abdddbc-b380-4ef6-94c3-eea0462c5f7124212", 
                "6abdddbc-b380-4ef6-94c3-eea0462c5f7125213", 
                "6abdddbc-b380-4ef6-94c3-eea0462c5f7126214", 
                "6abdddbc-b380-4ef6-94c3-eea0462c5f7127215", 
                "6abdddbc-b380-4ef6-94c3-eea0462c5f7128216", 
                "6abdddbc-b380-4ef6-94c3-eea0462c5f7129217", 
                "24945d73-113f-497e-b19a-683b9968a795251", 
                "1735b70b-992f-4e85-9e1a-81d4b3c01bf9257", 
                "e5b43cf6-bc49-4f35-a4ab-d95b9edf7cab263"
            ], 
            "name": "semanticMashupJobProfile"
        }, 
        {
            "description": "Folder for semanticDescriptor", 
            "collection_name": "IOT3_API3", 
            "collection": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "id": "e5f7e91a-3afe-4287-bea1-9845a015dade", 
            "collection_id": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "order": [
                "8f006274-a68f-44bb-8913-57004527b0a87", 
                "8f006274-a68f-44bb-8913-57004527b0a80218", 
                "8f006274-a68f-44bb-8913-57004527b0a81219", 
                "8f006274-a68f-44bb-8913-57004527b0a82220", 
                "8f006274-a68f-44bb-8913-57004527b0a83221", 
                "8f006274-a68f-44bb-8913-57004527b0a84222", 
                "8f006274-a68f-44bb-8913-57004527b0a85223", 
                "8f006274-a68f-44bb-8913-57004527b0a86224", 
                "8f006274-a68f-44bb-8913-57004527b0a87225", 
                "8f006274-a68f-44bb-8913-57004527b0a88226", 
                "8f006274-a68f-44bb-8913-57004527b0a89227", 
                "8f006274-a68f-44bb-8913-57004527b0a810228", 
                "8f006274-a68f-44bb-8913-57004527b0a811229", 
                "8f006274-a68f-44bb-8913-57004527b0a812230", 
                "8f006274-a68f-44bb-8913-57004527b0a813231", 
                "8f006274-a68f-44bb-8913-57004527b0a814232", 
                "8f006274-a68f-44bb-8913-57004527b0a815233", 
                "8f006274-a68f-44bb-8913-57004527b0a816234", 
                "8f006274-a68f-44bb-8913-57004527b0a817235", 
                "8f006274-a68f-44bb-8913-57004527b0a818236", 
                "8f006274-a68f-44bb-8913-57004527b0a819237", 
                "8f006274-a68f-44bb-8913-57004527b0a820238", 
                "8f006274-a68f-44bb-8913-57004527b0a821239", 
                "8f006274-a68f-44bb-8913-57004527b0a822240", 
                "8f006274-a68f-44bb-8913-57004527b0a823241", 
                "8f006274-a68f-44bb-8913-57004527b0a824242", 
                "8f006274-a68f-44bb-8913-57004527b0a825243", 
                "8f006274-a68f-44bb-8913-57004527b0a826244", 
                "8f006274-a68f-44bb-8913-57004527b0a827245", 
                "8f006274-a68f-44bb-8913-57004527b0a828246", 
                "8f006274-a68f-44bb-8913-57004527b0a829247", 
                "b4450019-e63e-44da-90a2-d6e15afc1fec252", 
                "9e441758-b2cb-44d5-90a4-12ac2b784b4d258", 
                "dc2f8144-80d9-4677-94ae-6e8c2dcb2d29264"
            ], 
            "name": "semanticDescriptor"
        }
    ], 
    "description": "The ETSI IOT Bandwidth Management API described using OpenAPI", 
    "timestamp": 1413302258635, 
    "id": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
    "synced": false, 
    "requests": [
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup?ToAddress={{ToAddress}}&FromId={{FromId}}&Operation={{Operation}}&RequestId={{RequestId}}&ResourceType={{ResourceType}}&OriginatingTimestamp={{OriginatingTimestamp}}&ReqExpirationTimestamp={{ReqExpirationTimestamp}}&ResExpirationTimestamp={{ResExpirationTimestamp}}&EventCategory={{EventCategory}}&OperationalExecutionTime={{OperationalExecutionTime}}&ResponseType={{ResponseType}}&ResultPersistence={{ResultPersistence}}&ResultContent={{ResultContent}}&DeliveryAggregation={{DeliveryAggregation}}&GroupRequestIdentifier={{GroupRequestIdentifier}}&FilterCriteria={{FilterCriteria}}&DesiredIdentifierResultType={{DesiredIdentifierResultType}}&TokenRequestIndicator={{TokenRequestIndicator}}&Tokens={{Tokens}}&TokenIDs={{TokenIDs}}&RoleIDs={{RoleIDs}}&LocalTokenIDs={{LocalTokenIDs}}&ReleaseVersionIndicator={{ReleaseVersionIndicator}}&VendorInformation={{VendorInformation}}&GroupRequestTargetMembers={{GroupRequestTargetMembers}}&AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}&AuthorizationSignature={{AuthorizationSignature}}&AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}&SemanticQueryIndicator={{SemanticQueryIndicator}}", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/1?query=/iot3/example/mashup?ToAddress={{ToAddress}}?FromId={{FromId}}?Operation={{Operation}}?RequestId={{RequestId}}?ResourceType={{ResourceType}}?OriginatingTimestamp={{OriginatingTimestamp}}?ReqExpirationTimestamp={{ReqExpirationTimestamp}}?ResExpirationTimestamp={{ResExpirationTimestamp}}?EventCategory={{EventCategory}}?OperationalExecutionTime={{OperationalExecutionTime}}?ResponseType={{ResponseType}}?ResultPersistence={{ResultPersistence}}?ResultContent={{ResultContent}}?DeliveryAggregation={{DeliveryAggregation}}?GroupRequestIdentifier={{GroupRequestIdentifier}}?FilterCriteria={{FilterCriteria}}?DesiredIdentifierResultType={{DesiredIdentifierResultType}}?TokenRequestIndicator={{TokenRequestIndicator}}?Tokens={{Tokens}}?TokenIDs={{TokenIDs}}?RoleIDs={{RoleIDs}}?LocalTokenIDs={{LocalTokenIDs}}?ReleaseVersionIndicator={{ReleaseVersionIndicator}}?VendorInformation={{VendorInformation}}?GroupRequestTargetMembers={{GroupRequestTargetMembers}}?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}?AuthorizationSignature={{AuthorizationSignature}}?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}?SemanticQueryIndicator={{SemanticQueryIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ToAddress\",currentData.ToAddress);", 
                            "    pm.environment.set(\"FromId\",currentData.FromId);", 
                            "    pm.environment.set(\"Operation\",currentData.Operation);", 
                            "    pm.environment.set(\"RequestId\",currentData.RequestId);", 
                            "    pm.environment.set(\"ResourceType\",currentData.ResourceType);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.OriginatingTimestamp);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.ReqExpirationTimestamp);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.ResExpirationTimestamp);", 
                            "    pm.environment.set(\"EventCategory\",currentData.EventCategory);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.OperationalExecutionTime);", 
                            "    pm.environment.set(\"ResponseType\",currentData.ResponseType);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.ResultPersistence);", 
                            "    pm.environment.set(\"ResultContent\",currentData.ResultContent);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.DeliveryAggregation);", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.GroupRequestIdentifier);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.FilterCriteria);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.DesiredIdentifierResultType);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.TokenRequestIndicator);", 
                            "    pm.environment.set(\"Tokens\",currentData.Tokens);", 
                            "    pm.environment.set(\"TokenIDs\",currentData.TokenIDs);", 
                            "    pm.environment.set(\"RoleIDs\",currentData.RoleIDs);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.LocalTokenIDs);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.ReleaseVersionIndicator);", 
                            "    pm.environment.set(\"VendorInformation\",currentData.VendorInformation);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.GroupRequestTargetMembers);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.AuthorizationSignatureIndicator);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.AuthorizationSignature);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.AuthorizationRelationshipIndicator);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.SemanticQueryIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde20", 
            "description": "This method retrieves information about a list of mashup resources"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?ToAddress={{ToAddress}}&FromId={{FromId}}&Operation={{Operation}}&RequestId={{RequestId}}&ResourceType={{ResourceType}}&OriginatingTimestamp={{OriginatingTimestamp}}&ReqExpirationTimestamp={{ReqExpirationTimestamp}}&ResExpirationTimestamp={{ResExpirationTimestamp}}&EventCategory={{EventCategory}}&OperationalExecutionTime={{OperationalExecutionTime}}&ResponseType={{ResponseType}}&ResultPersistence={{ResultPersistence}}&ResultContent={{ResultContent}}&DeliveryAggregation={{DeliveryAggregation}}&GroupRequestIdentifier={{GroupRequestIdentifier}}&FilterCriteria={{FilterCriteria}}&DesiredIdentifierResultType={{DesiredIdentifierResultType}}&TokenRequestIndicator={{TokenRequestIndicator}}&Tokens={{Tokens}}&TokenIDs={{TokenIDs}}&RoleIDs={{RoleIDs}}&LocalTokenIDs={{LocalTokenIDs}}&ReleaseVersionIndicator={{ReleaseVersionIndicator}}&VendorInformation={{VendorInformation}}&GroupRequestTargetMembers={{GroupRequestTargetMembers}}&AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}&AuthorizationSignature={{AuthorizationSignature}}&AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}&SemanticQueryIndicator={{SemanticQueryIndicator}}", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/2?query=/iot3/example/semanticMashupResult?ToAddress={{ToAddress}}?FromId={{FromId}}?Operation={{Operation}}?RequestId={{RequestId}}?ResourceType={{ResourceType}}?OriginatingTimestamp={{OriginatingTimestamp}}?ReqExpirationTimestamp={{ReqExpirationTimestamp}}?ResExpirationTimestamp={{ResExpirationTimestamp}}?EventCategory={{EventCategory}}?OperationalExecutionTime={{OperationalExecutionTime}}?ResponseType={{ResponseType}}?ResultPersistence={{ResultPersistence}}?ResultContent={{ResultContent}}?DeliveryAggregation={{DeliveryAggregation}}?GroupRequestIdentifier={{GroupRequestIdentifier}}?FilterCriteria={{FilterCriteria}}?DesiredIdentifierResultType={{DesiredIdentifierResultType}}?TokenRequestIndicator={{TokenRequestIndicator}}?Tokens={{Tokens}}?TokenIDs={{TokenIDs}}?RoleIDs={{RoleIDs}}?LocalTokenIDs={{LocalTokenIDs}}?ReleaseVersionIndicator={{ReleaseVersionIndicator}}?VendorInformation={{VendorInformation}}?GroupRequestTargetMembers={{GroupRequestTargetMembers}}?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}?AuthorizationSignature={{AuthorizationSignature}}?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}?SemanticQueryIndicator={{SemanticQueryIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ToAddress\",currentData.ToAddress);", 
                            "    pm.environment.set(\"FromId\",currentData.FromId);", 
                            "    pm.environment.set(\"Operation\",currentData.Operation);", 
                            "    pm.environment.set(\"RequestId\",currentData.RequestId);", 
                            "    pm.environment.set(\"ResourceType\",currentData.ResourceType);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.OriginatingTimestamp);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.ReqExpirationTimestamp);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.ResExpirationTimestamp);", 
                            "    pm.environment.set(\"EventCategory\",currentData.EventCategory);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.OperationalExecutionTime);", 
                            "    pm.environment.set(\"ResponseType\",currentData.ResponseType);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.ResultPersistence);", 
                            "    pm.environment.set(\"ResultContent\",currentData.ResultContent);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.DeliveryAggregation);", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.GroupRequestIdentifier);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.FilterCriteria);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.DesiredIdentifierResultType);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.TokenRequestIndicator);", 
                            "    pm.environment.set(\"Tokens\",currentData.Tokens);", 
                            "    pm.environment.set(\"TokenIDs\",currentData.TokenIDs);", 
                            "    pm.environment.set(\"RoleIDs\",currentData.RoleIDs);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.LocalTokenIDs);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.ReleaseVersionIndicator);", 
                            "    pm.environment.set(\"VendorInformation\",currentData.VendorInformation);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.GroupRequestTargetMembers);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.AuthorizationSignatureIndicator);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.AuthorizationSignature);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.AuthorizationRelationshipIndicator);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.SemanticQueryIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e1", 
            "description": "This method retrieves information about a list of semanticMashupResult resources"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint?ToAddress={{ToAddress}}&FromId={{FromId}}&Operation={{Operation}}&RequestId={{RequestId}}&ResourceType={{ResourceType}}&OriginatingTimestamp={{OriginatingTimestamp}}&ReqExpirationTimestamp={{ReqExpirationTimestamp}}&ResExpirationTimestamp={{ResExpirationTimestamp}}&EventCategory={{EventCategory}}&OperationalExecutionTime={{OperationalExecutionTime}}&ResponseType={{ResponseType}}&ResultPersistence={{ResultPersistence}}&ResultContent={{ResultContent}}&DeliveryAggregation={{DeliveryAggregation}}&GroupRequestIdentifier={{GroupRequestIdentifier}}&FilterCriteria={{FilterCriteria}}&DesiredIdentifierResultType={{DesiredIdentifierResultType}}&TokenRequestIndicator={{TokenRequestIndicator}}&Tokens={{Tokens}}&TokenIDs={{TokenIDs}}&RoleIDs={{RoleIDs}}&LocalTokenIDs={{LocalTokenIDs}}&ReleaseVersionIndicator={{ReleaseVersionIndicator}}&VendorInformation={{VendorInformation}}&GroupRequestTargetMembers={{GroupRequestTargetMembers}}&AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}&AuthorizationSignature={{AuthorizationSignature}}&AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}&SemanticQueryIndicator={{SemanticQueryIndicator}}", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/3?query=/iot3/example/semanticFanOutPoint?ToAddress={{ToAddress}}?FromId={{FromId}}?Operation={{Operation}}?RequestId={{RequestId}}?ResourceType={{ResourceType}}?OriginatingTimestamp={{OriginatingTimestamp}}?ReqExpirationTimestamp={{ReqExpirationTimestamp}}?ResExpirationTimestamp={{ResExpirationTimestamp}}?EventCategory={{EventCategory}}?OperationalExecutionTime={{OperationalExecutionTime}}?ResponseType={{ResponseType}}?ResultPersistence={{ResultPersistence}}?ResultContent={{ResultContent}}?DeliveryAggregation={{DeliveryAggregation}}?GroupRequestIdentifier={{GroupRequestIdentifier}}?FilterCriteria={{FilterCriteria}}?DesiredIdentifierResultType={{DesiredIdentifierResultType}}?TokenRequestIndicator={{TokenRequestIndicator}}?Tokens={{Tokens}}?TokenIDs={{TokenIDs}}?RoleIDs={{RoleIDs}}?LocalTokenIDs={{LocalTokenIDs}}?ReleaseVersionIndicator={{ReleaseVersionIndicator}}?VendorInformation={{VendorInformation}}?GroupRequestTargetMembers={{GroupRequestTargetMembers}}?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}?AuthorizationSignature={{AuthorizationSignature}}?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}?SemanticQueryIndicator={{SemanticQueryIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ToAddress\",currentData.ToAddress);", 
                            "    pm.environment.set(\"FromId\",currentData.FromId);", 
                            "    pm.environment.set(\"Operation\",currentData.Operation);", 
                            "    pm.environment.set(\"RequestId\",currentData.RequestId);", 
                            "    pm.environment.set(\"ResourceType\",currentData.ResourceType);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.OriginatingTimestamp);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.ReqExpirationTimestamp);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.ResExpirationTimestamp);", 
                            "    pm.environment.set(\"EventCategory\",currentData.EventCategory);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.OperationalExecutionTime);", 
                            "    pm.environment.set(\"ResponseType\",currentData.ResponseType);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.ResultPersistence);", 
                            "    pm.environment.set(\"ResultContent\",currentData.ResultContent);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.DeliveryAggregation);", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.GroupRequestIdentifier);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.FilterCriteria);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.DesiredIdentifierResultType);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.TokenRequestIndicator);", 
                            "    pm.environment.set(\"Tokens\",currentData.Tokens);", 
                            "    pm.environment.set(\"TokenIDs\",currentData.TokenIDs);", 
                            "    pm.environment.set(\"RoleIDs\",currentData.RoleIDs);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.LocalTokenIDs);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.ReleaseVersionIndicator);", 
                            "    pm.environment.set(\"VendorInformation\",currentData.VendorInformation);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.GroupRequestTargetMembers);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.AuthorizationSignatureIndicator);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.AuthorizationSignature);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.AuthorizationRelationshipIndicator);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.SemanticQueryIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a02", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?ToAddress={{ToAddress}}&FromId={{FromId}}&Operation={{Operation}}&RequestId={{RequestId}}&ResourceType={{ResourceType}}&OriginatingTimestamp={{OriginatingTimestamp}}&ReqExpirationTimestamp={{ReqExpirationTimestamp}}&ResExpirationTimestamp={{ResExpirationTimestamp}}&EventCategory={{EventCategory}}&OperationalExecutionTime={{OperationalExecutionTime}}&ResponseType={{ResponseType}}&ResultPersistence={{ResultPersistence}}&ResultContent={{ResultContent}}&DeliveryAggregation={{DeliveryAggregation}}&GroupRequestIdentifier={{GroupRequestIdentifier}}&FilterCriteria={{FilterCriteria}}&DesiredIdentifierResultType={{DesiredIdentifierResultType}}&TokenRequestIndicator={{TokenRequestIndicator}}&Tokens={{Tokens}}&TokenIDs={{TokenIDs}}&RoleIDs={{RoleIDs}}&LocalTokenIDs={{LocalTokenIDs}}&ReleaseVersionIndicator={{ReleaseVersionIndicator}}&VendorInformation={{VendorInformation}}&GroupRequestTargetMembers={{GroupRequestTargetMembers}}&AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}&AuthorizationSignature={{AuthorizationSignature}}&AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}&SemanticQueryIndicator={{SemanticQueryIndicator}}", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/4?query=/iot3/example/ontology?ToAddress={{ToAddress}}?FromId={{FromId}}?Operation={{Operation}}?RequestId={{RequestId}}?ResourceType={{ResourceType}}?OriginatingTimestamp={{OriginatingTimestamp}}?ReqExpirationTimestamp={{ReqExpirationTimestamp}}?ResExpirationTimestamp={{ResExpirationTimestamp}}?EventCategory={{EventCategory}}?OperationalExecutionTime={{OperationalExecutionTime}}?ResponseType={{ResponseType}}?ResultPersistence={{ResultPersistence}}?ResultContent={{ResultContent}}?DeliveryAggregation={{DeliveryAggregation}}?GroupRequestIdentifier={{GroupRequestIdentifier}}?FilterCriteria={{FilterCriteria}}?DesiredIdentifierResultType={{DesiredIdentifierResultType}}?TokenRequestIndicator={{TokenRequestIndicator}}?Tokens={{Tokens}}?TokenIDs={{TokenIDs}}?RoleIDs={{RoleIDs}}?LocalTokenIDs={{LocalTokenIDs}}?ReleaseVersionIndicator={{ReleaseVersionIndicator}}?VendorInformation={{VendorInformation}}?GroupRequestTargetMembers={{GroupRequestTargetMembers}}?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}?AuthorizationSignature={{AuthorizationSignature}}?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}?SemanticQueryIndicator={{SemanticQueryIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ToAddress\",currentData.ToAddress);", 
                            "    pm.environment.set(\"FromId\",currentData.FromId);", 
                            "    pm.environment.set(\"Operation\",currentData.Operation);", 
                            "    pm.environment.set(\"RequestId\",currentData.RequestId);", 
                            "    pm.environment.set(\"ResourceType\",currentData.ResourceType);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.OriginatingTimestamp);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.ReqExpirationTimestamp);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.ResExpirationTimestamp);", 
                            "    pm.environment.set(\"EventCategory\",currentData.EventCategory);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.OperationalExecutionTime);", 
                            "    pm.environment.set(\"ResponseType\",currentData.ResponseType);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.ResultPersistence);", 
                            "    pm.environment.set(\"ResultContent\",currentData.ResultContent);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.DeliveryAggregation);", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.GroupRequestIdentifier);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.FilterCriteria);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.DesiredIdentifierResultType);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.TokenRequestIndicator);", 
                            "    pm.environment.set(\"Tokens\",currentData.Tokens);", 
                            "    pm.environment.set(\"TokenIDs\",currentData.TokenIDs);", 
                            "    pm.environment.set(\"RoleIDs\",currentData.RoleIDs);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.LocalTokenIDs);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.ReleaseVersionIndicator);", 
                            "    pm.environment.set(\"VendorInformation\",currentData.VendorInformation);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.GroupRequestTargetMembers);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.AuthorizationSignatureIndicator);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.AuthorizationSignature);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.AuthorizationRelationshipIndicator);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.SemanticQueryIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd3", 
            "description": "This method retrieves information about a list of ontology resources"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?ToAddress={{ToAddress}}&FromId={{FromId}}&Operation={{Operation}}&RequestId={{RequestId}}&ResourceType={{ResourceType}}&OriginatingTimestamp={{OriginatingTimestamp}}&ReqExpirationTimestamp={{ReqExpirationTimestamp}}&ResExpirationTimestamp={{ResExpirationTimestamp}}&EventCategory={{EventCategory}}&OperationalExecutionTime={{OperationalExecutionTime}}&ResponseType={{ResponseType}}&ResultPersistence={{ResultPersistence}}&ResultContent={{ResultContent}}&DeliveryAggregation={{DeliveryAggregation}}&GroupRequestIdentifier={{GroupRequestIdentifier}}&FilterCriteria={{FilterCriteria}}&DesiredIdentifierResultType={{DesiredIdentifierResultType}}&TokenRequestIndicator={{TokenRequestIndicator}}&Tokens={{Tokens}}&TokenIDs={{TokenIDs}}&RoleIDs={{RoleIDs}}&LocalTokenIDs={{LocalTokenIDs}}&ReleaseVersionIndicator={{ReleaseVersionIndicator}}&VendorInformation={{VendorInformation}}&GroupRequestTargetMembers={{GroupRequestTargetMembers}}&AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}&AuthorizationSignature={{AuthorizationSignature}}&AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}&SemanticQueryIndicator={{SemanticQueryIndicator}}", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/5?query=/iot3/example/semanticMashupInstance?ToAddress={{ToAddress}}?FromId={{FromId}}?Operation={{Operation}}?RequestId={{RequestId}}?ResourceType={{ResourceType}}?OriginatingTimestamp={{OriginatingTimestamp}}?ReqExpirationTimestamp={{ReqExpirationTimestamp}}?ResExpirationTimestamp={{ResExpirationTimestamp}}?EventCategory={{EventCategory}}?OperationalExecutionTime={{OperationalExecutionTime}}?ResponseType={{ResponseType}}?ResultPersistence={{ResultPersistence}}?ResultContent={{ResultContent}}?DeliveryAggregation={{DeliveryAggregation}}?GroupRequestIdentifier={{GroupRequestIdentifier}}?FilterCriteria={{FilterCriteria}}?DesiredIdentifierResultType={{DesiredIdentifierResultType}}?TokenRequestIndicator={{TokenRequestIndicator}}?Tokens={{Tokens}}?TokenIDs={{TokenIDs}}?RoleIDs={{RoleIDs}}?LocalTokenIDs={{LocalTokenIDs}}?ReleaseVersionIndicator={{ReleaseVersionIndicator}}?VendorInformation={{VendorInformation}}?GroupRequestTargetMembers={{GroupRequestTargetMembers}}?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}?AuthorizationSignature={{AuthorizationSignature}}?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}?SemanticQueryIndicator={{SemanticQueryIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ToAddress\",currentData.ToAddress);", 
                            "    pm.environment.set(\"FromId\",currentData.FromId);", 
                            "    pm.environment.set(\"Operation\",currentData.Operation);", 
                            "    pm.environment.set(\"RequestId\",currentData.RequestId);", 
                            "    pm.environment.set(\"ResourceType\",currentData.ResourceType);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.OriginatingTimestamp);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.ReqExpirationTimestamp);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.ResExpirationTimestamp);", 
                            "    pm.environment.set(\"EventCategory\",currentData.EventCategory);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.OperationalExecutionTime);", 
                            "    pm.environment.set(\"ResponseType\",currentData.ResponseType);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.ResultPersistence);", 
                            "    pm.environment.set(\"ResultContent\",currentData.ResultContent);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.DeliveryAggregation);", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.GroupRequestIdentifier);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.FilterCriteria);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.DesiredIdentifierResultType);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.TokenRequestIndicator);", 
                            "    pm.environment.set(\"Tokens\",currentData.Tokens);", 
                            "    pm.environment.set(\"TokenIDs\",currentData.TokenIDs);", 
                            "    pm.environment.set(\"RoleIDs\",currentData.RoleIDs);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.LocalTokenIDs);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.ReleaseVersionIndicator);", 
                            "    pm.environment.set(\"VendorInformation\",currentData.VendorInformation);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.GroupRequestTargetMembers);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.AuthorizationSignatureIndicator);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.AuthorizationSignature);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.AuthorizationRelationshipIndicator);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.SemanticQueryIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e4154", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?ToAddress={{ToAddress}}&FromId={{FromId}}&Operation={{Operation}}&RequestId={{RequestId}}&ResourceType={{ResourceType}}&OriginatingTimestamp={{OriginatingTimestamp}}&ReqExpirationTimestamp={{ReqExpirationTimestamp}}&ResExpirationTimestamp={{ResExpirationTimestamp}}&EventCategory={{EventCategory}}&OperationalExecutionTime={{OperationalExecutionTime}}&ResponseType={{ResponseType}}&ResultPersistence={{ResultPersistence}}&ResultContent={{ResultContent}}&DeliveryAggregation={{DeliveryAggregation}}&GroupRequestIdentifier={{GroupRequestIdentifier}}&FilterCriteria={{FilterCriteria}}&DesiredIdentifierResultType={{DesiredIdentifierResultType}}&TokenRequestIndicator={{TokenRequestIndicator}}&Tokens={{Tokens}}&TokenIDs={{TokenIDs}}&RoleIDs={{RoleIDs}}&LocalTokenIDs={{LocalTokenIDs}}&ReleaseVersionIndicator={{ReleaseVersionIndicator}}&VendorInformation={{VendorInformation}}&GroupRequestTargetMembers={{GroupRequestTargetMembers}}&AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}&AuthorizationSignature={{AuthorizationSignature}}&AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}&SemanticQueryIndicator={{SemanticQueryIndicator}}", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/6?query=/iot3/example/ontologyRepository?ToAddress={{ToAddress}}?FromId={{FromId}}?Operation={{Operation}}?RequestId={{RequestId}}?ResourceType={{ResourceType}}?OriginatingTimestamp={{OriginatingTimestamp}}?ReqExpirationTimestamp={{ReqExpirationTimestamp}}?ResExpirationTimestamp={{ResExpirationTimestamp}}?EventCategory={{EventCategory}}?OperationalExecutionTime={{OperationalExecutionTime}}?ResponseType={{ResponseType}}?ResultPersistence={{ResultPersistence}}?ResultContent={{ResultContent}}?DeliveryAggregation={{DeliveryAggregation}}?GroupRequestIdentifier={{GroupRequestIdentifier}}?FilterCriteria={{FilterCriteria}}?DesiredIdentifierResultType={{DesiredIdentifierResultType}}?TokenRequestIndicator={{TokenRequestIndicator}}?Tokens={{Tokens}}?TokenIDs={{TokenIDs}}?RoleIDs={{RoleIDs}}?LocalTokenIDs={{LocalTokenIDs}}?ReleaseVersionIndicator={{ReleaseVersionIndicator}}?VendorInformation={{VendorInformation}}?GroupRequestTargetMembers={{GroupRequestTargetMembers}}?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}?AuthorizationSignature={{AuthorizationSignature}}?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}?SemanticQueryIndicator={{SemanticQueryIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ToAddress\",currentData.ToAddress);", 
                            "    pm.environment.set(\"FromId\",currentData.FromId);", 
                            "    pm.environment.set(\"Operation\",currentData.Operation);", 
                            "    pm.environment.set(\"RequestId\",currentData.RequestId);", 
                            "    pm.environment.set(\"ResourceType\",currentData.ResourceType);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.OriginatingTimestamp);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.ReqExpirationTimestamp);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.ResExpirationTimestamp);", 
                            "    pm.environment.set(\"EventCategory\",currentData.EventCategory);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.OperationalExecutionTime);", 
                            "    pm.environment.set(\"ResponseType\",currentData.ResponseType);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.ResultPersistence);", 
                            "    pm.environment.set(\"ResultContent\",currentData.ResultContent);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.DeliveryAggregation);", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.GroupRequestIdentifier);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.FilterCriteria);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.DesiredIdentifierResultType);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.TokenRequestIndicator);", 
                            "    pm.environment.set(\"Tokens\",currentData.Tokens);", 
                            "    pm.environment.set(\"TokenIDs\",currentData.TokenIDs);", 
                            "    pm.environment.set(\"RoleIDs\",currentData.RoleIDs);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.LocalTokenIDs);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.ReleaseVersionIndicator);", 
                            "    pm.environment.set(\"VendorInformation\",currentData.VendorInformation);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.GroupRequestTargetMembers);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.AuthorizationSignatureIndicator);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.AuthorizationSignature);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.AuthorizationRelationshipIndicator);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.SemanticQueryIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d25", 
            "description": "This method retrieves information about a list of ontologyRepository resources"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?ToAddress={{ToAddress}}&FromId={{FromId}}&Operation={{Operation}}&RequestId={{RequestId}}&ResourceType={{ResourceType}}&OriginatingTimestamp={{OriginatingTimestamp}}&ReqExpirationTimestamp={{ReqExpirationTimestamp}}&ResExpirationTimestamp={{ResExpirationTimestamp}}&EventCategory={{EventCategory}}&OperationalExecutionTime={{OperationalExecutionTime}}&ResponseType={{ResponseType}}&ResultPersistence={{ResultPersistence}}&ResultContent={{ResultContent}}&DeliveryAggregation={{DeliveryAggregation}}&GroupRequestIdentifier={{GroupRequestIdentifier}}&FilterCriteria={{FilterCriteria}}&DesiredIdentifierResultType={{DesiredIdentifierResultType}}&TokenRequestIndicator={{TokenRequestIndicator}}&Tokens={{Tokens}}&TokenIDs={{TokenIDs}}&RoleIDs={{RoleIDs}}&LocalTokenIDs={{LocalTokenIDs}}&ReleaseVersionIndicator={{ReleaseVersionIndicator}}&VendorInformation={{VendorInformation}}&GroupRequestTargetMembers={{GroupRequestTargetMembers}}&AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}&AuthorizationSignature={{AuthorizationSignature}}&AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}&SemanticQueryIndicator={{SemanticQueryIndicator}}", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/7?query=/iot3/example/semanticMashupJobProfile?ToAddress={{ToAddress}}?FromId={{FromId}}?Operation={{Operation}}?RequestId={{RequestId}}?ResourceType={{ResourceType}}?OriginatingTimestamp={{OriginatingTimestamp}}?ReqExpirationTimestamp={{ReqExpirationTimestamp}}?ResExpirationTimestamp={{ResExpirationTimestamp}}?EventCategory={{EventCategory}}?OperationalExecutionTime={{OperationalExecutionTime}}?ResponseType={{ResponseType}}?ResultPersistence={{ResultPersistence}}?ResultContent={{ResultContent}}?DeliveryAggregation={{DeliveryAggregation}}?GroupRequestIdentifier={{GroupRequestIdentifier}}?FilterCriteria={{FilterCriteria}}?DesiredIdentifierResultType={{DesiredIdentifierResultType}}?TokenRequestIndicator={{TokenRequestIndicator}}?Tokens={{Tokens}}?TokenIDs={{TokenIDs}}?RoleIDs={{RoleIDs}}?LocalTokenIDs={{LocalTokenIDs}}?ReleaseVersionIndicator={{ReleaseVersionIndicator}}?VendorInformation={{VendorInformation}}?GroupRequestTargetMembers={{GroupRequestTargetMembers}}?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}?AuthorizationSignature={{AuthorizationSignature}}?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}?SemanticQueryIndicator={{SemanticQueryIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ToAddress\",currentData.ToAddress);", 
                            "    pm.environment.set(\"FromId\",currentData.FromId);", 
                            "    pm.environment.set(\"Operation\",currentData.Operation);", 
                            "    pm.environment.set(\"RequestId\",currentData.RequestId);", 
                            "    pm.environment.set(\"ResourceType\",currentData.ResourceType);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.OriginatingTimestamp);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.ReqExpirationTimestamp);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.ResExpirationTimestamp);", 
                            "    pm.environment.set(\"EventCategory\",currentData.EventCategory);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.OperationalExecutionTime);", 
                            "    pm.environment.set(\"ResponseType\",currentData.ResponseType);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.ResultPersistence);", 
                            "    pm.environment.set(\"ResultContent\",currentData.ResultContent);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.DeliveryAggregation);", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.GroupRequestIdentifier);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.FilterCriteria);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.DesiredIdentifierResultType);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.TokenRequestIndicator);", 
                            "    pm.environment.set(\"Tokens\",currentData.Tokens);", 
                            "    pm.environment.set(\"TokenIDs\",currentData.TokenIDs);", 
                            "    pm.environment.set(\"RoleIDs\",currentData.RoleIDs);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.LocalTokenIDs);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.ReleaseVersionIndicator);", 
                            "    pm.environment.set(\"VendorInformation\",currentData.VendorInformation);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.GroupRequestTargetMembers);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.AuthorizationSignatureIndicator);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.AuthorizationSignature);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.AuthorizationRelationshipIndicator);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.SemanticQueryIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f716", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?ToAddress={{ToAddress}}&FromId={{FromId}}&Operation={{Operation}}&RequestId={{RequestId}}&ResourceType={{ResourceType}}&OriginatingTimestamp={{OriginatingTimestamp}}&ReqExpirationTimestamp={{ReqExpirationTimestamp}}&ResExpirationTimestamp={{ResExpirationTimestamp}}&EventCategory={{EventCategory}}&OperationalExecutionTime={{OperationalExecutionTime}}&ResponseType={{ResponseType}}&ResultPersistence={{ResultPersistence}}&ResultContent={{ResultContent}}&DeliveryAggregation={{DeliveryAggregation}}&GroupRequestIdentifier={{GroupRequestIdentifier}}&FilterCriteria={{FilterCriteria}}&DesiredIdentifierResultType={{DesiredIdentifierResultType}}&TokenRequestIndicator={{TokenRequestIndicator}}&Tokens={{Tokens}}&TokenIDs={{TokenIDs}}&RoleIDs={{RoleIDs}}&LocalTokenIDs={{LocalTokenIDs}}&ReleaseVersionIndicator={{ReleaseVersionIndicator}}&VendorInformation={{VendorInformation}}&GroupRequestTargetMembers={{GroupRequestTargetMembers}}&AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}&AuthorizationSignature={{AuthorizationSignature}}&AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}&SemanticQueryIndicator={{SemanticQueryIndicator}}", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/8?query=/iot3/example/semanticDescriptor?ToAddress={{ToAddress}}?FromId={{FromId}}?Operation={{Operation}}?RequestId={{RequestId}}?ResourceType={{ResourceType}}?OriginatingTimestamp={{OriginatingTimestamp}}?ReqExpirationTimestamp={{ReqExpirationTimestamp}}?ResExpirationTimestamp={{ResExpirationTimestamp}}?EventCategory={{EventCategory}}?OperationalExecutionTime={{OperationalExecutionTime}}?ResponseType={{ResponseType}}?ResultPersistence={{ResultPersistence}}?ResultContent={{ResultContent}}?DeliveryAggregation={{DeliveryAggregation}}?GroupRequestIdentifier={{GroupRequestIdentifier}}?FilterCriteria={{FilterCriteria}}?DesiredIdentifierResultType={{DesiredIdentifierResultType}}?TokenRequestIndicator={{TokenRequestIndicator}}?Tokens={{Tokens}}?TokenIDs={{TokenIDs}}?RoleIDs={{RoleIDs}}?LocalTokenIDs={{LocalTokenIDs}}?ReleaseVersionIndicator={{ReleaseVersionIndicator}}?VendorInformation={{VendorInformation}}?GroupRequestTargetMembers={{GroupRequestTargetMembers}}?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}?AuthorizationSignature={{AuthorizationSignature}}?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}?SemanticQueryIndicator={{SemanticQueryIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ToAddress\",currentData.ToAddress);", 
                            "    pm.environment.set(\"FromId\",currentData.FromId);", 
                            "    pm.environment.set(\"Operation\",currentData.Operation);", 
                            "    pm.environment.set(\"RequestId\",currentData.RequestId);", 
                            "    pm.environment.set(\"ResourceType\",currentData.ResourceType);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.OriginatingTimestamp);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.ReqExpirationTimestamp);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.ResExpirationTimestamp);", 
                            "    pm.environment.set(\"EventCategory\",currentData.EventCategory);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.OperationalExecutionTime);", 
                            "    pm.environment.set(\"ResponseType\",currentData.ResponseType);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.ResultPersistence);", 
                            "    pm.environment.set(\"ResultContent\",currentData.ResultContent);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.DeliveryAggregation);", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.GroupRequestIdentifier);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.FilterCriteria);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.DesiredIdentifierResultType);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.TokenRequestIndicator);", 
                            "    pm.environment.set(\"Tokens\",currentData.Tokens);", 
                            "    pm.environment.set(\"TokenIDs\",currentData.TokenIDs);", 
                            "    pm.environment.set(\"RoleIDs\",currentData.RoleIDs);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.LocalTokenIDs);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.ReleaseVersionIndicator);", 
                            "    pm.environment.set(\"VendorInformation\",currentData.VendorInformation);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.GroupRequestTargetMembers);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.AuthorizationSignatureIndicator);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.AuthorizationSignature);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.AuthorizationRelationshipIndicator);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.SemanticQueryIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a87", 
            "description": "This method retrieves information about a list of semanticDescriptor resources"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of mashup resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup?ToAddress={{ToAddress}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/9?query=/iot3/example/mashup?ToAddress={{ToAddress}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ToAddress\",currentData.ToAddress);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde208", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of mashup resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup?FromId={{FromId}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/10?query=/iot3/example/mashup?FromId={{FromId}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"FromId\",currentData.FromId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde219", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of mashup resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup?Operation={{Operation}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/11?query=/iot3/example/mashup?Operation={{Operation}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"Operation\",currentData.Operation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde2210", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of mashup resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup?RequestId={{RequestId}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/12?query=/iot3/example/mashup?RequestId={{RequestId}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"RequestId\",currentData.RequestId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde2311", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of mashup resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup?ResourceType={{ResourceType}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/13?query=/iot3/example/mashup?ResourceType={{ResourceType}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResourceType\",currentData.ResourceType);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde2412", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of mashup resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup?OriginatingTimestamp={{OriginatingTimestamp}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/14?query=/iot3/example/mashup?OriginatingTimestamp={{OriginatingTimestamp}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.OriginatingTimestamp);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde2513", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of mashup resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup?ReqExpirationTimestamp={{ReqExpirationTimestamp}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/15?query=/iot3/example/mashup?ReqExpirationTimestamp={{ReqExpirationTimestamp}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.ReqExpirationTimestamp);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde2614", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of mashup resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup?ResExpirationTimestamp={{ResExpirationTimestamp}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/16?query=/iot3/example/mashup?ResExpirationTimestamp={{ResExpirationTimestamp}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.ResExpirationTimestamp);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde2715", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of mashup resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup?EventCategory={{EventCategory}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/17?query=/iot3/example/mashup?EventCategory={{EventCategory}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"EventCategory\",currentData.EventCategory);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde2816", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of mashup resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup?OperationalExecutionTime={{OperationalExecutionTime}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/18?query=/iot3/example/mashup?OperationalExecutionTime={{OperationalExecutionTime}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.OperationalExecutionTime);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde2917", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of mashup resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup?ResponseType={{ResponseType}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/19?query=/iot3/example/mashup?ResponseType={{ResponseType}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResponseType\",currentData.ResponseType);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde21018", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of mashup resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup?ResultPersistence={{ResultPersistence}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/20?query=/iot3/example/mashup?ResultPersistence={{ResultPersistence}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.ResultPersistence);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde21119", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of mashup resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup?ResultContent={{ResultContent}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/21?query=/iot3/example/mashup?ResultContent={{ResultContent}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResultContent\",currentData.ResultContent);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde21220", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of mashup resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup?DeliveryAggregation={{DeliveryAggregation}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/22?query=/iot3/example/mashup?DeliveryAggregation={{DeliveryAggregation}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.DeliveryAggregation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde21321", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of mashup resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup?GroupRequestIdentifier={{GroupRequestIdentifier}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/23?query=/iot3/example/mashup?GroupRequestIdentifier={{GroupRequestIdentifier}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.GroupRequestIdentifier);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde21422", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of mashup resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup?FilterCriteria={{FilterCriteria}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/24?query=/iot3/example/mashup?FilterCriteria={{FilterCriteria}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.FilterCriteria);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde21523", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of mashup resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup?DesiredIdentifierResultType={{DesiredIdentifierResultType}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/25?query=/iot3/example/mashup?DesiredIdentifierResultType={{DesiredIdentifierResultType}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.DesiredIdentifierResultType);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde21624", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of mashup resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup?TokenRequestIndicator={{TokenRequestIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/26?query=/iot3/example/mashup?TokenRequestIndicator={{TokenRequestIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.TokenRequestIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde21725", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of mashup resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup?Tokens={{Tokens}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/27?query=/iot3/example/mashup?Tokens={{Tokens}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"Tokens\",currentData.Tokens);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde21826", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of mashup resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup?TokenIDs={{TokenIDs}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/28?query=/iot3/example/mashup?TokenIDs={{TokenIDs}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"TokenIDs\",currentData.TokenIDs);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde21927", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of mashup resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup?RoleIDs={{RoleIDs}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/29?query=/iot3/example/mashup?RoleIDs={{RoleIDs}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"RoleIDs\",currentData.RoleIDs);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde22028", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of mashup resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup?LocalTokenIDs={{LocalTokenIDs}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/30?query=/iot3/example/mashup?LocalTokenIDs={{LocalTokenIDs}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.LocalTokenIDs);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde22129", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of mashup resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup?ReleaseVersionIndicator={{ReleaseVersionIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/31?query=/iot3/example/mashup?ReleaseVersionIndicator={{ReleaseVersionIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.ReleaseVersionIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde22230", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of mashup resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup?VendorInformation={{VendorInformation}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/32?query=/iot3/example/mashup?VendorInformation={{VendorInformation}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"VendorInformation\",currentData.VendorInformation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde22331", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of mashup resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup?GroupRequestTargetMembers={{GroupRequestTargetMembers}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/33?query=/iot3/example/mashup?GroupRequestTargetMembers={{GroupRequestTargetMembers}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.GroupRequestTargetMembers);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde22432", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of mashup resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/34?query=/iot3/example/mashup?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.AuthorizationSignatureIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde22533", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of mashup resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup?AuthorizationSignature={{AuthorizationSignature}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/35?query=/iot3/example/mashup?AuthorizationSignature={{AuthorizationSignature}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.AuthorizationSignature);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde22634", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of mashup resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/36?query=/iot3/example/mashup?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.AuthorizationRelationshipIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde22735", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of mashup resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup?SemanticQueryIndicator={{SemanticQueryIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/37?query=/iot3/example/mashup?SemanticQueryIndicator={{SemanticQueryIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.SemanticQueryIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde22836", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of mashup resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/mashup", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['mashupInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/38?query=/iot3/example/mashup',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9466d204-5aa8-4f9c-af7f-7cc4cc2bcde22937", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupResult resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?ToAddress={{ToAddress}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/39?query=/iot3/example/semanticMashupResult?ToAddress={{ToAddress}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ToAddress\",currentData.ToAddress);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e038", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupResult resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?FromId={{FromId}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/40?query=/iot3/example/semanticMashupResult?FromId={{FromId}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"FromId\",currentData.FromId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e139", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupResult resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?Operation={{Operation}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/41?query=/iot3/example/semanticMashupResult?Operation={{Operation}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"Operation\",currentData.Operation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e240", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupResult resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?RequestId={{RequestId}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/42?query=/iot3/example/semanticMashupResult?RequestId={{RequestId}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"RequestId\",currentData.RequestId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e341", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupResult resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?ResourceType={{ResourceType}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/43?query=/iot3/example/semanticMashupResult?ResourceType={{ResourceType}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResourceType\",currentData.ResourceType);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e442", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupResult resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?OriginatingTimestamp={{OriginatingTimestamp}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/44?query=/iot3/example/semanticMashupResult?OriginatingTimestamp={{OriginatingTimestamp}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.OriginatingTimestamp);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e543", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupResult resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?ReqExpirationTimestamp={{ReqExpirationTimestamp}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/45?query=/iot3/example/semanticMashupResult?ReqExpirationTimestamp={{ReqExpirationTimestamp}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.ReqExpirationTimestamp);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e644", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupResult resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?ResExpirationTimestamp={{ResExpirationTimestamp}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/46?query=/iot3/example/semanticMashupResult?ResExpirationTimestamp={{ResExpirationTimestamp}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.ResExpirationTimestamp);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e745", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupResult resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?EventCategory={{EventCategory}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/47?query=/iot3/example/semanticMashupResult?EventCategory={{EventCategory}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"EventCategory\",currentData.EventCategory);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e846", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupResult resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?OperationalExecutionTime={{OperationalExecutionTime}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/48?query=/iot3/example/semanticMashupResult?OperationalExecutionTime={{OperationalExecutionTime}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.OperationalExecutionTime);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e947", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupResult resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?ResponseType={{ResponseType}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/49?query=/iot3/example/semanticMashupResult?ResponseType={{ResponseType}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResponseType\",currentData.ResponseType);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e1048", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupResult resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?ResultPersistence={{ResultPersistence}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/50?query=/iot3/example/semanticMashupResult?ResultPersistence={{ResultPersistence}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.ResultPersistence);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e1149", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupResult resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?ResultContent={{ResultContent}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/51?query=/iot3/example/semanticMashupResult?ResultContent={{ResultContent}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResultContent\",currentData.ResultContent);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e1250", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupResult resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?DeliveryAggregation={{DeliveryAggregation}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/52?query=/iot3/example/semanticMashupResult?DeliveryAggregation={{DeliveryAggregation}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.DeliveryAggregation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e1351", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupResult resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?GroupRequestIdentifier={{GroupRequestIdentifier}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/53?query=/iot3/example/semanticMashupResult?GroupRequestIdentifier={{GroupRequestIdentifier}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.GroupRequestIdentifier);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e1452", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupResult resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?FilterCriteria={{FilterCriteria}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/54?query=/iot3/example/semanticMashupResult?FilterCriteria={{FilterCriteria}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.FilterCriteria);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e1553", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupResult resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?DesiredIdentifierResultType={{DesiredIdentifierResultType}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/55?query=/iot3/example/semanticMashupResult?DesiredIdentifierResultType={{DesiredIdentifierResultType}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.DesiredIdentifierResultType);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e1654", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupResult resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?TokenRequestIndicator={{TokenRequestIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/56?query=/iot3/example/semanticMashupResult?TokenRequestIndicator={{TokenRequestIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.TokenRequestIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e1755", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupResult resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?Tokens={{Tokens}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/57?query=/iot3/example/semanticMashupResult?Tokens={{Tokens}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"Tokens\",currentData.Tokens);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e1856", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupResult resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?TokenIDs={{TokenIDs}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/58?query=/iot3/example/semanticMashupResult?TokenIDs={{TokenIDs}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"TokenIDs\",currentData.TokenIDs);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e1957", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupResult resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?RoleIDs={{RoleIDs}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/59?query=/iot3/example/semanticMashupResult?RoleIDs={{RoleIDs}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"RoleIDs\",currentData.RoleIDs);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e2058", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupResult resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?LocalTokenIDs={{LocalTokenIDs}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/60?query=/iot3/example/semanticMashupResult?LocalTokenIDs={{LocalTokenIDs}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.LocalTokenIDs);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e2159", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupResult resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?ReleaseVersionIndicator={{ReleaseVersionIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/61?query=/iot3/example/semanticMashupResult?ReleaseVersionIndicator={{ReleaseVersionIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.ReleaseVersionIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e2260", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupResult resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?VendorInformation={{VendorInformation}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/62?query=/iot3/example/semanticMashupResult?VendorInformation={{VendorInformation}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"VendorInformation\",currentData.VendorInformation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e2361", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupResult resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?GroupRequestTargetMembers={{GroupRequestTargetMembers}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/63?query=/iot3/example/semanticMashupResult?GroupRequestTargetMembers={{GroupRequestTargetMembers}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.GroupRequestTargetMembers);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e2462", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupResult resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/64?query=/iot3/example/semanticMashupResult?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.AuthorizationSignatureIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e2563", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupResult resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?AuthorizationSignature={{AuthorizationSignature}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/65?query=/iot3/example/semanticMashupResult?AuthorizationSignature={{AuthorizationSignature}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.AuthorizationSignature);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e2664", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupResult resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/66?query=/iot3/example/semanticMashupResult?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.AuthorizationRelationshipIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e2765", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupResult resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?SemanticQueryIndicator={{SemanticQueryIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/67?query=/iot3/example/semanticMashupResult?SemanticQueryIndicator={{SemanticQueryIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.SemanticQueryIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e2866", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupResult resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupResultInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupResultInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/68?query=/iot3/example/semanticMashupResult',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469602, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "23baab6b-b324-444c-8469-a8b137cb9d0e2967", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint?ToAddress={{ToAddress}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/69?query=/iot3/example/semanticFanOutPoint?ToAddress={{ToAddress}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ToAddress\",currentData.ToAddress);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a0068", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint?FromId={{FromId}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/70?query=/iot3/example/semanticFanOutPoint?FromId={{FromId}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"FromId\",currentData.FromId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a0169", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint?Operation={{Operation}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/71?query=/iot3/example/semanticFanOutPoint?Operation={{Operation}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"Operation\",currentData.Operation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a0270", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint?RequestId={{RequestId}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/72?query=/iot3/example/semanticFanOutPoint?RequestId={{RequestId}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"RequestId\",currentData.RequestId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a0371", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint?ResourceType={{ResourceType}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/73?query=/iot3/example/semanticFanOutPoint?ResourceType={{ResourceType}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResourceType\",currentData.ResourceType);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a0472", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint?OriginatingTimestamp={{OriginatingTimestamp}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/74?query=/iot3/example/semanticFanOutPoint?OriginatingTimestamp={{OriginatingTimestamp}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.OriginatingTimestamp);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a0573", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint?ReqExpirationTimestamp={{ReqExpirationTimestamp}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/75?query=/iot3/example/semanticFanOutPoint?ReqExpirationTimestamp={{ReqExpirationTimestamp}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.ReqExpirationTimestamp);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a0674", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint?ResExpirationTimestamp={{ResExpirationTimestamp}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/76?query=/iot3/example/semanticFanOutPoint?ResExpirationTimestamp={{ResExpirationTimestamp}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.ResExpirationTimestamp);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a0775", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint?EventCategory={{EventCategory}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/77?query=/iot3/example/semanticFanOutPoint?EventCategory={{EventCategory}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"EventCategory\",currentData.EventCategory);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a0876", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint?OperationalExecutionTime={{OperationalExecutionTime}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/78?query=/iot3/example/semanticFanOutPoint?OperationalExecutionTime={{OperationalExecutionTime}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.OperationalExecutionTime);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a0977", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint?ResponseType={{ResponseType}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/79?query=/iot3/example/semanticFanOutPoint?ResponseType={{ResponseType}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResponseType\",currentData.ResponseType);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a01078", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint?ResultPersistence={{ResultPersistence}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/80?query=/iot3/example/semanticFanOutPoint?ResultPersistence={{ResultPersistence}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.ResultPersistence);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a01179", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint?ResultContent={{ResultContent}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/81?query=/iot3/example/semanticFanOutPoint?ResultContent={{ResultContent}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResultContent\",currentData.ResultContent);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a01280", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint?DeliveryAggregation={{DeliveryAggregation}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/82?query=/iot3/example/semanticFanOutPoint?DeliveryAggregation={{DeliveryAggregation}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.DeliveryAggregation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a01381", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint?GroupRequestIdentifier={{GroupRequestIdentifier}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/83?query=/iot3/example/semanticFanOutPoint?GroupRequestIdentifier={{GroupRequestIdentifier}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.GroupRequestIdentifier);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a01482", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint?FilterCriteria={{FilterCriteria}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/84?query=/iot3/example/semanticFanOutPoint?FilterCriteria={{FilterCriteria}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.FilterCriteria);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a01583", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint?DesiredIdentifierResultType={{DesiredIdentifierResultType}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/85?query=/iot3/example/semanticFanOutPoint?DesiredIdentifierResultType={{DesiredIdentifierResultType}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.DesiredIdentifierResultType);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a01684", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint?TokenRequestIndicator={{TokenRequestIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/86?query=/iot3/example/semanticFanOutPoint?TokenRequestIndicator={{TokenRequestIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.TokenRequestIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a01785", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint?Tokens={{Tokens}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/87?query=/iot3/example/semanticFanOutPoint?Tokens={{Tokens}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"Tokens\",currentData.Tokens);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a01886", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint?TokenIDs={{TokenIDs}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/88?query=/iot3/example/semanticFanOutPoint?TokenIDs={{TokenIDs}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"TokenIDs\",currentData.TokenIDs);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a01987", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint?RoleIDs={{RoleIDs}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/89?query=/iot3/example/semanticFanOutPoint?RoleIDs={{RoleIDs}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"RoleIDs\",currentData.RoleIDs);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a02088", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint?LocalTokenIDs={{LocalTokenIDs}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/90?query=/iot3/example/semanticFanOutPoint?LocalTokenIDs={{LocalTokenIDs}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.LocalTokenIDs);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a02189", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint?ReleaseVersionIndicator={{ReleaseVersionIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/91?query=/iot3/example/semanticFanOutPoint?ReleaseVersionIndicator={{ReleaseVersionIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.ReleaseVersionIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a02290", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint?VendorInformation={{VendorInformation}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/92?query=/iot3/example/semanticFanOutPoint?VendorInformation={{VendorInformation}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"VendorInformation\",currentData.VendorInformation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a02391", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint?GroupRequestTargetMembers={{GroupRequestTargetMembers}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/93?query=/iot3/example/semanticFanOutPoint?GroupRequestTargetMembers={{GroupRequestTargetMembers}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.GroupRequestTargetMembers);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a02492", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/94?query=/iot3/example/semanticFanOutPoint?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.AuthorizationSignatureIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a02593", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint?AuthorizationSignature={{AuthorizationSignature}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/95?query=/iot3/example/semanticFanOutPoint?AuthorizationSignature={{AuthorizationSignature}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.AuthorizationSignature);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a02694", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/96?query=/iot3/example/semanticFanOutPoint?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.AuthorizationRelationshipIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a02795", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint?SemanticQueryIndicator={{SemanticQueryIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/97?query=/iot3/example/semanticFanOutPoint?SemanticQueryIndicator={{SemanticQueryIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.SemanticQueryIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a02896", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticFanOutPoint resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticFanOutPoint", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticFanOutPointInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticFanOutPointInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/98?query=/iot3/example/semanticFanOutPoint',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "9b917908-401a-4882-8b2d-7385fb70b5a02997", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontology resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?ToAddress={{ToAddress}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/99?query=/iot3/example/ontology?ToAddress={{ToAddress}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ToAddress\",currentData.ToAddress);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd098", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontology resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?FromId={{FromId}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/100?query=/iot3/example/ontology?FromId={{FromId}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"FromId\",currentData.FromId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd199", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontology resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?Operation={{Operation}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/101?query=/iot3/example/ontology?Operation={{Operation}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"Operation\",currentData.Operation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd2100", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontology resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?RequestId={{RequestId}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/102?query=/iot3/example/ontology?RequestId={{RequestId}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"RequestId\",currentData.RequestId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd3101", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontology resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?ResourceType={{ResourceType}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/103?query=/iot3/example/ontology?ResourceType={{ResourceType}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResourceType\",currentData.ResourceType);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd4102", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontology resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?OriginatingTimestamp={{OriginatingTimestamp}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/104?query=/iot3/example/ontology?OriginatingTimestamp={{OriginatingTimestamp}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.OriginatingTimestamp);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd5103", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontology resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?ReqExpirationTimestamp={{ReqExpirationTimestamp}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/105?query=/iot3/example/ontology?ReqExpirationTimestamp={{ReqExpirationTimestamp}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.ReqExpirationTimestamp);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd6104", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontology resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?ResExpirationTimestamp={{ResExpirationTimestamp}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/106?query=/iot3/example/ontology?ResExpirationTimestamp={{ResExpirationTimestamp}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.ResExpirationTimestamp);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd7105", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontology resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?EventCategory={{EventCategory}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/107?query=/iot3/example/ontology?EventCategory={{EventCategory}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"EventCategory\",currentData.EventCategory);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd8106", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontology resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?OperationalExecutionTime={{OperationalExecutionTime}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/108?query=/iot3/example/ontology?OperationalExecutionTime={{OperationalExecutionTime}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.OperationalExecutionTime);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd9107", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontology resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?ResponseType={{ResponseType}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/109?query=/iot3/example/ontology?ResponseType={{ResponseType}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResponseType\",currentData.ResponseType);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd10108", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontology resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?ResultPersistence={{ResultPersistence}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/110?query=/iot3/example/ontology?ResultPersistence={{ResultPersistence}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.ResultPersistence);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd11109", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontology resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?ResultContent={{ResultContent}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/111?query=/iot3/example/ontology?ResultContent={{ResultContent}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResultContent\",currentData.ResultContent);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd12110", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontology resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?DeliveryAggregation={{DeliveryAggregation}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/112?query=/iot3/example/ontology?DeliveryAggregation={{DeliveryAggregation}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.DeliveryAggregation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd13111", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontology resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?GroupRequestIdentifier={{GroupRequestIdentifier}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/113?query=/iot3/example/ontology?GroupRequestIdentifier={{GroupRequestIdentifier}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.GroupRequestIdentifier);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd14112", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontology resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?FilterCriteria={{FilterCriteria}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/114?query=/iot3/example/ontology?FilterCriteria={{FilterCriteria}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.FilterCriteria);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd15113", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontology resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?DesiredIdentifierResultType={{DesiredIdentifierResultType}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/115?query=/iot3/example/ontology?DesiredIdentifierResultType={{DesiredIdentifierResultType}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.DesiredIdentifierResultType);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd16114", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontology resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?TokenRequestIndicator={{TokenRequestIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/116?query=/iot3/example/ontology?TokenRequestIndicator={{TokenRequestIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.TokenRequestIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd17115", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontology resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?Tokens={{Tokens}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/117?query=/iot3/example/ontology?Tokens={{Tokens}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"Tokens\",currentData.Tokens);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd18116", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontology resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?TokenIDs={{TokenIDs}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/118?query=/iot3/example/ontology?TokenIDs={{TokenIDs}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"TokenIDs\",currentData.TokenIDs);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd19117", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontology resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?RoleIDs={{RoleIDs}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/119?query=/iot3/example/ontology?RoleIDs={{RoleIDs}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"RoleIDs\",currentData.RoleIDs);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd20118", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontology resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?LocalTokenIDs={{LocalTokenIDs}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/120?query=/iot3/example/ontology?LocalTokenIDs={{LocalTokenIDs}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.LocalTokenIDs);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd21119", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontology resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?ReleaseVersionIndicator={{ReleaseVersionIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/121?query=/iot3/example/ontology?ReleaseVersionIndicator={{ReleaseVersionIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.ReleaseVersionIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd22120", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontology resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?VendorInformation={{VendorInformation}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/122?query=/iot3/example/ontology?VendorInformation={{VendorInformation}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"VendorInformation\",currentData.VendorInformation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd23121", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontology resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?GroupRequestTargetMembers={{GroupRequestTargetMembers}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/123?query=/iot3/example/ontology?GroupRequestTargetMembers={{GroupRequestTargetMembers}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.GroupRequestTargetMembers);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd24122", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontology resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/124?query=/iot3/example/ontology?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.AuthorizationSignatureIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd25123", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontology resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?AuthorizationSignature={{AuthorizationSignature}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/125?query=/iot3/example/ontology?AuthorizationSignature={{AuthorizationSignature}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.AuthorizationSignature);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd26124", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontology resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/126?query=/iot3/example/ontology?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.AuthorizationRelationshipIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd27125", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontology resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?SemanticQueryIndicator={{SemanticQueryIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/127?query=/iot3/example/ontology?SemanticQueryIndicator={{SemanticQueryIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.SemanticQueryIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd28126", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontology resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/128?query=/iot3/example/ontology',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "925c9d40-7311-4d2d-9935-5d516e3207fd29127", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?ToAddress={{ToAddress}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/129?query=/iot3/example/semanticMashupInstance?ToAddress={{ToAddress}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ToAddress\",currentData.ToAddress);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e4150128", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?FromId={{FromId}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/130?query=/iot3/example/semanticMashupInstance?FromId={{FromId}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"FromId\",currentData.FromId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e4151129", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?Operation={{Operation}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/131?query=/iot3/example/semanticMashupInstance?Operation={{Operation}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"Operation\",currentData.Operation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e4152130", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?RequestId={{RequestId}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/132?query=/iot3/example/semanticMashupInstance?RequestId={{RequestId}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"RequestId\",currentData.RequestId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e4153131", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?ResourceType={{ResourceType}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/133?query=/iot3/example/semanticMashupInstance?ResourceType={{ResourceType}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResourceType\",currentData.ResourceType);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e4154132", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?OriginatingTimestamp={{OriginatingTimestamp}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/134?query=/iot3/example/semanticMashupInstance?OriginatingTimestamp={{OriginatingTimestamp}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.OriginatingTimestamp);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e4155133", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?ReqExpirationTimestamp={{ReqExpirationTimestamp}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/135?query=/iot3/example/semanticMashupInstance?ReqExpirationTimestamp={{ReqExpirationTimestamp}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.ReqExpirationTimestamp);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e4156134", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?ResExpirationTimestamp={{ResExpirationTimestamp}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/136?query=/iot3/example/semanticMashupInstance?ResExpirationTimestamp={{ResExpirationTimestamp}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.ResExpirationTimestamp);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e4157135", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?EventCategory={{EventCategory}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/137?query=/iot3/example/semanticMashupInstance?EventCategory={{EventCategory}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"EventCategory\",currentData.EventCategory);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e4158136", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?OperationalExecutionTime={{OperationalExecutionTime}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/138?query=/iot3/example/semanticMashupInstance?OperationalExecutionTime={{OperationalExecutionTime}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.OperationalExecutionTime);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e4159137", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?ResponseType={{ResponseType}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/139?query=/iot3/example/semanticMashupInstance?ResponseType={{ResponseType}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResponseType\",currentData.ResponseType);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e41510138", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?ResultPersistence={{ResultPersistence}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/140?query=/iot3/example/semanticMashupInstance?ResultPersistence={{ResultPersistence}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.ResultPersistence);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e41511139", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?ResultContent={{ResultContent}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/141?query=/iot3/example/semanticMashupInstance?ResultContent={{ResultContent}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResultContent\",currentData.ResultContent);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e41512140", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?DeliveryAggregation={{DeliveryAggregation}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/142?query=/iot3/example/semanticMashupInstance?DeliveryAggregation={{DeliveryAggregation}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.DeliveryAggregation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e41513141", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?GroupRequestIdentifier={{GroupRequestIdentifier}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/143?query=/iot3/example/semanticMashupInstance?GroupRequestIdentifier={{GroupRequestIdentifier}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.GroupRequestIdentifier);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e41514142", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?FilterCriteria={{FilterCriteria}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/144?query=/iot3/example/semanticMashupInstance?FilterCriteria={{FilterCriteria}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.FilterCriteria);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e41515143", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?DesiredIdentifierResultType={{DesiredIdentifierResultType}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/145?query=/iot3/example/semanticMashupInstance?DesiredIdentifierResultType={{DesiredIdentifierResultType}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.DesiredIdentifierResultType);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e41516144", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?TokenRequestIndicator={{TokenRequestIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/146?query=/iot3/example/semanticMashupInstance?TokenRequestIndicator={{TokenRequestIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.TokenRequestIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e41517145", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?Tokens={{Tokens}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/147?query=/iot3/example/semanticMashupInstance?Tokens={{Tokens}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"Tokens\",currentData.Tokens);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e41518146", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?TokenIDs={{TokenIDs}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/148?query=/iot3/example/semanticMashupInstance?TokenIDs={{TokenIDs}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"TokenIDs\",currentData.TokenIDs);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e41519147", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?RoleIDs={{RoleIDs}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/149?query=/iot3/example/semanticMashupInstance?RoleIDs={{RoleIDs}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"RoleIDs\",currentData.RoleIDs);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e41520148", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?LocalTokenIDs={{LocalTokenIDs}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/150?query=/iot3/example/semanticMashupInstance?LocalTokenIDs={{LocalTokenIDs}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.LocalTokenIDs);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e41521149", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?ReleaseVersionIndicator={{ReleaseVersionIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/151?query=/iot3/example/semanticMashupInstance?ReleaseVersionIndicator={{ReleaseVersionIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.ReleaseVersionIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e41522150", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?VendorInformation={{VendorInformation}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/152?query=/iot3/example/semanticMashupInstance?VendorInformation={{VendorInformation}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"VendorInformation\",currentData.VendorInformation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e41523151", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?GroupRequestTargetMembers={{GroupRequestTargetMembers}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/153?query=/iot3/example/semanticMashupInstance?GroupRequestTargetMembers={{GroupRequestTargetMembers}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.GroupRequestTargetMembers);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e41524152", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/154?query=/iot3/example/semanticMashupInstance?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.AuthorizationSignatureIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e41525153", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?AuthorizationSignature={{AuthorizationSignature}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/155?query=/iot3/example/semanticMashupInstance?AuthorizationSignature={{AuthorizationSignature}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.AuthorizationSignature);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e41526154", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/156?query=/iot3/example/semanticMashupInstance?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.AuthorizationRelationshipIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e41527155", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?SemanticQueryIndicator={{SemanticQueryIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/157?query=/iot3/example/semanticMashupInstance?SemanticQueryIndicator={{SemanticQueryIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.SemanticQueryIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e41528156", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupInstance resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/158?query=/iot3/example/semanticMashupInstance',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bfcd48e3-a791-4106-958a-505d8e88e41529157", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontologyRepository resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?ToAddress={{ToAddress}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/159?query=/iot3/example/ontologyRepository?ToAddress={{ToAddress}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ToAddress\",currentData.ToAddress);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d20158", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontologyRepository resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?FromId={{FromId}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/160?query=/iot3/example/ontologyRepository?FromId={{FromId}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"FromId\",currentData.FromId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d21159", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontologyRepository resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?Operation={{Operation}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/161?query=/iot3/example/ontologyRepository?Operation={{Operation}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"Operation\",currentData.Operation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d22160", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontologyRepository resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?RequestId={{RequestId}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/162?query=/iot3/example/ontologyRepository?RequestId={{RequestId}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"RequestId\",currentData.RequestId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d23161", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontologyRepository resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?ResourceType={{ResourceType}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/163?query=/iot3/example/ontologyRepository?ResourceType={{ResourceType}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResourceType\",currentData.ResourceType);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d24162", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontologyRepository resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?OriginatingTimestamp={{OriginatingTimestamp}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/164?query=/iot3/example/ontologyRepository?OriginatingTimestamp={{OriginatingTimestamp}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.OriginatingTimestamp);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d25163", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontologyRepository resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?ReqExpirationTimestamp={{ReqExpirationTimestamp}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/165?query=/iot3/example/ontologyRepository?ReqExpirationTimestamp={{ReqExpirationTimestamp}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.ReqExpirationTimestamp);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d26164", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontologyRepository resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?ResExpirationTimestamp={{ResExpirationTimestamp}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/166?query=/iot3/example/ontologyRepository?ResExpirationTimestamp={{ResExpirationTimestamp}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.ResExpirationTimestamp);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d27165", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontologyRepository resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?EventCategory={{EventCategory}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/167?query=/iot3/example/ontologyRepository?EventCategory={{EventCategory}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"EventCategory\",currentData.EventCategory);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d28166", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontologyRepository resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?OperationalExecutionTime={{OperationalExecutionTime}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/168?query=/iot3/example/ontologyRepository?OperationalExecutionTime={{OperationalExecutionTime}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.OperationalExecutionTime);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d29167", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontologyRepository resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?ResponseType={{ResponseType}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/169?query=/iot3/example/ontologyRepository?ResponseType={{ResponseType}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResponseType\",currentData.ResponseType);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d210168", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontologyRepository resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?ResultPersistence={{ResultPersistence}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/170?query=/iot3/example/ontologyRepository?ResultPersistence={{ResultPersistence}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.ResultPersistence);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d211169", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontologyRepository resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?ResultContent={{ResultContent}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/171?query=/iot3/example/ontologyRepository?ResultContent={{ResultContent}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResultContent\",currentData.ResultContent);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d212170", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontologyRepository resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?DeliveryAggregation={{DeliveryAggregation}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/172?query=/iot3/example/ontologyRepository?DeliveryAggregation={{DeliveryAggregation}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.DeliveryAggregation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d213171", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontologyRepository resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?GroupRequestIdentifier={{GroupRequestIdentifier}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/173?query=/iot3/example/ontologyRepository?GroupRequestIdentifier={{GroupRequestIdentifier}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.GroupRequestIdentifier);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d214172", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontologyRepository resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?FilterCriteria={{FilterCriteria}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/174?query=/iot3/example/ontologyRepository?FilterCriteria={{FilterCriteria}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.FilterCriteria);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d215173", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontologyRepository resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?DesiredIdentifierResultType={{DesiredIdentifierResultType}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/175?query=/iot3/example/ontologyRepository?DesiredIdentifierResultType={{DesiredIdentifierResultType}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.DesiredIdentifierResultType);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d216174", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontologyRepository resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?TokenRequestIndicator={{TokenRequestIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/176?query=/iot3/example/ontologyRepository?TokenRequestIndicator={{TokenRequestIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.TokenRequestIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d217175", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontologyRepository resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?Tokens={{Tokens}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/177?query=/iot3/example/ontologyRepository?Tokens={{Tokens}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"Tokens\",currentData.Tokens);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d218176", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontologyRepository resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?TokenIDs={{TokenIDs}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/178?query=/iot3/example/ontologyRepository?TokenIDs={{TokenIDs}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"TokenIDs\",currentData.TokenIDs);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d219177", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontologyRepository resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?RoleIDs={{RoleIDs}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/179?query=/iot3/example/ontologyRepository?RoleIDs={{RoleIDs}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"RoleIDs\",currentData.RoleIDs);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d220178", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontologyRepository resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?LocalTokenIDs={{LocalTokenIDs}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/180?query=/iot3/example/ontologyRepository?LocalTokenIDs={{LocalTokenIDs}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.LocalTokenIDs);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d221179", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontologyRepository resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?ReleaseVersionIndicator={{ReleaseVersionIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/181?query=/iot3/example/ontologyRepository?ReleaseVersionIndicator={{ReleaseVersionIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.ReleaseVersionIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d222180", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontologyRepository resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?VendorInformation={{VendorInformation}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/182?query=/iot3/example/ontologyRepository?VendorInformation={{VendorInformation}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"VendorInformation\",currentData.VendorInformation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d223181", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontologyRepository resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?GroupRequestTargetMembers={{GroupRequestTargetMembers}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/183?query=/iot3/example/ontologyRepository?GroupRequestTargetMembers={{GroupRequestTargetMembers}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.GroupRequestTargetMembers);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d224182", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontologyRepository resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/184?query=/iot3/example/ontologyRepository?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.AuthorizationSignatureIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d225183", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontologyRepository resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?AuthorizationSignature={{AuthorizationSignature}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/185?query=/iot3/example/ontologyRepository?AuthorizationSignature={{AuthorizationSignature}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.AuthorizationSignature);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d226184", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontologyRepository resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/186?query=/iot3/example/ontologyRepository?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.AuthorizationRelationshipIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d227185", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontologyRepository resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?SemanticQueryIndicator={{SemanticQueryIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/187?query=/iot3/example/ontologyRepository?SemanticQueryIndicator={{SemanticQueryIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.SemanticQueryIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d228186", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of ontologyRepository resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/188?query=/iot3/example/ontologyRepository',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "bed42e72-2382-4873-8792-9f8ed63613d229187", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?ToAddress={{ToAddress}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/189?query=/iot3/example/semanticMashupJobProfile?ToAddress={{ToAddress}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ToAddress\",currentData.ToAddress);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f710188", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?FromId={{FromId}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/190?query=/iot3/example/semanticMashupJobProfile?FromId={{FromId}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"FromId\",currentData.FromId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f711189", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?Operation={{Operation}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/191?query=/iot3/example/semanticMashupJobProfile?Operation={{Operation}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"Operation\",currentData.Operation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f712190", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?RequestId={{RequestId}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/192?query=/iot3/example/semanticMashupJobProfile?RequestId={{RequestId}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"RequestId\",currentData.RequestId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f713191", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?ResourceType={{ResourceType}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/193?query=/iot3/example/semanticMashupJobProfile?ResourceType={{ResourceType}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResourceType\",currentData.ResourceType);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f714192", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?OriginatingTimestamp={{OriginatingTimestamp}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/194?query=/iot3/example/semanticMashupJobProfile?OriginatingTimestamp={{OriginatingTimestamp}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.OriginatingTimestamp);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f715193", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?ReqExpirationTimestamp={{ReqExpirationTimestamp}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/195?query=/iot3/example/semanticMashupJobProfile?ReqExpirationTimestamp={{ReqExpirationTimestamp}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.ReqExpirationTimestamp);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f716194", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?ResExpirationTimestamp={{ResExpirationTimestamp}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/196?query=/iot3/example/semanticMashupJobProfile?ResExpirationTimestamp={{ResExpirationTimestamp}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.ResExpirationTimestamp);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f717195", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?EventCategory={{EventCategory}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/197?query=/iot3/example/semanticMashupJobProfile?EventCategory={{EventCategory}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"EventCategory\",currentData.EventCategory);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f718196", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?OperationalExecutionTime={{OperationalExecutionTime}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/198?query=/iot3/example/semanticMashupJobProfile?OperationalExecutionTime={{OperationalExecutionTime}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.OperationalExecutionTime);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f719197", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?ResponseType={{ResponseType}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/199?query=/iot3/example/semanticMashupJobProfile?ResponseType={{ResponseType}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResponseType\",currentData.ResponseType);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f7110198", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?ResultPersistence={{ResultPersistence}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/200?query=/iot3/example/semanticMashupJobProfile?ResultPersistence={{ResultPersistence}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.ResultPersistence);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f7111199", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?ResultContent={{ResultContent}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/201?query=/iot3/example/semanticMashupJobProfile?ResultContent={{ResultContent}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResultContent\",currentData.ResultContent);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f7112200", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?DeliveryAggregation={{DeliveryAggregation}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/202?query=/iot3/example/semanticMashupJobProfile?DeliveryAggregation={{DeliveryAggregation}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.DeliveryAggregation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f7113201", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?GroupRequestIdentifier={{GroupRequestIdentifier}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/203?query=/iot3/example/semanticMashupJobProfile?GroupRequestIdentifier={{GroupRequestIdentifier}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.GroupRequestIdentifier);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f7114202", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?FilterCriteria={{FilterCriteria}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/204?query=/iot3/example/semanticMashupJobProfile?FilterCriteria={{FilterCriteria}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.FilterCriteria);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f7115203", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?DesiredIdentifierResultType={{DesiredIdentifierResultType}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/205?query=/iot3/example/semanticMashupJobProfile?DesiredIdentifierResultType={{DesiredIdentifierResultType}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.DesiredIdentifierResultType);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f7116204", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?TokenRequestIndicator={{TokenRequestIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/206?query=/iot3/example/semanticMashupJobProfile?TokenRequestIndicator={{TokenRequestIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.TokenRequestIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f7117205", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?Tokens={{Tokens}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/207?query=/iot3/example/semanticMashupJobProfile?Tokens={{Tokens}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"Tokens\",currentData.Tokens);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f7118206", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?TokenIDs={{TokenIDs}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/208?query=/iot3/example/semanticMashupJobProfile?TokenIDs={{TokenIDs}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"TokenIDs\",currentData.TokenIDs);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f7119207", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?RoleIDs={{RoleIDs}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/209?query=/iot3/example/semanticMashupJobProfile?RoleIDs={{RoleIDs}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"RoleIDs\",currentData.RoleIDs);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f7120208", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?LocalTokenIDs={{LocalTokenIDs}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/210?query=/iot3/example/semanticMashupJobProfile?LocalTokenIDs={{LocalTokenIDs}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.LocalTokenIDs);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f7121209", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?ReleaseVersionIndicator={{ReleaseVersionIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/211?query=/iot3/example/semanticMashupJobProfile?ReleaseVersionIndicator={{ReleaseVersionIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.ReleaseVersionIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f7122210", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?VendorInformation={{VendorInformation}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/212?query=/iot3/example/semanticMashupJobProfile?VendorInformation={{VendorInformation}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"VendorInformation\",currentData.VendorInformation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f7123211", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?GroupRequestTargetMembers={{GroupRequestTargetMembers}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/213?query=/iot3/example/semanticMashupJobProfile?GroupRequestTargetMembers={{GroupRequestTargetMembers}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.GroupRequestTargetMembers);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f7124212", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/214?query=/iot3/example/semanticMashupJobProfile?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.AuthorizationSignatureIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f7125213", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?AuthorizationSignature={{AuthorizationSignature}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/215?query=/iot3/example/semanticMashupJobProfile?AuthorizationSignature={{AuthorizationSignature}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.AuthorizationSignature);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f7126214", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/216?query=/iot3/example/semanticMashupJobProfile?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.AuthorizationRelationshipIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f7127215", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?SemanticQueryIndicator={{SemanticQueryIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/217?query=/iot3/example/semanticMashupJobProfile?SemanticQueryIndicator={{SemanticQueryIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.SemanticQueryIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f7128216", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticMashupJobProfile resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/218?query=/iot3/example/semanticMashupJobProfile',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "6abdddbc-b380-4ef6-94c3-eea0462c5f7129217", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticDescriptor resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?ToAddress={{ToAddress}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/219?query=/iot3/example/semanticDescriptor?ToAddress={{ToAddress}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ToAddress\",currentData.ToAddress);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a80218", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticDescriptor resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?FromId={{FromId}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/220?query=/iot3/example/semanticDescriptor?FromId={{FromId}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"FromId\",currentData.FromId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a81219", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticDescriptor resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?Operation={{Operation}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/221?query=/iot3/example/semanticDescriptor?Operation={{Operation}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"Operation\",currentData.Operation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a82220", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticDescriptor resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?RequestId={{RequestId}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/222?query=/iot3/example/semanticDescriptor?RequestId={{RequestId}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"RequestId\",currentData.RequestId);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a83221", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticDescriptor resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?ResourceType={{ResourceType}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/223?query=/iot3/example/semanticDescriptor?ResourceType={{ResourceType}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResourceType\",currentData.ResourceType);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a84222", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticDescriptor resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?OriginatingTimestamp={{OriginatingTimestamp}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/224?query=/iot3/example/semanticDescriptor?OriginatingTimestamp={{OriginatingTimestamp}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.OriginatingTimestamp);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a85223", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticDescriptor resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?ReqExpirationTimestamp={{ReqExpirationTimestamp}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/225?query=/iot3/example/semanticDescriptor?ReqExpirationTimestamp={{ReqExpirationTimestamp}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.ReqExpirationTimestamp);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a86224", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticDescriptor resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?ResExpirationTimestamp={{ResExpirationTimestamp}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/226?query=/iot3/example/semanticDescriptor?ResExpirationTimestamp={{ResExpirationTimestamp}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.ResExpirationTimestamp);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a87225", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticDescriptor resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?EventCategory={{EventCategory}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/227?query=/iot3/example/semanticDescriptor?EventCategory={{EventCategory}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"EventCategory\",currentData.EventCategory);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a88226", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticDescriptor resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?OperationalExecutionTime={{OperationalExecutionTime}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/228?query=/iot3/example/semanticDescriptor?OperationalExecutionTime={{OperationalExecutionTime}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.OperationalExecutionTime);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a89227", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticDescriptor resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?ResponseType={{ResponseType}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/229?query=/iot3/example/semanticDescriptor?ResponseType={{ResponseType}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResponseType\",currentData.ResponseType);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a810228", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticDescriptor resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?ResultPersistence={{ResultPersistence}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/230?query=/iot3/example/semanticDescriptor?ResultPersistence={{ResultPersistence}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.ResultPersistence);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a811229", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticDescriptor resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?ResultContent={{ResultContent}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/231?query=/iot3/example/semanticDescriptor?ResultContent={{ResultContent}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ResultContent\",currentData.ResultContent);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a812230", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticDescriptor resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?DeliveryAggregation={{DeliveryAggregation}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/232?query=/iot3/example/semanticDescriptor?DeliveryAggregation={{DeliveryAggregation}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.DeliveryAggregation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a813231", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticDescriptor resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?GroupRequestIdentifier={{GroupRequestIdentifier}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/233?query=/iot3/example/semanticDescriptor?GroupRequestIdentifier={{GroupRequestIdentifier}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.GroupRequestIdentifier);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a814232", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticDescriptor resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?FilterCriteria={{FilterCriteria}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/234?query=/iot3/example/semanticDescriptor?FilterCriteria={{FilterCriteria}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.FilterCriteria);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a815233", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticDescriptor resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?DesiredIdentifierResultType={{DesiredIdentifierResultType}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/235?query=/iot3/example/semanticDescriptor?DesiredIdentifierResultType={{DesiredIdentifierResultType}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.DesiredIdentifierResultType);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a816234", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticDescriptor resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?TokenRequestIndicator={{TokenRequestIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/236?query=/iot3/example/semanticDescriptor?TokenRequestIndicator={{TokenRequestIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.TokenRequestIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a817235", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticDescriptor resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?Tokens={{Tokens}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/237?query=/iot3/example/semanticDescriptor?Tokens={{Tokens}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"Tokens\",currentData.Tokens);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a818236", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticDescriptor resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?TokenIDs={{TokenIDs}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/238?query=/iot3/example/semanticDescriptor?TokenIDs={{TokenIDs}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"TokenIDs\",currentData.TokenIDs);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a819237", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticDescriptor resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?RoleIDs={{RoleIDs}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/239?query=/iot3/example/semanticDescriptor?RoleIDs={{RoleIDs}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"RoleIDs\",currentData.RoleIDs);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a820238", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticDescriptor resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?LocalTokenIDs={{LocalTokenIDs}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/240?query=/iot3/example/semanticDescriptor?LocalTokenIDs={{LocalTokenIDs}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.LocalTokenIDs);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a821239", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticDescriptor resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?ReleaseVersionIndicator={{ReleaseVersionIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/241?query=/iot3/example/semanticDescriptor?ReleaseVersionIndicator={{ReleaseVersionIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.ReleaseVersionIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a822240", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticDescriptor resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?VendorInformation={{VendorInformation}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/242?query=/iot3/example/semanticDescriptor?VendorInformation={{VendorInformation}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"VendorInformation\",currentData.VendorInformation);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a823241", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticDescriptor resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?GroupRequestTargetMembers={{GroupRequestTargetMembers}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/243?query=/iot3/example/semanticDescriptor?GroupRequestTargetMembers={{GroupRequestTargetMembers}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.GroupRequestTargetMembers);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a824242", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticDescriptor resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/244?query=/iot3/example/semanticDescriptor?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.AuthorizationSignatureIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a825243", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticDescriptor resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?AuthorizationSignature={{AuthorizationSignature}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/245?query=/iot3/example/semanticDescriptor?AuthorizationSignature={{AuthorizationSignature}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.AuthorizationSignature);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a826244", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticDescriptor resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/246?query=/iot3/example/semanticDescriptor?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.AuthorizationRelationshipIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a827245", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticDescriptor resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?SemanticQueryIndicator={{SemanticQueryIndicator}}", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/247?query=/iot3/example/semanticDescriptor?SemanticQueryIndicator={{SemanticQueryIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.SemanticQueryIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a828246", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "description": "This method retrieves information about a list of semanticDescriptor resources", 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor", 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/248?query=/iot3/example/semanticDescriptor',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "GET", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "pathVariables": {}, 
            "preRequestScript": "", 
            "data": [], 
            "id": "8f006274-a68f-44bb-8913-57004527b0a829247", 
            "name": "TC_200"
        }, 
        {
            "responses": [], 
            "dataMode": "raw", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology", 
            "name": "TC_201", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ontologyInfo\": {\n        \"ResponseType\": \"{{ResponseType}}\",\n        \"GroupRequestIdentifier\": \"{{GroupRequestIdentifier}}\",\n        \"ToAddress\": \"{{ToAddress}}\",\n        \"OriginatingTimestamp\": \"{{OriginatingTimestamp}}\",\n        \"TokenRequestIndicator\": \"{{TokenRequestIndicator}}\",\n        \"GroupRequestTargetMembers\": \"{{GroupRequestTargetMembers}}\",\n        \"ResultContent\": \"{{ResultContent}}\",\n        \"SemanticQueryIndicator\": \"{{SemanticQueryIndicator}}\",\n        \"AuthorizationSignature\": \"{{AuthorizationSignature}}\",\n        \"OperationalExecutionTime\": \"{{OperationalExecutionTime}}\",\n        \"FromId\": \"{{FromId}}\",\n        \"RequestId\": \"{{RequestId}}\",\n        \"ReqExpirationTimestamp\": \"{{ReqExpirationTimestamp}}\",\n        \"EventCategory\": \"{{EventCategory}}\",\n        \"TokenIDs\": \"{{TokenIDs}}\",\n        \"RoleIDs\": \"{{RoleIDs}}\",\n        \"Tokens\": \"{{Tokens}}\",\n        \"resourceType\": \"{{resourceType}}\",\n        \"AuthorizationSignatureIndicator\": \"{{AuthorizationSignatureIndicator}}\",\n        \"LocalTokenIDs\": \"{{LocalTokenIDs}}\",\n        \"DeliveryAggregation\": \"{{DeliveryAggregation}}\",\n        \"content\": {\n            \"description\": \"{{description}}\",\n            \"creator\": \"{{creator}}\",\n            \"accessControlPolicyIDs\": \"{{accessControlPolicyIDs}}\",\n            \"labels\": \"{{labels}}\",\n            \"semanticOpExec\": \"{{semanticOpExec}}\",\n            \"announceTo\": \"{{announceTo}}\",\n            \"dynamicAuthorizationConsultationIDs\": \"{{dynamicAuthorizationConsultationIDs}}\",\n            \"resourceName\": \"{{resourceName}}\",\n            \"ontologyContent\": \"{{ontologyContent}}\",\n            \"parentID\": \"{{parentID}}\",\n            \"announcedAttribute\": \"{{announcedAttribute}}\",\n            \"creationTime\": \"{{creationTime}}\",\n            \"expirationTime\": \"{{expirationTime}}\",\n            \"ontologyFormat\": \"{{ontologyFormat}}\",\n            \"lastModifiedTime\": \"{{lastModifiedTime}}\"\n        },\n        \"ReleaseVersionIndicator\": \"{{ReleaseVersionIndicator}}\",\n        \"DesiredIdentifierResultType\": \"{{DesiredIdentifierResultType}}\",\n        \"ResExpirationTimestamp\": \"{{ResExpirationTimestamp}}\",\n        \"VendorInformation\": \"{{VendorInformation}}\",\n        \"Operation\": \"{{Operation}}\",\n        \"ResultPersistence\": \"{{ResultPersistence}}\",\n        \"AuthorizationRelationshipIndicator\": \"{{AuthorizationRelationshipIndicator}}\",\n        \"FilterCriteria\": \"{{FilterCriteria}}\"\n    }\n}", 
            "time": 1560229469603, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(201)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/iot3/example/ontology&header=ontologyInfo',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData[\"ontologyInfo.GroupRequestIdentifier\"]);", 
                            "    pm.environment.set(\"ToAddress\",currentData[\"ontologyInfo.ToAddress\"]);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData[\"ontologyInfo.OriginatingTimestamp\"]);", 
                            "    pm.environment.set(\"ResultContent\",currentData[\"ontologyInfo.ResultContent\"]);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData[\"ontologyInfo.SemanticQueryIndicator\"]);", 
                            "    pm.environment.set(\"EventCategory\",currentData[\"ontologyInfo.EventCategory\"]);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData[\"ontologyInfo.OperationalExecutionTime\"]);", 
                            "    pm.environment.set(\"description\",currentData[\"ontologyInfo.content.description\"]);", 
                            "    pm.environment.set(\"creator\",currentData[\"ontologyInfo.content.creator\"]);", 
                            "    pm.environment.set(\"accessControlPolicyIDs\",currentData[\"ontologyInfo.content.accessControlPolicyIDs\"]);", 
                            "    pm.environment.set(\"labels\",currentData[\"ontologyInfo.content.labels\"]);", 
                            "    pm.environment.set(\"semanticOpExec\",currentData[\"ontologyInfo.content.semanticOpExec\"]);", 
                            "    pm.environment.set(\"creationTime\",currentData[\"ontologyInfo.content.creationTime\"]);", 
                            "    pm.environment.set(\"announceTo\",currentData[\"ontologyInfo.content.announceTo\"]);", 
                            "    pm.environment.set(\"dynamicAuthorizationConsultationIDs\",currentData[\"ontologyInfo.content.dynamicAuthorizationConsultationIDs\"]);", 
                            "    pm.environment.set(\"ontologyContent\",currentData[\"ontologyInfo.content.ontologyContent\"]);", 
                            "    pm.environment.set(\"parentID\",currentData[\"ontologyInfo.content.parentID\"]);", 
                            "    pm.environment.set(\"announcedAttribute\",currentData[\"ontologyInfo.content.announcedAttribute\"]);", 
                            "    pm.environment.set(\"resourceName\",currentData[\"ontologyInfo.content.resourceName\"]);", 
                            "    pm.environment.set(\"expirationTime\",currentData[\"ontologyInfo.content.expirationTime\"]);", 
                            "    pm.environment.set(\"ontologyFormat\",currentData[\"ontologyInfo.content.ontologyFormat\"]);", 
                            "    pm.environment.set(\"lastModifiedTime\",currentData[\"ontologyInfo.content.lastModifiedTime\"]);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData[\"ontologyInfo.AuthorizationSignatureIndicator\"]);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData[\"ontologyInfo.LocalTokenIDs\"]);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData[\"ontologyInfo.AuthorizationSignature\"]);", 
                            "    pm.environment.set(\"Tokens\",currentData[\"ontologyInfo.Tokens\"]);", 
                            "    pm.environment.set(\"VendorInformation\",currentData[\"ontologyInfo.VendorInformation\"]);", 
                            "    pm.environment.set(\"ResponseType\",currentData[\"ontologyInfo.ResponseType\"]);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData[\"ontologyInfo.TokenRequestIndicator\"]);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData[\"ontologyInfo.GroupRequestTargetMembers\"]);", 
                            "    pm.environment.set(\"FromId\",currentData[\"ontologyInfo.FromId\"]);", 
                            "    pm.environment.set(\"RequestId\",currentData[\"ontologyInfo.RequestId\"]);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData[\"ontologyInfo.ReqExpirationTimestamp\"]);", 
                            "    pm.environment.set(\"TokenIDs\",currentData[\"ontologyInfo.TokenIDs\"]);", 
                            "    pm.environment.set(\"resourceType\",currentData[\"ontologyInfo.resourceType\"]);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData[\"ontologyInfo.DeliveryAggregation\"]);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData[\"ontologyInfo.ReleaseVersionIndicator\"]);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData[\"ontologyInfo.DesiredIdentifierResultType\"]);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData[\"ontologyInfo.ResExpirationTimestamp\"]);", 
                            "    pm.environment.set(\"RoleIDs\",currentData[\"ontologyInfo.RoleIDs\"]);", 
                            "    pm.environment.set(\"Operation\",currentData[\"ontologyInfo.Operation\"]);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData[\"ontologyInfo.ResultPersistence\"]);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData[\"ontologyInfo.AuthorizationRelationshipIndicator\"]);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData[\"ontologyInfo.FilterCriteria\"]);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "id": "f6d6bb03-bbba-4490-b43c-a6b55748f764248", 
            "description": "This method is used to create a ontology resource."
        }, 
        {
            "responses": [], 
            "dataMode": "raw", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance", 
            "name": "TC_201", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"semanticMashupInstanceInfo\": {\n        \"ResponseType\": \"{{ResponseType}}\",\n        \"GroupRequestIdentifier\": \"{{GroupRequestIdentifier}}\",\n        \"ToAddress\": \"{{ToAddress}}\",\n        \"OriginatingTimestamp\": \"{{OriginatingTimestamp}}\",\n        \"TokenRequestIndicator\": \"{{TokenRequestIndicator}}\",\n        \"GroupRequestTargetMembers\": \"{{GroupRequestTargetMembers}}\",\n        \"ResultContent\": \"{{ResultContent}}\",\n        \"SemanticQueryIndicator\": \"{{SemanticQueryIndicator}}\",\n        \"AuthorizationSignature\": \"{{AuthorizationSignature}}\",\n        \"OperationalExecutionTime\": \"{{OperationalExecutionTime}}\",\n        \"FromId\": \"{{FromId}}\",\n        \"RequestId\": \"{{RequestId}}\",\n        \"ReqExpirationTimestamp\": \"{{ReqExpirationTimestamp}}\",\n        \"EventCategory\": \"{{EventCategory}}\",\n        \"TokenIDs\": \"{{TokenIDs}}\",\n        \"RoleIDs\": \"{{RoleIDs}}\",\n        \"Tokens\": \"{{Tokens}}\",\n        \"resourceType\": \"{{resourceType}}\",\n        \"AuthorizationSignatureIndicator\": \"{{AuthorizationSignatureIndicator}}\",\n        \"LocalTokenIDs\": \"{{LocalTokenIDs}}\",\n        \"DeliveryAggregation\": \"{{DeliveryAggregation}}\",\n        \"content\": {\n            \"memberStoreType\": \"{{memberStoreType}}\",\n            \"creator\": \"{{creator}}\",\n            \"accessControlPolicyIDs\": \"{{accessControlPolicyIDs}}\",\n            \"labels\": \"{{labels}}\",\n            \"mashupMember\": \"{{mashupMember}}\",\n            \"smjpInputParameter\": \"{{smjpInputParameter}}\",\n            \"resultGenType\": \"{{resultGenType}}\",\n            \"parentID\": \"{{parentID}}\",\n            \"resourceName\": \"{{resourceName}}\",\n            \"lastModifiedTime\": \"{{lastModifiedTime}}\",\n            \"resourceType\": \"{{resourceType}}\",\n            \"resourceID\": \"{{resourceID}}\",\n            \"announcedAttribute\": \"{{announcedAttribute}}\",\n            \"creationTime\": \"{{creationTime}}\",\n            \"periodForResultGen\": \"{{periodForResultGen}}\",\n            \"announceTo\": \"{{announceTo}}\",\n            \"dynamicAuthorizationConsultationIDs\": \"{{dynamicAuthorizationConsultationIDs}}\",\n            \"expirationTime\": \"{{expirationTime}}\",\n            \"smjpID\": \"{{smjpID}}\"\n        },\n        \"ReleaseVersionIndicator\": \"{{ReleaseVersionIndicator}}\",\n        \"DesiredIdentifierResultType\": \"{{DesiredIdentifierResultType}}\",\n        \"ResExpirationTimestamp\": \"{{ResExpirationTimestamp}}\",\n        \"VendorInformation\": \"{{VendorInformation}}\",\n        \"Operation\": \"{{Operation}}\",\n        \"ResultPersistence\": \"{{ResultPersistence}}\",\n        \"AuthorizationRelationshipIndicator\": \"{{AuthorizationRelationshipIndicator}}\",\n        \"FilterCriteria\": \"{{FilterCriteria}}\"\n    }\n}", 
            "time": 1560229469604, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(201)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/iot3/example/semanticMashupInstance&header=semanticMashupInstanceInfo',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData[\"semanticMashupInstanceInfo.GroupRequestIdentifier\"]);", 
                            "    pm.environment.set(\"ToAddress\",currentData[\"semanticMashupInstanceInfo.ToAddress\"]);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData[\"semanticMashupInstanceInfo.OriginatingTimestamp\"]);", 
                            "    pm.environment.set(\"ResultContent\",currentData[\"semanticMashupInstanceInfo.ResultContent\"]);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData[\"semanticMashupInstanceInfo.SemanticQueryIndicator\"]);", 
                            "    pm.environment.set(\"EventCategory\",currentData[\"semanticMashupInstanceInfo.EventCategory\"]);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData[\"semanticMashupInstanceInfo.OperationalExecutionTime\"]);", 
                            "    pm.environment.set(\"expirationTime\",currentData[\"semanticMashupInstanceInfo.content.expirationTime\"]);", 
                            "    pm.environment.set(\"resultGenType\",currentData[\"semanticMashupInstanceInfo.content.resultGenType\"]);", 
                            "    pm.environment.set(\"creator\",currentData[\"semanticMashupInstanceInfo.content.creator\"]);", 
                            "    pm.environment.set(\"resourceType\",currentData[\"semanticMashupInstanceInfo.content.resourceType\"]);", 
                            "    pm.environment.set(\"accessControlPolicyIDs\",currentData[\"semanticMashupInstanceInfo.content.accessControlPolicyIDs\"]);", 
                            "    pm.environment.set(\"labels\",currentData[\"semanticMashupInstanceInfo.content.labels\"]);", 
                            "    pm.environment.set(\"creationTime\",currentData[\"semanticMashupInstanceInfo.content.creationTime\"]);", 
                            "    pm.environment.set(\"smjpInputParameter\",currentData[\"semanticMashupInstanceInfo.content.smjpInputParameter\"]);", 
                            "    pm.environment.set(\"mashupMember\",currentData[\"semanticMashupInstanceInfo.content.mashupMember\"]);", 
                            "    pm.environment.set(\"periodForResultGen\",currentData[\"semanticMashupInstanceInfo.content.periodForResultGen\"]);", 
                            "    pm.environment.set(\"announceTo\",currentData[\"semanticMashupInstanceInfo.content.announceTo\"]);", 
                            "    pm.environment.set(\"dynamicAuthorizationConsultationIDs\",currentData[\"semanticMashupInstanceInfo.content.dynamicAuthorizationConsultationIDs\"]);", 
                            "    pm.environment.set(\"memberStoreType\",currentData[\"semanticMashupInstanceInfo.content.memberStoreType\"]);", 
                            "    pm.environment.set(\"parentID\",currentData[\"semanticMashupInstanceInfo.content.parentID\"]);", 
                            "    pm.environment.set(\"announcedAttribute\",currentData[\"semanticMashupInstanceInfo.content.announcedAttribute\"]);", 
                            "    pm.environment.set(\"resourceName\",currentData[\"semanticMashupInstanceInfo.content.resourceName\"]);", 
                            "    pm.environment.set(\"lastModifiedTime\",currentData[\"semanticMashupInstanceInfo.content.lastModifiedTime\"]);", 
                            "    pm.environment.set(\"resourceID\",currentData[\"semanticMashupInstanceInfo.content.resourceID\"]);", 
                            "    pm.environment.set(\"smjpID\",currentData[\"semanticMashupInstanceInfo.content.smjpID\"]);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData[\"semanticMashupInstanceInfo.AuthorizationSignatureIndicator\"]);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData[\"semanticMashupInstanceInfo.LocalTokenIDs\"]);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData[\"semanticMashupInstanceInfo.AuthorizationSignature\"]);", 
                            "    pm.environment.set(\"Tokens\",currentData[\"semanticMashupInstanceInfo.Tokens\"]);", 
                            "    pm.environment.set(\"VendorInformation\",currentData[\"semanticMashupInstanceInfo.VendorInformation\"]);", 
                            "    pm.environment.set(\"ResponseType\",currentData[\"semanticMashupInstanceInfo.ResponseType\"]);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData[\"semanticMashupInstanceInfo.TokenRequestIndicator\"]);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData[\"semanticMashupInstanceInfo.GroupRequestTargetMembers\"]);", 
                            "    pm.environment.set(\"FromId\",currentData[\"semanticMashupInstanceInfo.FromId\"]);", 
                            "    pm.environment.set(\"RequestId\",currentData[\"semanticMashupInstanceInfo.RequestId\"]);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData[\"semanticMashupInstanceInfo.ReqExpirationTimestamp\"]);", 
                            "    pm.environment.set(\"TokenIDs\",currentData[\"semanticMashupInstanceInfo.TokenIDs\"]);", 
                            "    pm.environment.set(\"resourceType\",currentData[\"semanticMashupInstanceInfo.resourceType\"]);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData[\"semanticMashupInstanceInfo.DeliveryAggregation\"]);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData[\"semanticMashupInstanceInfo.ReleaseVersionIndicator\"]);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData[\"semanticMashupInstanceInfo.DesiredIdentifierResultType\"]);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData[\"semanticMashupInstanceInfo.ResExpirationTimestamp\"]);", 
                            "    pm.environment.set(\"RoleIDs\",currentData[\"semanticMashupInstanceInfo.RoleIDs\"]);", 
                            "    pm.environment.set(\"Operation\",currentData[\"semanticMashupInstanceInfo.Operation\"]);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData[\"semanticMashupInstanceInfo.ResultPersistence\"]);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData[\"semanticMashupInstanceInfo.AuthorizationRelationshipIndicator\"]);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData[\"semanticMashupInstanceInfo.FilterCriteria\"]);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "id": "67493b98-328c-470b-9b3e-ac17e818204e249", 
            "description": "This method is used to create a semanticMashupInstance resource."
        }, 
        {
            "responses": [], 
            "dataMode": "raw", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository", 
            "name": "TC_201", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ontologyRepositoryInfo\": {\n        \"ResponseType\": \"{{ResponseType}}\",\n        \"GroupRequestIdentifier\": \"{{GroupRequestIdentifier}}\",\n        \"ToAddress\": \"{{ToAddress}}\",\n        \"OriginatingTimestamp\": \"{{OriginatingTimestamp}}\",\n        \"TokenRequestIndicator\": \"{{TokenRequestIndicator}}\",\n        \"GroupRequestTargetMembers\": \"{{GroupRequestTargetMembers}}\",\n        \"ResultContent\": \"{{ResultContent}}\",\n        \"SemanticQueryIndicator\": \"{{SemanticQueryIndicator}}\",\n        \"AuthorizationSignature\": \"{{AuthorizationSignature}}\",\n        \"OperationalExecutionTime\": \"{{OperationalExecutionTime}}\",\n        \"FromId\": \"{{FromId}}\",\n        \"RequestId\": \"{{RequestId}}\",\n        \"ReqExpirationTimestamp\": \"{{ReqExpirationTimestamp}}\",\n        \"EventCategory\": \"{{EventCategory}}\",\n        \"TokenIDs\": \"{{TokenIDs}}\",\n        \"RoleIDs\": \"{{RoleIDs}}\",\n        \"Tokens\": \"{{Tokens}}\",\n        \"resourceType\": \"{{resourceType}}\",\n        \"AuthorizationSignatureIndicator\": \"{{AuthorizationSignatureIndicator}}\",\n        \"LocalTokenIDs\": \"{{LocalTokenIDs}}\",\n        \"DeliveryAggregation\": \"{{DeliveryAggregation}}\",\n        \"content\": {\n            \"creator\": \"{{creator}}\",\n            \"accessControlPolicyIDs\": \"{{accessControlPolicyIDs}}\",\n            \"labels\": \"{{labels}}\",\n            \"creationTime\": \"{{creationTime}}\",\n            \"announceTo\": \"{{announceTo}}\",\n            \"dynamicAuthorizationConsultationIDs\": \"{{dynamicAuthorizationConsultationIDs}}\",\n            \"parentID\": \"{{parentID}}\",\n            \"announcedAttribute\": \"{{announcedAttribute}}\",\n            \"resourceName\": \"{{resourceName}}\",\n            \"expirationTime\": \"{{expirationTime}}\",\n            \"lastModifiedTime\": \"{{lastModifiedTime}}\"\n        },\n        \"ReleaseVersionIndicator\": \"{{ReleaseVersionIndicator}}\",\n        \"DesiredIdentifierResultType\": \"{{DesiredIdentifierResultType}}\",\n        \"ResExpirationTimestamp\": \"{{ResExpirationTimestamp}}\",\n        \"VendorInformation\": \"{{VendorInformation}}\",\n        \"Operation\": \"{{Operation}}\",\n        \"ResultPersistence\": \"{{ResultPersistence}}\",\n        \"AuthorizationRelationshipIndicator\": \"{{AuthorizationRelationshipIndicator}}\",\n        \"FilterCriteria\": \"{{FilterCriteria}}\"\n    }\n}", 
            "time": 1560229469604, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(201)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/iot3/example/ontologyRepository&header=ontologyRepositoryInfo',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData[\"ontologyRepositoryInfo.GroupRequestIdentifier\"]);", 
                            "    pm.environment.set(\"ToAddress\",currentData[\"ontologyRepositoryInfo.ToAddress\"]);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData[\"ontologyRepositoryInfo.OriginatingTimestamp\"]);", 
                            "    pm.environment.set(\"ResultContent\",currentData[\"ontologyRepositoryInfo.ResultContent\"]);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData[\"ontologyRepositoryInfo.SemanticQueryIndicator\"]);", 
                            "    pm.environment.set(\"EventCategory\",currentData[\"ontologyRepositoryInfo.EventCategory\"]);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData[\"ontologyRepositoryInfo.OperationalExecutionTime\"]);", 
                            "    pm.environment.set(\"creator\",currentData[\"ontologyRepositoryInfo.content.creator\"]);", 
                            "    pm.environment.set(\"accessControlPolicyIDs\",currentData[\"ontologyRepositoryInfo.content.accessControlPolicyIDs\"]);", 
                            "    pm.environment.set(\"labels\",currentData[\"ontologyRepositoryInfo.content.labels\"]);", 
                            "    pm.environment.set(\"creationTime\",currentData[\"ontologyRepositoryInfo.content.creationTime\"]);", 
                            "    pm.environment.set(\"announceTo\",currentData[\"ontologyRepositoryInfo.content.announceTo\"]);", 
                            "    pm.environment.set(\"dynamicAuthorizationConsultationIDs\",currentData[\"ontologyRepositoryInfo.content.dynamicAuthorizationConsultationIDs\"]);", 
                            "    pm.environment.set(\"parentID\",currentData[\"ontologyRepositoryInfo.content.parentID\"]);", 
                            "    pm.environment.set(\"announcedAttribute\",currentData[\"ontologyRepositoryInfo.content.announcedAttribute\"]);", 
                            "    pm.environment.set(\"resourceName\",currentData[\"ontologyRepositoryInfo.content.resourceName\"]);", 
                            "    pm.environment.set(\"expirationTime\",currentData[\"ontologyRepositoryInfo.content.expirationTime\"]);", 
                            "    pm.environment.set(\"lastModifiedTime\",currentData[\"ontologyRepositoryInfo.content.lastModifiedTime\"]);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData[\"ontologyRepositoryInfo.AuthorizationSignatureIndicator\"]);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData[\"ontologyRepositoryInfo.LocalTokenIDs\"]);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData[\"ontologyRepositoryInfo.AuthorizationSignature\"]);", 
                            "    pm.environment.set(\"Tokens\",currentData[\"ontologyRepositoryInfo.Tokens\"]);", 
                            "    pm.environment.set(\"VendorInformation\",currentData[\"ontologyRepositoryInfo.VendorInformation\"]);", 
                            "    pm.environment.set(\"ResponseType\",currentData[\"ontologyRepositoryInfo.ResponseType\"]);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData[\"ontologyRepositoryInfo.TokenRequestIndicator\"]);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData[\"ontologyRepositoryInfo.GroupRequestTargetMembers\"]);", 
                            "    pm.environment.set(\"FromId\",currentData[\"ontologyRepositoryInfo.FromId\"]);", 
                            "    pm.environment.set(\"RequestId\",currentData[\"ontologyRepositoryInfo.RequestId\"]);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData[\"ontologyRepositoryInfo.ReqExpirationTimestamp\"]);", 
                            "    pm.environment.set(\"TokenIDs\",currentData[\"ontologyRepositoryInfo.TokenIDs\"]);", 
                            "    pm.environment.set(\"resourceType\",currentData[\"ontologyRepositoryInfo.resourceType\"]);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData[\"ontologyRepositoryInfo.DeliveryAggregation\"]);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData[\"ontologyRepositoryInfo.ReleaseVersionIndicator\"]);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData[\"ontologyRepositoryInfo.DesiredIdentifierResultType\"]);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData[\"ontologyRepositoryInfo.ResExpirationTimestamp\"]);", 
                            "    pm.environment.set(\"RoleIDs\",currentData[\"ontologyRepositoryInfo.RoleIDs\"]);", 
                            "    pm.environment.set(\"Operation\",currentData[\"ontologyRepositoryInfo.Operation\"]);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData[\"ontologyRepositoryInfo.ResultPersistence\"]);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData[\"ontologyRepositoryInfo.AuthorizationRelationshipIndicator\"]);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData[\"ontologyRepositoryInfo.FilterCriteria\"]);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "id": "f3392ee4-1c1f-4386-9f25-9e7ffd570acb250", 
            "description": "This method is used to create a ontologyRepository resource."
        }, 
        {
            "responses": [], 
            "dataMode": "raw", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile", 
            "name": "TC_201", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"semanticMashupJobProfileInfo\": {\n        \"ResponseType\": \"{{ResponseType}}\",\n        \"GroupRequestIdentifier\": \"{{GroupRequestIdentifier}}\",\n        \"ToAddress\": \"{{ToAddress}}\",\n        \"OriginatingTimestamp\": \"{{OriginatingTimestamp}}\",\n        \"TokenRequestIndicator\": \"{{TokenRequestIndicator}}\",\n        \"GroupRequestTargetMembers\": \"{{GroupRequestTargetMembers}}\",\n        \"ResultContent\": \"{{ResultContent}}\",\n        \"SemanticQueryIndicator\": \"{{SemanticQueryIndicator}}\",\n        \"AuthorizationSignature\": \"{{AuthorizationSignature}}\",\n        \"OperationalExecutionTime\": \"{{OperationalExecutionTime}}\",\n        \"FromId\": \"{{FromId}}\",\n        \"RequestId\": \"{{RequestId}}\",\n        \"ReqExpirationTimestamp\": \"{{ReqExpirationTimestamp}}\",\n        \"EventCategory\": \"{{EventCategory}}\",\n        \"TokenIDs\": \"{{TokenIDs}}\",\n        \"RoleIDs\": \"{{RoleIDs}}\",\n        \"Tokens\": \"{{Tokens}}\",\n        \"resourceType\": \"{{resourceType}}\",\n        \"AuthorizationSignatureIndicator\": \"{{AuthorizationSignatureIndicator}}\",\n        \"LocalTokenIDs\": \"{{LocalTokenIDs}}\",\n        \"DeliveryAggregation\": \"{{DeliveryAggregation}}\",\n        \"content\": {\n            \"smiID\": \"{{smiID}}\",\n            \"creator\": \"{{creator}}\",\n            \"outputDescriptor\": \"{{outputDescriptor}}\",\n            \"accessControlPolicyIDs\": \"{{accessControlPolicyIDs}}\",\n            \"labels\": \"{{labels}}\",\n            \"functionDescriptor\": \"{{functionDescriptor}}\",\n            \"parentID\": \"{{parentID}}\",\n            \"resourceName\": \"{{resourceName}}\",\n            \"lastModifiedTime\": \"{{lastModifiedTime}}\",\n            \"resourceType\": \"{{resourceType}}\",\n            \"resourceID\": \"{{resourceID}}\",\n            \"announcedAttribute\": \"{{announcedAttribute}}\",\n            \"creationTime\": \"{{creationTime}}\",\n            \"memberFilter\": \"{{memberFilter}}\",\n            \"announceTo\": \"{{announceTo}}\",\n            \"inputDescriptor\": \"{{inputDescriptor}}\",\n            \"dynamicAuthorizationConsultationIDs\": \"{{dynamicAuthorizationConsultationIDs}}\",\n            \"expirationTime\": \"{{expirationTime}}\"\n        },\n        \"ReleaseVersionIndicator\": \"{{ReleaseVersionIndicator}}\",\n        \"DesiredIdentifierResultType\": \"{{DesiredIdentifierResultType}}\",\n        \"ResExpirationTimestamp\": \"{{ResExpirationTimestamp}}\",\n        \"VendorInformation\": \"{{VendorInformation}}\",\n        \"Operation\": \"{{Operation}}\",\n        \"ResultPersistence\": \"{{ResultPersistence}}\",\n        \"AuthorizationRelationshipIndicator\": \"{{AuthorizationRelationshipIndicator}}\",\n        \"FilterCriteria\": \"{{FilterCriteria}}\"\n    }\n}", 
            "time": 1560229469605, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(201)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/iot3/example/semanticMashupJobProfile&header=semanticMashupJobProfileInfo',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData[\"semanticMashupJobProfileInfo.GroupRequestIdentifier\"]);", 
                            "    pm.environment.set(\"ToAddress\",currentData[\"semanticMashupJobProfileInfo.ToAddress\"]);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData[\"semanticMashupJobProfileInfo.OriginatingTimestamp\"]);", 
                            "    pm.environment.set(\"ResultContent\",currentData[\"semanticMashupJobProfileInfo.ResultContent\"]);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData[\"semanticMashupJobProfileInfo.SemanticQueryIndicator\"]);", 
                            "    pm.environment.set(\"EventCategory\",currentData[\"semanticMashupJobProfileInfo.EventCategory\"]);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData[\"semanticMashupJobProfileInfo.OperationalExecutionTime\"]);", 
                            "    pm.environment.set(\"resourceType\",currentData[\"semanticMashupJobProfileInfo.content.resourceType\"]);", 
                            "    pm.environment.set(\"smiID\",currentData[\"semanticMashupJobProfileInfo.content.smiID\"]);", 
                            "    pm.environment.set(\"inputDescriptor\",currentData[\"semanticMashupJobProfileInfo.content.inputDescriptor\"]);", 
                            "    pm.environment.set(\"creator\",currentData[\"semanticMashupJobProfileInfo.content.creator\"]);", 
                            "    pm.environment.set(\"outputDescriptor\",currentData[\"semanticMashupJobProfileInfo.content.outputDescriptor\"]);", 
                            "    pm.environment.set(\"accessControlPolicyIDs\",currentData[\"semanticMashupJobProfileInfo.content.accessControlPolicyIDs\"]);", 
                            "    pm.environment.set(\"labels\",currentData[\"semanticMashupJobProfileInfo.content.labels\"]);", 
                            "    pm.environment.set(\"creationTime\",currentData[\"semanticMashupJobProfileInfo.content.creationTime\"]);", 
                            "    pm.environment.set(\"memberFilter\",currentData[\"semanticMashupJobProfileInfo.content.memberFilter\"]);", 
                            "    pm.environment.set(\"announceTo\",currentData[\"semanticMashupJobProfileInfo.content.announceTo\"]);", 
                            "    pm.environment.set(\"functionDescriptor\",currentData[\"semanticMashupJobProfileInfo.content.functionDescriptor\"]);", 
                            "    pm.environment.set(\"dynamicAuthorizationConsultationIDs\",currentData[\"semanticMashupJobProfileInfo.content.dynamicAuthorizationConsultationIDs\"]);", 
                            "    pm.environment.set(\"parentID\",currentData[\"semanticMashupJobProfileInfo.content.parentID\"]);", 
                            "    pm.environment.set(\"announcedAttribute\",currentData[\"semanticMashupJobProfileInfo.content.announcedAttribute\"]);", 
                            "    pm.environment.set(\"resourceName\",currentData[\"semanticMashupJobProfileInfo.content.resourceName\"]);", 
                            "    pm.environment.set(\"lastModifiedTime\",currentData[\"semanticMashupJobProfileInfo.content.lastModifiedTime\"]);", 
                            "    pm.environment.set(\"expirationTime\",currentData[\"semanticMashupJobProfileInfo.content.expirationTime\"]);", 
                            "    pm.environment.set(\"resourceID\",currentData[\"semanticMashupJobProfileInfo.content.resourceID\"]);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData[\"semanticMashupJobProfileInfo.AuthorizationSignatureIndicator\"]);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData[\"semanticMashupJobProfileInfo.LocalTokenIDs\"]);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData[\"semanticMashupJobProfileInfo.AuthorizationSignature\"]);", 
                            "    pm.environment.set(\"Tokens\",currentData[\"semanticMashupJobProfileInfo.Tokens\"]);", 
                            "    pm.environment.set(\"VendorInformation\",currentData[\"semanticMashupJobProfileInfo.VendorInformation\"]);", 
                            "    pm.environment.set(\"ResponseType\",currentData[\"semanticMashupJobProfileInfo.ResponseType\"]);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData[\"semanticMashupJobProfileInfo.TokenRequestIndicator\"]);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData[\"semanticMashupJobProfileInfo.GroupRequestTargetMembers\"]);", 
                            "    pm.environment.set(\"FromId\",currentData[\"semanticMashupJobProfileInfo.FromId\"]);", 
                            "    pm.environment.set(\"RequestId\",currentData[\"semanticMashupJobProfileInfo.RequestId\"]);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData[\"semanticMashupJobProfileInfo.ReqExpirationTimestamp\"]);", 
                            "    pm.environment.set(\"TokenIDs\",currentData[\"semanticMashupJobProfileInfo.TokenIDs\"]);", 
                            "    pm.environment.set(\"resourceType\",currentData[\"semanticMashupJobProfileInfo.resourceType\"]);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData[\"semanticMashupJobProfileInfo.DeliveryAggregation\"]);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData[\"semanticMashupJobProfileInfo.ReleaseVersionIndicator\"]);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData[\"semanticMashupJobProfileInfo.DesiredIdentifierResultType\"]);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData[\"semanticMashupJobProfileInfo.ResExpirationTimestamp\"]);", 
                            "    pm.environment.set(\"RoleIDs\",currentData[\"semanticMashupJobProfileInfo.RoleIDs\"]);", 
                            "    pm.environment.set(\"Operation\",currentData[\"semanticMashupJobProfileInfo.Operation\"]);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData[\"semanticMashupJobProfileInfo.ResultPersistence\"]);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData[\"semanticMashupJobProfileInfo.AuthorizationRelationshipIndicator\"]);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData[\"semanticMashupJobProfileInfo.FilterCriteria\"]);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "id": "24945d73-113f-497e-b19a-683b9968a795251", 
            "description": "This method is used to create a semanticMashupJobProfile resource."
        }, 
        {
            "responses": [], 
            "dataMode": "raw", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor", 
            "name": "TC_201", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"semanticDescriptorInfo\": {\n        \"ResponseType\": \"{{ResponseType}}\",\n        \"GroupRequestIdentifier\": \"{{GroupRequestIdentifier}}\",\n        \"ToAddress\": \"{{ToAddress}}\",\n        \"OriginatingTimestamp\": \"{{OriginatingTimestamp}}\",\n        \"TokenRequestIndicator\": \"{{TokenRequestIndicator}}\",\n        \"GroupRequestTargetMembers\": \"{{GroupRequestTargetMembers}}\",\n        \"ResultContent\": \"{{ResultContent}}\",\n        \"SemanticQueryIndicator\": \"{{SemanticQueryIndicator}}\",\n        \"AuthorizationSignature\": \"{{AuthorizationSignature}}\",\n        \"OperationalExecutionTime\": \"{{OperationalExecutionTime}}\",\n        \"FromId\": \"{{FromId}}\",\n        \"RequestId\": \"{{RequestId}}\",\n        \"ReqExpirationTimestamp\": \"{{ReqExpirationTimestamp}}\",\n        \"EventCategory\": \"{{EventCategory}}\",\n        \"TokenIDs\": \"{{TokenIDs}}\",\n        \"RoleIDs\": \"{{RoleIDs}}\",\n        \"Tokens\": \"{{Tokens}}\",\n        \"resourceType\": \"{{resourceType}}\",\n        \"AuthorizationSignatureIndicator\": \"{{AuthorizationSignatureIndicator}}\",\n        \"LocalTokenIDs\": \"{{LocalTokenIDs}}\",\n        \"DeliveryAggregation\": \"{{DeliveryAggregation}}\",\n        \"content\": {\n            \"ontologyRef\": \"{{ontologyRef}}\",\n            \"creator\": \"{{creator}}\",\n            \"accessControlPolicyIDs\": \"{{accessControlPolicyIDs}}\",\n            \"labels\": \"{{labels}}\",\n            \"semanticOpExec\": \"{{semanticOpExec}}\",\n            \"validationEnable\": \"{{validationEnable}}\",\n            \"parentID\": \"{{parentID}}\",\n            \"resourceName\": \"{{resourceName}}\",\n            \"lastModifiedTime\": \"{{lastModifiedTime}}\",\n            \"descriptorRepresentation\": \"{{descriptorRepresentation}}\",\n            \"resourceType\": \"{{resourceType}}\",\n            \"relatedSemantics\": \"{{relatedSemantics}}\",\n            \"resourceID\": \"{{resourceID}}\",\n            \"announcedAttribute\": \"{{announcedAttribute}}\",\n            \"creationTime\": \"{{creationTime}}\",\n            \"announceTo\": \"{{announceTo}}\",\n            \"descriptor\": \"{{descriptor}}\",\n            \"dynamicAuthorizationConsultationIDs\": \"{{dynamicAuthorizationConsultationIDs}}\",\n            \"semanticValidated\": \"{{semanticValidated}}\",\n            \"expirationTime\": \"{{expirationTime}}\"\n        },\n        \"ReleaseVersionIndicator\": \"{{ReleaseVersionIndicator}}\",\n        \"DesiredIdentifierResultType\": \"{{DesiredIdentifierResultType}}\",\n        \"ResExpirationTimestamp\": \"{{ResExpirationTimestamp}}\",\n        \"VendorInformation\": \"{{VendorInformation}}\",\n        \"Operation\": \"{{Operation}}\",\n        \"ResultPersistence\": \"{{ResultPersistence}}\",\n        \"AuthorizationRelationshipIndicator\": \"{{AuthorizationRelationshipIndicator}}\",\n        \"FilterCriteria\": \"{{FilterCriteria}}\"\n    }\n}", 
            "time": 1560229469605, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(201)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_csv/1?query=/iot3/example/semanticDescriptor&header=semanticDescriptorInfo',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData[\"semanticDescriptorInfo.GroupRequestIdentifier\"]);", 
                            "    pm.environment.set(\"ToAddress\",currentData[\"semanticDescriptorInfo.ToAddress\"]);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData[\"semanticDescriptorInfo.OriginatingTimestamp\"]);", 
                            "    pm.environment.set(\"ResultContent\",currentData[\"semanticDescriptorInfo.ResultContent\"]);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData[\"semanticDescriptorInfo.SemanticQueryIndicator\"]);", 
                            "    pm.environment.set(\"EventCategory\",currentData[\"semanticDescriptorInfo.EventCategory\"]);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData[\"semanticDescriptorInfo.OperationalExecutionTime\"]);", 
                            "    pm.environment.set(\"ontologyRef\",currentData[\"semanticDescriptorInfo.content.ontologyRef\"]);", 
                            "    pm.environment.set(\"expirationTime\",currentData[\"semanticDescriptorInfo.content.expirationTime\"]);", 
                            "    pm.environment.set(\"creator\",currentData[\"semanticDescriptorInfo.content.creator\"]);", 
                            "    pm.environment.set(\"resourceType\",currentData[\"semanticDescriptorInfo.content.resourceType\"]);", 
                            "    pm.environment.set(\"accessControlPolicyIDs\",currentData[\"semanticDescriptorInfo.content.accessControlPolicyIDs\"]);", 
                            "    pm.environment.set(\"labels\",currentData[\"semanticDescriptorInfo.content.labels\"]);", 
                            "    pm.environment.set(\"semanticOpExec\",currentData[\"semanticDescriptorInfo.content.semanticOpExec\"]);", 
                            "    pm.environment.set(\"descriptor\",currentData[\"semanticDescriptorInfo.content.descriptor\"]);", 
                            "    pm.environment.set(\"creationTime\",currentData[\"semanticDescriptorInfo.content.creationTime\"]);", 
                            "    pm.environment.set(\"announceTo\",currentData[\"semanticDescriptorInfo.content.announceTo\"]);", 
                            "    pm.environment.set(\"relatedSemantics\",currentData[\"semanticDescriptorInfo.content.relatedSemantics\"]);", 
                            "    pm.environment.set(\"dynamicAuthorizationConsultationIDs\",currentData[\"semanticDescriptorInfo.content.dynamicAuthorizationConsultationIDs\"]);", 
                            "    pm.environment.set(\"validationEnable\",currentData[\"semanticDescriptorInfo.content.validationEnable\"]);", 
                            "    pm.environment.set(\"parentID\",currentData[\"semanticDescriptorInfo.content.parentID\"]);", 
                            "    pm.environment.set(\"announcedAttribute\",currentData[\"semanticDescriptorInfo.content.announcedAttribute\"]);", 
                            "    pm.environment.set(\"resourceName\",currentData[\"semanticDescriptorInfo.content.resourceName\"]);", 
                            "    pm.environment.set(\"lastModifiedTime\",currentData[\"semanticDescriptorInfo.content.lastModifiedTime\"]);", 
                            "    pm.environment.set(\"resourceID\",currentData[\"semanticDescriptorInfo.content.resourceID\"]);", 
                            "    pm.environment.set(\"descriptorRepresentation\",currentData[\"semanticDescriptorInfo.content.descriptorRepresentation\"]);", 
                            "    pm.environment.set(\"semanticValidated\",currentData[\"semanticDescriptorInfo.content.semanticValidated\"]);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData[\"semanticDescriptorInfo.AuthorizationSignatureIndicator\"]);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData[\"semanticDescriptorInfo.LocalTokenIDs\"]);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData[\"semanticDescriptorInfo.AuthorizationSignature\"]);", 
                            "    pm.environment.set(\"Tokens\",currentData[\"semanticDescriptorInfo.Tokens\"]);", 
                            "    pm.environment.set(\"VendorInformation\",currentData[\"semanticDescriptorInfo.VendorInformation\"]);", 
                            "    pm.environment.set(\"ResponseType\",currentData[\"semanticDescriptorInfo.ResponseType\"]);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData[\"semanticDescriptorInfo.TokenRequestIndicator\"]);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData[\"semanticDescriptorInfo.GroupRequestTargetMembers\"]);", 
                            "    pm.environment.set(\"FromId\",currentData[\"semanticDescriptorInfo.FromId\"]);", 
                            "    pm.environment.set(\"RequestId\",currentData[\"semanticDescriptorInfo.RequestId\"]);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData[\"semanticDescriptorInfo.ReqExpirationTimestamp\"]);", 
                            "    pm.environment.set(\"TokenIDs\",currentData[\"semanticDescriptorInfo.TokenIDs\"]);", 
                            "    pm.environment.set(\"resourceType\",currentData[\"semanticDescriptorInfo.resourceType\"]);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData[\"semanticDescriptorInfo.DeliveryAggregation\"]);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData[\"semanticDescriptorInfo.ReleaseVersionIndicator\"]);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData[\"semanticDescriptorInfo.DesiredIdentifierResultType\"]);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData[\"semanticDescriptorInfo.ResExpirationTimestamp\"]);", 
                            "    pm.environment.set(\"RoleIDs\",currentData[\"semanticDescriptorInfo.RoleIDs\"]);", 
                            "    pm.environment.set(\"Operation\",currentData[\"semanticDescriptorInfo.Operation\"]);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData[\"semanticDescriptorInfo.ResultPersistence\"]);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData[\"semanticDescriptorInfo.AuthorizationRelationshipIndicator\"]);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData[\"semanticDescriptorInfo.FilterCriteria\"]);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "POST", 
            "preRequestScript": "", 
            "data": [], 
            "id": "b4450019-e63e-44da-90a2-d6e15afc1fec252", 
            "description": "This method is used to create a semanticDescriptor resource."
        }, 
        {
            "responses": [], 
            "dataMode": "raw", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticValidation?ToAddress={{ToAddress}}&FromId={{FromId}}&Operation={{Operation}}&RequestId={{RequestId}}&ResourceType={{ResourceType}}&OriginatingTimestamp={{OriginatingTimestamp}}&ReqExpirationTimestamp={{ReqExpirationTimestamp}}&ResExpirationTimestamp={{ResExpirationTimestamp}}&EventCategory={{EventCategory}}&OperationalExecutionTime={{OperationalExecutionTime}}&ResponseType={{ResponseType}}&ResultPersistence={{ResultPersistence}}&ResultContent={{ResultContent}}&DeliveryAggregation={{DeliveryAggregation}}&GroupRequestIdentifier={{GroupRequestIdentifier}}&FilterCriteria={{FilterCriteria}}&DesiredIdentifierResultType={{DesiredIdentifierResultType}}&TokenRequestIndicator={{TokenRequestIndicator}}&Tokens={{Tokens}}&TokenIDs={{TokenIDs}}&RoleIDs={{RoleIDs}}&LocalTokenIDs={{LocalTokenIDs}}&ReleaseVersionIndicator={{ReleaseVersionIndicator}}&VendorInformation={{VendorInformation}}&GroupRequestTargetMembers={{GroupRequestTargetMembers}}&AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}&AuthorizationSignature={{AuthorizationSignature}}&AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}&SemanticQueryIndicator={{SemanticQueryIndicator}}", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"semanticValidationInfo\": {\n        \"ResponseType\": \"{{ResponseType}}\",\n        \"GroupRequestIdentifier\": \"{{GroupRequestIdentifier}}\",\n        \"ToAddress\": \"{{ToAddress}}\",\n        \"OriginatingTimestamp\": \"{{OriginatingTimestamp}}\",\n        \"TokenRequestIndicator\": \"{{TokenRequestIndicator}}\",\n        \"GroupRequestTargetMembers\": \"{{GroupRequestTargetMembers}}\",\n        \"ResultContent\": \"{{ResultContent}}\",\n        \"SemanticQueryIndicator\": \"{{SemanticQueryIndicator}}\",\n        \"AuthorizationSignature\": \"{{AuthorizationSignature}}\",\n        \"OperationalExecutionTime\": \"{{OperationalExecutionTime}}\",\n        \"FromId\": \"{{FromId}}\",\n        \"RequestId\": \"{{RequestId}}\",\n        \"ReqExpirationTimestamp\": \"{{ReqExpirationTimestamp}}\",\n        \"EventCategory\": \"{{EventCategory}}\",\n        \"TokenIDs\": \"{{TokenIDs}}\",\n        \"RoleIDs\": \"{{RoleIDs}}\",\n        \"Tokens\": \"{{Tokens}}\",\n        \"resourceType\": \"{{resourceType}}\",\n        \"AuthorizationSignatureIndicator\": \"{{AuthorizationSignatureIndicator}}\",\n        \"LocalTokenIDs\": \"{{LocalTokenIDs}}\",\n        \"DeliveryAggregation\": \"{{DeliveryAggregation}}\",\n        \"content\": \"{{content}}\",\n        \"ReleaseVersionIndicator\": \"{{ReleaseVersionIndicator}}\",\n        \"DesiredIdentifierResultType\": \"{{DesiredIdentifierResultType}}\",\n        \"ResExpirationTimestamp\": \"{{ResExpirationTimestamp}}\",\n        \"VendorInformation\": \"{{VendorInformation}}\",\n        \"Operation\": \"{{Operation}}\",\n        \"ResultPersistence\": \"{{ResultPersistence}}\",\n        \"AuthorizationRelationshipIndicator\": \"{{AuthorizationRelationshipIndicator}}\",\n        \"FilterCriteria\": \"{{FilterCriteria}}\"\n    }\n}", 
            "time": 1560229469603, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidationInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticValidationInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticValidationInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticValidationInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticValidationInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticValidationInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticValidationInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticValidationInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticValidationInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticValidationInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticValidationInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticValidationInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticValidationInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticValidationInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticValidationInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticValidationInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticValidationInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticValidationInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticValidationInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticValidationInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticValidationInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticValidationInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticValidationInfo']['content']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticValidationInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticValidationInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticValidationInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticValidationInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticValidationInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticValidationInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticValidationInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticValidationInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/254?query=/iot3/example/semanticValidation?ToAddress={{ToAddress}}?FromId={{FromId}}?Operation={{Operation}}?RequestId={{RequestId}}?ResourceType={{ResourceType}}?OriginatingTimestamp={{OriginatingTimestamp}}?ReqExpirationTimestamp={{ReqExpirationTimestamp}}?ResExpirationTimestamp={{ResExpirationTimestamp}}?EventCategory={{EventCategory}}?OperationalExecutionTime={{OperationalExecutionTime}}?ResponseType={{ResponseType}}?ResultPersistence={{ResultPersistence}}?ResultContent={{ResultContent}}?DeliveryAggregation={{DeliveryAggregation}}?GroupRequestIdentifier={{GroupRequestIdentifier}}?FilterCriteria={{FilterCriteria}}?DesiredIdentifierResultType={{DesiredIdentifierResultType}}?TokenRequestIndicator={{TokenRequestIndicator}}?Tokens={{Tokens}}?TokenIDs={{TokenIDs}}?RoleIDs={{RoleIDs}}?LocalTokenIDs={{LocalTokenIDs}}?ReleaseVersionIndicator={{ReleaseVersionIndicator}}?VendorInformation={{VendorInformation}}?GroupRequestTargetMembers={{GroupRequestTargetMembers}}?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}?AuthorizationSignature={{AuthorizationSignature}}?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}?SemanticQueryIndicator={{SemanticQueryIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ToAddress\",currentData.ToAddress);", 
                            "    pm.environment.set(\"FromId\",currentData.FromId);", 
                            "    pm.environment.set(\"Operation\",currentData.Operation);", 
                            "    pm.environment.set(\"RequestId\",currentData.RequestId);", 
                            "    pm.environment.set(\"ResourceType\",currentData.ResourceType);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.OriginatingTimestamp);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.ReqExpirationTimestamp);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.ResExpirationTimestamp);", 
                            "    pm.environment.set(\"EventCategory\",currentData.EventCategory);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.OperationalExecutionTime);", 
                            "    pm.environment.set(\"ResponseType\",currentData.ResponseType);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.ResultPersistence);", 
                            "    pm.environment.set(\"ResultContent\",currentData.ResultContent);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.DeliveryAggregation);", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.GroupRequestIdentifier);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.FilterCriteria);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.DesiredIdentifierResultType);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.TokenRequestIndicator);", 
                            "    pm.environment.set(\"Tokens\",currentData.Tokens);", 
                            "    pm.environment.set(\"TokenIDs\",currentData.TokenIDs);", 
                            "    pm.environment.set(\"RoleIDs\",currentData.RoleIDs);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.LocalTokenIDs);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.ReleaseVersionIndicator);", 
                            "    pm.environment.set(\"VendorInformation\",currentData.VendorInformation);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.GroupRequestTargetMembers);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.AuthorizationSignatureIndicator);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.AuthorizationSignature);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.AuthorizationRelationshipIndicator);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.SemanticQueryIndicator);", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.semanticValidationInfo.GroupRequestIdentifier);", 
                            "    pm.environment.set(\"ToAddress\",currentData.semanticValidationInfo.ToAddress);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.semanticValidationInfo.OriginatingTimestamp);", 
                            "    pm.environment.set(\"ResultContent\",currentData.semanticValidationInfo.ResultContent);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.semanticValidationInfo.SemanticQueryIndicator);", 
                            "    pm.environment.set(\"EventCategory\",currentData.semanticValidationInfo.EventCategory);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.semanticValidationInfo.OperationalExecutionTime);", 
                            "    pm.environment.set(\"content\",currentData.semanticValidationInfo.content);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.semanticValidationInfo.AuthorizationSignatureIndicator);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.semanticValidationInfo.LocalTokenIDs);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.semanticValidationInfo.AuthorizationSignature);", 
                            "    pm.environment.set(\"Tokens\",currentData.semanticValidationInfo.Tokens);", 
                            "    pm.environment.set(\"VendorInformation\",currentData.semanticValidationInfo.VendorInformation);", 
                            "    pm.environment.set(\"ResponseType\",currentData.semanticValidationInfo.ResponseType);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.semanticValidationInfo.TokenRequestIndicator);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.semanticValidationInfo.GroupRequestTargetMembers);", 
                            "    pm.environment.set(\"FromId\",currentData.semanticValidationInfo.FromId);", 
                            "    pm.environment.set(\"RequestId\",currentData.semanticValidationInfo.RequestId);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.semanticValidationInfo.ReqExpirationTimestamp);", 
                            "    pm.environment.set(\"TokenIDs\",currentData.semanticValidationInfo.TokenIDs);", 
                            "    pm.environment.set(\"resourceType\",currentData.semanticValidationInfo.resourceType);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.semanticValidationInfo.DeliveryAggregation);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.semanticValidationInfo.ReleaseVersionIndicator);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.semanticValidationInfo.DesiredIdentifierResultType);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.semanticValidationInfo.ResExpirationTimestamp);", 
                            "    pm.environment.set(\"RoleIDs\",currentData.semanticValidationInfo.RoleIDs);", 
                            "    pm.environment.set(\"Operation\",currentData.semanticValidationInfo.Operation);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.semanticValidationInfo.ResultPersistence);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.semanticValidationInfo.AuthorizationRelationshipIndicator);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.semanticValidationInfo.FilterCriteria);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "PUT", 
            "preRequestScript": "", 
            "data": [], 
            "id": "f860ae95-28f9-48af-8f0f-4c223a2798d2253", 
            "description": "This method updates the information about a specific semanticValidationInfo resource. "
        }, 
        {
            "responses": [], 
            "dataMode": "raw", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?ToAddress={{ToAddress}}&FromId={{FromId}}&Operation={{Operation}}&RequestId={{RequestId}}&ResourceType={{ResourceType}}&OriginatingTimestamp={{OriginatingTimestamp}}&ReqExpirationTimestamp={{ReqExpirationTimestamp}}&ResExpirationTimestamp={{ResExpirationTimestamp}}&EventCategory={{EventCategory}}&OperationalExecutionTime={{OperationalExecutionTime}}&ResponseType={{ResponseType}}&ResultPersistence={{ResultPersistence}}&ResultContent={{ResultContent}}&DeliveryAggregation={{DeliveryAggregation}}&GroupRequestIdentifier={{GroupRequestIdentifier}}&FilterCriteria={{FilterCriteria}}&DesiredIdentifierResultType={{DesiredIdentifierResultType}}&TokenRequestIndicator={{TokenRequestIndicator}}&Tokens={{Tokens}}&TokenIDs={{TokenIDs}}&RoleIDs={{RoleIDs}}&LocalTokenIDs={{LocalTokenIDs}}&ReleaseVersionIndicator={{ReleaseVersionIndicator}}&VendorInformation={{VendorInformation}}&GroupRequestTargetMembers={{GroupRequestTargetMembers}}&AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}&AuthorizationSignature={{AuthorizationSignature}}&AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}&SemanticQueryIndicator={{SemanticQueryIndicator}}", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ontologyInfo\": {\n        \"ResponseType\": \"{{ResponseType}}\",\n        \"GroupRequestIdentifier\": \"{{GroupRequestIdentifier}}\",\n        \"ToAddress\": \"{{ToAddress}}\",\n        \"OriginatingTimestamp\": \"{{OriginatingTimestamp}}\",\n        \"TokenRequestIndicator\": \"{{TokenRequestIndicator}}\",\n        \"GroupRequestTargetMembers\": \"{{GroupRequestTargetMembers}}\",\n        \"ResultContent\": \"{{ResultContent}}\",\n        \"SemanticQueryIndicator\": \"{{SemanticQueryIndicator}}\",\n        \"AuthorizationSignature\": \"{{AuthorizationSignature}}\",\n        \"OperationalExecutionTime\": \"{{OperationalExecutionTime}}\",\n        \"FromId\": \"{{FromId}}\",\n        \"RequestId\": \"{{RequestId}}\",\n        \"ReqExpirationTimestamp\": \"{{ReqExpirationTimestamp}}\",\n        \"EventCategory\": \"{{EventCategory}}\",\n        \"TokenIDs\": \"{{TokenIDs}}\",\n        \"RoleIDs\": \"{{RoleIDs}}\",\n        \"Tokens\": \"{{Tokens}}\",\n        \"resourceType\": \"{{resourceType}}\",\n        \"AuthorizationSignatureIndicator\": \"{{AuthorizationSignatureIndicator}}\",\n        \"LocalTokenIDs\": \"{{LocalTokenIDs}}\",\n        \"DeliveryAggregation\": \"{{DeliveryAggregation}}\",\n        \"content\": {\n            \"description\": \"{{description}}\",\n            \"creator\": \"{{creator}}\",\n            \"accessControlPolicyIDs\": \"{{accessControlPolicyIDs}}\",\n            \"labels\": \"{{labels}}\",\n            \"semanticOpExec\": \"{{semanticOpExec}}\",\n            \"announceTo\": \"{{announceTo}}\",\n            \"dynamicAuthorizationConsultationIDs\": \"{{dynamicAuthorizationConsultationIDs}}\",\n            \"resourceName\": \"{{resourceName}}\",\n            \"ontologyContent\": \"{{ontologyContent}}\",\n            \"parentID\": \"{{parentID}}\",\n            \"announcedAttribute\": \"{{announcedAttribute}}\",\n            \"creationTime\": \"{{creationTime}}\",\n            \"expirationTime\": \"{{expirationTime}}\",\n            \"ontologyFormat\": \"{{ontologyFormat}}\",\n            \"lastModifiedTime\": \"{{lastModifiedTime}}\"\n        },\n        \"ReleaseVersionIndicator\": \"{{ReleaseVersionIndicator}}\",\n        \"DesiredIdentifierResultType\": \"{{DesiredIdentifierResultType}}\",\n        \"ResExpirationTimestamp\": \"{{ResExpirationTimestamp}}\",\n        \"VendorInformation\": \"{{VendorInformation}}\",\n        \"Operation\": \"{{Operation}}\",\n        \"ResultPersistence\": \"{{ResultPersistence}}\",\n        \"AuthorizationRelationshipIndicator\": \"{{AuthorizationRelationshipIndicator}}\",\n        \"FilterCriteria\": \"{{FilterCriteria}}\"\n    }\n}", 
            "time": 1560229469603, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"description\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyFormat\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['description']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['ontologyFormat']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/255?query=/iot3/example/ontology?ToAddress={{ToAddress}}?FromId={{FromId}}?Operation={{Operation}}?RequestId={{RequestId}}?ResourceType={{ResourceType}}?OriginatingTimestamp={{OriginatingTimestamp}}?ReqExpirationTimestamp={{ReqExpirationTimestamp}}?ResExpirationTimestamp={{ResExpirationTimestamp}}?EventCategory={{EventCategory}}?OperationalExecutionTime={{OperationalExecutionTime}}?ResponseType={{ResponseType}}?ResultPersistence={{ResultPersistence}}?ResultContent={{ResultContent}}?DeliveryAggregation={{DeliveryAggregation}}?GroupRequestIdentifier={{GroupRequestIdentifier}}?FilterCriteria={{FilterCriteria}}?DesiredIdentifierResultType={{DesiredIdentifierResultType}}?TokenRequestIndicator={{TokenRequestIndicator}}?Tokens={{Tokens}}?TokenIDs={{TokenIDs}}?RoleIDs={{RoleIDs}}?LocalTokenIDs={{LocalTokenIDs}}?ReleaseVersionIndicator={{ReleaseVersionIndicator}}?VendorInformation={{VendorInformation}}?GroupRequestTargetMembers={{GroupRequestTargetMembers}}?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}?AuthorizationSignature={{AuthorizationSignature}}?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}?SemanticQueryIndicator={{SemanticQueryIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ToAddress\",currentData.ToAddress);", 
                            "    pm.environment.set(\"FromId\",currentData.FromId);", 
                            "    pm.environment.set(\"Operation\",currentData.Operation);", 
                            "    pm.environment.set(\"RequestId\",currentData.RequestId);", 
                            "    pm.environment.set(\"ResourceType\",currentData.ResourceType);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.OriginatingTimestamp);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.ReqExpirationTimestamp);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.ResExpirationTimestamp);", 
                            "    pm.environment.set(\"EventCategory\",currentData.EventCategory);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.OperationalExecutionTime);", 
                            "    pm.environment.set(\"ResponseType\",currentData.ResponseType);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.ResultPersistence);", 
                            "    pm.environment.set(\"ResultContent\",currentData.ResultContent);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.DeliveryAggregation);", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.GroupRequestIdentifier);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.FilterCriteria);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.DesiredIdentifierResultType);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.TokenRequestIndicator);", 
                            "    pm.environment.set(\"Tokens\",currentData.Tokens);", 
                            "    pm.environment.set(\"TokenIDs\",currentData.TokenIDs);", 
                            "    pm.environment.set(\"RoleIDs\",currentData.RoleIDs);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.LocalTokenIDs);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.ReleaseVersionIndicator);", 
                            "    pm.environment.set(\"VendorInformation\",currentData.VendorInformation);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.GroupRequestTargetMembers);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.AuthorizationSignatureIndicator);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.AuthorizationSignature);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.AuthorizationRelationshipIndicator);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.SemanticQueryIndicator);", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.ontologyInfo.GroupRequestIdentifier);", 
                            "    pm.environment.set(\"ToAddress\",currentData.ontologyInfo.ToAddress);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.ontologyInfo.OriginatingTimestamp);", 
                            "    pm.environment.set(\"ResultContent\",currentData.ontologyInfo.ResultContent);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.ontologyInfo.SemanticQueryIndicator);", 
                            "    pm.environment.set(\"EventCategory\",currentData.ontologyInfo.EventCategory);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.ontologyInfo.OperationalExecutionTime);", 
                            "    pm.environment.set(\"description\",currentData.ontologyInfo.content.description);", 
                            "    pm.environment.set(\"creator\",currentData.ontologyInfo.content.creator);", 
                            "    pm.environment.set(\"accessControlPolicyIDs\",currentData.ontologyInfo.content.accessControlPolicyIDs);", 
                            "    pm.environment.set(\"labels\",currentData.ontologyInfo.content.labels);", 
                            "    pm.environment.set(\"semanticOpExec\",currentData.ontologyInfo.content.semanticOpExec);", 
                            "    pm.environment.set(\"creationTime\",currentData.ontologyInfo.content.creationTime);", 
                            "    pm.environment.set(\"announceTo\",currentData.ontologyInfo.content.announceTo);", 
                            "    pm.environment.set(\"dynamicAuthorizationConsultationIDs\",currentData.ontologyInfo.content.dynamicAuthorizationConsultationIDs);", 
                            "    pm.environment.set(\"ontologyContent\",currentData.ontologyInfo.content.ontologyContent);", 
                            "    pm.environment.set(\"parentID\",currentData.ontologyInfo.content.parentID);", 
                            "    pm.environment.set(\"announcedAttribute\",currentData.ontologyInfo.content.announcedAttribute);", 
                            "    pm.environment.set(\"resourceName\",currentData.ontologyInfo.content.resourceName);", 
                            "    pm.environment.set(\"expirationTime\",currentData.ontologyInfo.content.expirationTime);", 
                            "    pm.environment.set(\"ontologyFormat\",currentData.ontologyInfo.content.ontologyFormat);", 
                            "    pm.environment.set(\"lastModifiedTime\",currentData.ontologyInfo.content.lastModifiedTime);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.ontologyInfo.AuthorizationSignatureIndicator);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.ontologyInfo.LocalTokenIDs);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.ontologyInfo.AuthorizationSignature);", 
                            "    pm.environment.set(\"Tokens\",currentData.ontologyInfo.Tokens);", 
                            "    pm.environment.set(\"VendorInformation\",currentData.ontologyInfo.VendorInformation);", 
                            "    pm.environment.set(\"ResponseType\",currentData.ontologyInfo.ResponseType);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.ontologyInfo.TokenRequestIndicator);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.ontologyInfo.GroupRequestTargetMembers);", 
                            "    pm.environment.set(\"FromId\",currentData.ontologyInfo.FromId);", 
                            "    pm.environment.set(\"RequestId\",currentData.ontologyInfo.RequestId);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.ontologyInfo.ReqExpirationTimestamp);", 
                            "    pm.environment.set(\"TokenIDs\",currentData.ontologyInfo.TokenIDs);", 
                            "    pm.environment.set(\"resourceType\",currentData.ontologyInfo.resourceType);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.ontologyInfo.DeliveryAggregation);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.ontologyInfo.ReleaseVersionIndicator);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.ontologyInfo.DesiredIdentifierResultType);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.ontologyInfo.ResExpirationTimestamp);", 
                            "    pm.environment.set(\"RoleIDs\",currentData.ontologyInfo.RoleIDs);", 
                            "    pm.environment.set(\"Operation\",currentData.ontologyInfo.Operation);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.ontologyInfo.ResultPersistence);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.ontologyInfo.AuthorizationRelationshipIndicator);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.ontologyInfo.FilterCriteria);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "PUT", 
            "preRequestScript": "", 
            "data": [], 
            "id": "3ba87e7b-23a1-4390-b97b-04b88a70395b254", 
            "description": "This method updates the information about a specific ontologyInfo resource. "
        }, 
        {
            "responses": [], 
            "dataMode": "raw", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?ToAddress={{ToAddress}}&FromId={{FromId}}&Operation={{Operation}}&RequestId={{RequestId}}&ResourceType={{ResourceType}}&OriginatingTimestamp={{OriginatingTimestamp}}&ReqExpirationTimestamp={{ReqExpirationTimestamp}}&ResExpirationTimestamp={{ResExpirationTimestamp}}&EventCategory={{EventCategory}}&OperationalExecutionTime={{OperationalExecutionTime}}&ResponseType={{ResponseType}}&ResultPersistence={{ResultPersistence}}&ResultContent={{ResultContent}}&DeliveryAggregation={{DeliveryAggregation}}&GroupRequestIdentifier={{GroupRequestIdentifier}}&FilterCriteria={{FilterCriteria}}&DesiredIdentifierResultType={{DesiredIdentifierResultType}}&TokenRequestIndicator={{TokenRequestIndicator}}&Tokens={{Tokens}}&TokenIDs={{TokenIDs}}&RoleIDs={{RoleIDs}}&LocalTokenIDs={{LocalTokenIDs}}&ReleaseVersionIndicator={{ReleaseVersionIndicator}}&VendorInformation={{VendorInformation}}&GroupRequestTargetMembers={{GroupRequestTargetMembers}}&AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}&AuthorizationSignature={{AuthorizationSignature}}&AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}&SemanticQueryIndicator={{SemanticQueryIndicator}}", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"semanticMashupInstanceInfo\": {\n        \"ResponseType\": \"{{ResponseType}}\",\n        \"GroupRequestIdentifier\": \"{{GroupRequestIdentifier}}\",\n        \"ToAddress\": \"{{ToAddress}}\",\n        \"OriginatingTimestamp\": \"{{OriginatingTimestamp}}\",\n        \"TokenRequestIndicator\": \"{{TokenRequestIndicator}}\",\n        \"GroupRequestTargetMembers\": \"{{GroupRequestTargetMembers}}\",\n        \"ResultContent\": \"{{ResultContent}}\",\n        \"SemanticQueryIndicator\": \"{{SemanticQueryIndicator}}\",\n        \"AuthorizationSignature\": \"{{AuthorizationSignature}}\",\n        \"OperationalExecutionTime\": \"{{OperationalExecutionTime}}\",\n        \"FromId\": \"{{FromId}}\",\n        \"RequestId\": \"{{RequestId}}\",\n        \"ReqExpirationTimestamp\": \"{{ReqExpirationTimestamp}}\",\n        \"EventCategory\": \"{{EventCategory}}\",\n        \"TokenIDs\": \"{{TokenIDs}}\",\n        \"RoleIDs\": \"{{RoleIDs}}\",\n        \"Tokens\": \"{{Tokens}}\",\n        \"resourceType\": \"{{resourceType}}\",\n        \"AuthorizationSignatureIndicator\": \"{{AuthorizationSignatureIndicator}}\",\n        \"LocalTokenIDs\": \"{{LocalTokenIDs}}\",\n        \"DeliveryAggregation\": \"{{DeliveryAggregation}}\",\n        \"content\": {\n            \"memberStoreType\": \"{{memberStoreType}}\",\n            \"creator\": \"{{creator}}\",\n            \"accessControlPolicyIDs\": \"{{accessControlPolicyIDs}}\",\n            \"labels\": \"{{labels}}\",\n            \"mashupMember\": \"{{mashupMember}}\",\n            \"smjpInputParameter\": \"{{smjpInputParameter}}\",\n            \"resultGenType\": \"{{resultGenType}}\",\n            \"parentID\": \"{{parentID}}\",\n            \"resourceName\": \"{{resourceName}}\",\n            \"lastModifiedTime\": \"{{lastModifiedTime}}\",\n            \"resourceType\": \"{{resourceType}}\",\n            \"resourceID\": \"{{resourceID}}\",\n            \"announcedAttribute\": \"{{announcedAttribute}}\",\n            \"creationTime\": \"{{creationTime}}\",\n            \"periodForResultGen\": \"{{periodForResultGen}}\",\n            \"announceTo\": \"{{announceTo}}\",\n            \"dynamicAuthorizationConsultationIDs\": \"{{dynamicAuthorizationConsultationIDs}}\",\n            \"expirationTime\": \"{{expirationTime}}\",\n            \"smjpID\": \"{{smjpID}}\"\n        },\n        \"ReleaseVersionIndicator\": \"{{ReleaseVersionIndicator}}\",\n        \"DesiredIdentifierResultType\": \"{{DesiredIdentifierResultType}}\",\n        \"ResExpirationTimestamp\": \"{{ResExpirationTimestamp}}\",\n        \"VendorInformation\": \"{{VendorInformation}}\",\n        \"Operation\": \"{{Operation}}\",\n        \"ResultPersistence\": \"{{ResultPersistence}}\",\n        \"AuthorizationRelationshipIndicator\": \"{{AuthorizationRelationshipIndicator}}\",\n        \"FilterCriteria\": \"{{FilterCriteria}}\"\n    }\n}", 
            "time": 1560229469604, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupInstanceInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberStoreType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"mashupMember\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpInputParameter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resultGenType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"periodForResultGen\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smjpID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['memberStoreType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['mashupMember']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpInputParameter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resultGenType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['periodForResultGen']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['content']['smjpID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupInstanceInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/256?query=/iot3/example/semanticMashupInstance?ToAddress={{ToAddress}}?FromId={{FromId}}?Operation={{Operation}}?RequestId={{RequestId}}?ResourceType={{ResourceType}}?OriginatingTimestamp={{OriginatingTimestamp}}?ReqExpirationTimestamp={{ReqExpirationTimestamp}}?ResExpirationTimestamp={{ResExpirationTimestamp}}?EventCategory={{EventCategory}}?OperationalExecutionTime={{OperationalExecutionTime}}?ResponseType={{ResponseType}}?ResultPersistence={{ResultPersistence}}?ResultContent={{ResultContent}}?DeliveryAggregation={{DeliveryAggregation}}?GroupRequestIdentifier={{GroupRequestIdentifier}}?FilterCriteria={{FilterCriteria}}?DesiredIdentifierResultType={{DesiredIdentifierResultType}}?TokenRequestIndicator={{TokenRequestIndicator}}?Tokens={{Tokens}}?TokenIDs={{TokenIDs}}?RoleIDs={{RoleIDs}}?LocalTokenIDs={{LocalTokenIDs}}?ReleaseVersionIndicator={{ReleaseVersionIndicator}}?VendorInformation={{VendorInformation}}?GroupRequestTargetMembers={{GroupRequestTargetMembers}}?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}?AuthorizationSignature={{AuthorizationSignature}}?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}?SemanticQueryIndicator={{SemanticQueryIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ToAddress\",currentData.ToAddress);", 
                            "    pm.environment.set(\"FromId\",currentData.FromId);", 
                            "    pm.environment.set(\"Operation\",currentData.Operation);", 
                            "    pm.environment.set(\"RequestId\",currentData.RequestId);", 
                            "    pm.environment.set(\"ResourceType\",currentData.ResourceType);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.OriginatingTimestamp);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.ReqExpirationTimestamp);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.ResExpirationTimestamp);", 
                            "    pm.environment.set(\"EventCategory\",currentData.EventCategory);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.OperationalExecutionTime);", 
                            "    pm.environment.set(\"ResponseType\",currentData.ResponseType);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.ResultPersistence);", 
                            "    pm.environment.set(\"ResultContent\",currentData.ResultContent);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.DeliveryAggregation);", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.GroupRequestIdentifier);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.FilterCriteria);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.DesiredIdentifierResultType);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.TokenRequestIndicator);", 
                            "    pm.environment.set(\"Tokens\",currentData.Tokens);", 
                            "    pm.environment.set(\"TokenIDs\",currentData.TokenIDs);", 
                            "    pm.environment.set(\"RoleIDs\",currentData.RoleIDs);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.LocalTokenIDs);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.ReleaseVersionIndicator);", 
                            "    pm.environment.set(\"VendorInformation\",currentData.VendorInformation);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.GroupRequestTargetMembers);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.AuthorizationSignatureIndicator);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.AuthorizationSignature);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.AuthorizationRelationshipIndicator);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.SemanticQueryIndicator);", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.semanticMashupInstanceInfo.GroupRequestIdentifier);", 
                            "    pm.environment.set(\"ToAddress\",currentData.semanticMashupInstanceInfo.ToAddress);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.semanticMashupInstanceInfo.OriginatingTimestamp);", 
                            "    pm.environment.set(\"ResultContent\",currentData.semanticMashupInstanceInfo.ResultContent);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.semanticMashupInstanceInfo.SemanticQueryIndicator);", 
                            "    pm.environment.set(\"EventCategory\",currentData.semanticMashupInstanceInfo.EventCategory);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.semanticMashupInstanceInfo.OperationalExecutionTime);", 
                            "    pm.environment.set(\"expirationTime\",currentData.semanticMashupInstanceInfo.content.expirationTime);", 
                            "    pm.environment.set(\"resultGenType\",currentData.semanticMashupInstanceInfo.content.resultGenType);", 
                            "    pm.environment.set(\"creator\",currentData.semanticMashupInstanceInfo.content.creator);", 
                            "    pm.environment.set(\"resourceType\",currentData.semanticMashupInstanceInfo.content.resourceType);", 
                            "    pm.environment.set(\"accessControlPolicyIDs\",currentData.semanticMashupInstanceInfo.content.accessControlPolicyIDs);", 
                            "    pm.environment.set(\"labels\",currentData.semanticMashupInstanceInfo.content.labels);", 
                            "    pm.environment.set(\"creationTime\",currentData.semanticMashupInstanceInfo.content.creationTime);", 
                            "    pm.environment.set(\"smjpInputParameter\",currentData.semanticMashupInstanceInfo.content.smjpInputParameter);", 
                            "    pm.environment.set(\"mashupMember\",currentData.semanticMashupInstanceInfo.content.mashupMember);", 
                            "    pm.environment.set(\"periodForResultGen\",currentData.semanticMashupInstanceInfo.content.periodForResultGen);", 
                            "    pm.environment.set(\"announceTo\",currentData.semanticMashupInstanceInfo.content.announceTo);", 
                            "    pm.environment.set(\"dynamicAuthorizationConsultationIDs\",currentData.semanticMashupInstanceInfo.content.dynamicAuthorizationConsultationIDs);", 
                            "    pm.environment.set(\"memberStoreType\",currentData.semanticMashupInstanceInfo.content.memberStoreType);", 
                            "    pm.environment.set(\"parentID\",currentData.semanticMashupInstanceInfo.content.parentID);", 
                            "    pm.environment.set(\"announcedAttribute\",currentData.semanticMashupInstanceInfo.content.announcedAttribute);", 
                            "    pm.environment.set(\"resourceName\",currentData.semanticMashupInstanceInfo.content.resourceName);", 
                            "    pm.environment.set(\"lastModifiedTime\",currentData.semanticMashupInstanceInfo.content.lastModifiedTime);", 
                            "    pm.environment.set(\"resourceID\",currentData.semanticMashupInstanceInfo.content.resourceID);", 
                            "    pm.environment.set(\"smjpID\",currentData.semanticMashupInstanceInfo.content.smjpID);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.semanticMashupInstanceInfo.AuthorizationSignatureIndicator);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.semanticMashupInstanceInfo.LocalTokenIDs);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.semanticMashupInstanceInfo.AuthorizationSignature);", 
                            "    pm.environment.set(\"Tokens\",currentData.semanticMashupInstanceInfo.Tokens);", 
                            "    pm.environment.set(\"VendorInformation\",currentData.semanticMashupInstanceInfo.VendorInformation);", 
                            "    pm.environment.set(\"ResponseType\",currentData.semanticMashupInstanceInfo.ResponseType);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.semanticMashupInstanceInfo.TokenRequestIndicator);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.semanticMashupInstanceInfo.GroupRequestTargetMembers);", 
                            "    pm.environment.set(\"FromId\",currentData.semanticMashupInstanceInfo.FromId);", 
                            "    pm.environment.set(\"RequestId\",currentData.semanticMashupInstanceInfo.RequestId);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.semanticMashupInstanceInfo.ReqExpirationTimestamp);", 
                            "    pm.environment.set(\"TokenIDs\",currentData.semanticMashupInstanceInfo.TokenIDs);", 
                            "    pm.environment.set(\"resourceType\",currentData.semanticMashupInstanceInfo.resourceType);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.semanticMashupInstanceInfo.DeliveryAggregation);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.semanticMashupInstanceInfo.ReleaseVersionIndicator);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.semanticMashupInstanceInfo.DesiredIdentifierResultType);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.semanticMashupInstanceInfo.ResExpirationTimestamp);", 
                            "    pm.environment.set(\"RoleIDs\",currentData.semanticMashupInstanceInfo.RoleIDs);", 
                            "    pm.environment.set(\"Operation\",currentData.semanticMashupInstanceInfo.Operation);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.semanticMashupInstanceInfo.ResultPersistence);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.semanticMashupInstanceInfo.AuthorizationRelationshipIndicator);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.semanticMashupInstanceInfo.FilterCriteria);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "PUT", 
            "preRequestScript": "", 
            "data": [], 
            "id": "d8ab8614-43b5-463e-ac4b-1b5b03e535a6255", 
            "description": "This method updates the information about a specific semanticMashupInstanceInfo resource. "
        }, 
        {
            "responses": [], 
            "dataMode": "raw", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?ToAddress={{ToAddress}}&FromId={{FromId}}&Operation={{Operation}}&RequestId={{RequestId}}&ResourceType={{ResourceType}}&OriginatingTimestamp={{OriginatingTimestamp}}&ReqExpirationTimestamp={{ReqExpirationTimestamp}}&ResExpirationTimestamp={{ResExpirationTimestamp}}&EventCategory={{EventCategory}}&OperationalExecutionTime={{OperationalExecutionTime}}&ResponseType={{ResponseType}}&ResultPersistence={{ResultPersistence}}&ResultContent={{ResultContent}}&DeliveryAggregation={{DeliveryAggregation}}&GroupRequestIdentifier={{GroupRequestIdentifier}}&FilterCriteria={{FilterCriteria}}&DesiredIdentifierResultType={{DesiredIdentifierResultType}}&TokenRequestIndicator={{TokenRequestIndicator}}&Tokens={{Tokens}}&TokenIDs={{TokenIDs}}&RoleIDs={{RoleIDs}}&LocalTokenIDs={{LocalTokenIDs}}&ReleaseVersionIndicator={{ReleaseVersionIndicator}}&VendorInformation={{VendorInformation}}&GroupRequestTargetMembers={{GroupRequestTargetMembers}}&AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}&AuthorizationSignature={{AuthorizationSignature}}&AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}&SemanticQueryIndicator={{SemanticQueryIndicator}}", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"ontologyRepositoryInfo\": {\n        \"ResponseType\": \"{{ResponseType}}\",\n        \"GroupRequestIdentifier\": \"{{GroupRequestIdentifier}}\",\n        \"ToAddress\": \"{{ToAddress}}\",\n        \"OriginatingTimestamp\": \"{{OriginatingTimestamp}}\",\n        \"TokenRequestIndicator\": \"{{TokenRequestIndicator}}\",\n        \"GroupRequestTargetMembers\": \"{{GroupRequestTargetMembers}}\",\n        \"ResultContent\": \"{{ResultContent}}\",\n        \"SemanticQueryIndicator\": \"{{SemanticQueryIndicator}}\",\n        \"AuthorizationSignature\": \"{{AuthorizationSignature}}\",\n        \"OperationalExecutionTime\": \"{{OperationalExecutionTime}}\",\n        \"FromId\": \"{{FromId}}\",\n        \"RequestId\": \"{{RequestId}}\",\n        \"ReqExpirationTimestamp\": \"{{ReqExpirationTimestamp}}\",\n        \"EventCategory\": \"{{EventCategory}}\",\n        \"TokenIDs\": \"{{TokenIDs}}\",\n        \"RoleIDs\": \"{{RoleIDs}}\",\n        \"Tokens\": \"{{Tokens}}\",\n        \"resourceType\": \"{{resourceType}}\",\n        \"AuthorizationSignatureIndicator\": \"{{AuthorizationSignatureIndicator}}\",\n        \"LocalTokenIDs\": \"{{LocalTokenIDs}}\",\n        \"DeliveryAggregation\": \"{{DeliveryAggregation}}\",\n        \"content\": {\n            \"creator\": \"{{creator}}\",\n            \"accessControlPolicyIDs\": \"{{accessControlPolicyIDs}}\",\n            \"labels\": \"{{labels}}\",\n            \"creationTime\": \"{{creationTime}}\",\n            \"announceTo\": \"{{announceTo}}\",\n            \"dynamicAuthorizationConsultationIDs\": \"{{dynamicAuthorizationConsultationIDs}}\",\n            \"parentID\": \"{{parentID}}\",\n            \"announcedAttribute\": \"{{announcedAttribute}}\",\n            \"resourceName\": \"{{resourceName}}\",\n            \"expirationTime\": \"{{expirationTime}}\",\n            \"lastModifiedTime\": \"{{lastModifiedTime}}\"\n        },\n        \"ReleaseVersionIndicator\": \"{{ReleaseVersionIndicator}}\",\n        \"DesiredIdentifierResultType\": \"{{DesiredIdentifierResultType}}\",\n        \"ResExpirationTimestamp\": \"{{ResExpirationTimestamp}}\",\n        \"VendorInformation\": \"{{VendorInformation}}\",\n        \"Operation\": \"{{Operation}}\",\n        \"ResultPersistence\": \"{{ResultPersistence}}\",\n        \"AuthorizationRelationshipIndicator\": \"{{AuthorizationRelationshipIndicator}}\",\n        \"FilterCriteria\": \"{{FilterCriteria}}\"\n    }\n}", 
            "time": 1560229469604, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRepositoryInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['ontologyRepositoryInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/257?query=/iot3/example/ontologyRepository?ToAddress={{ToAddress}}?FromId={{FromId}}?Operation={{Operation}}?RequestId={{RequestId}}?ResourceType={{ResourceType}}?OriginatingTimestamp={{OriginatingTimestamp}}?ReqExpirationTimestamp={{ReqExpirationTimestamp}}?ResExpirationTimestamp={{ResExpirationTimestamp}}?EventCategory={{EventCategory}}?OperationalExecutionTime={{OperationalExecutionTime}}?ResponseType={{ResponseType}}?ResultPersistence={{ResultPersistence}}?ResultContent={{ResultContent}}?DeliveryAggregation={{DeliveryAggregation}}?GroupRequestIdentifier={{GroupRequestIdentifier}}?FilterCriteria={{FilterCriteria}}?DesiredIdentifierResultType={{DesiredIdentifierResultType}}?TokenRequestIndicator={{TokenRequestIndicator}}?Tokens={{Tokens}}?TokenIDs={{TokenIDs}}?RoleIDs={{RoleIDs}}?LocalTokenIDs={{LocalTokenIDs}}?ReleaseVersionIndicator={{ReleaseVersionIndicator}}?VendorInformation={{VendorInformation}}?GroupRequestTargetMembers={{GroupRequestTargetMembers}}?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}?AuthorizationSignature={{AuthorizationSignature}}?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}?SemanticQueryIndicator={{SemanticQueryIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ToAddress\",currentData.ToAddress);", 
                            "    pm.environment.set(\"FromId\",currentData.FromId);", 
                            "    pm.environment.set(\"Operation\",currentData.Operation);", 
                            "    pm.environment.set(\"RequestId\",currentData.RequestId);", 
                            "    pm.environment.set(\"ResourceType\",currentData.ResourceType);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.OriginatingTimestamp);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.ReqExpirationTimestamp);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.ResExpirationTimestamp);", 
                            "    pm.environment.set(\"EventCategory\",currentData.EventCategory);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.OperationalExecutionTime);", 
                            "    pm.environment.set(\"ResponseType\",currentData.ResponseType);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.ResultPersistence);", 
                            "    pm.environment.set(\"ResultContent\",currentData.ResultContent);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.DeliveryAggregation);", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.GroupRequestIdentifier);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.FilterCriteria);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.DesiredIdentifierResultType);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.TokenRequestIndicator);", 
                            "    pm.environment.set(\"Tokens\",currentData.Tokens);", 
                            "    pm.environment.set(\"TokenIDs\",currentData.TokenIDs);", 
                            "    pm.environment.set(\"RoleIDs\",currentData.RoleIDs);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.LocalTokenIDs);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.ReleaseVersionIndicator);", 
                            "    pm.environment.set(\"VendorInformation\",currentData.VendorInformation);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.GroupRequestTargetMembers);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.AuthorizationSignatureIndicator);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.AuthorizationSignature);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.AuthorizationRelationshipIndicator);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.SemanticQueryIndicator);", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.ontologyRepositoryInfo.GroupRequestIdentifier);", 
                            "    pm.environment.set(\"ToAddress\",currentData.ontologyRepositoryInfo.ToAddress);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.ontologyRepositoryInfo.OriginatingTimestamp);", 
                            "    pm.environment.set(\"ResultContent\",currentData.ontologyRepositoryInfo.ResultContent);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.ontologyRepositoryInfo.SemanticQueryIndicator);", 
                            "    pm.environment.set(\"EventCategory\",currentData.ontologyRepositoryInfo.EventCategory);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.ontologyRepositoryInfo.OperationalExecutionTime);", 
                            "    pm.environment.set(\"creator\",currentData.ontologyRepositoryInfo.content.creator);", 
                            "    pm.environment.set(\"accessControlPolicyIDs\",currentData.ontologyRepositoryInfo.content.accessControlPolicyIDs);", 
                            "    pm.environment.set(\"labels\",currentData.ontologyRepositoryInfo.content.labels);", 
                            "    pm.environment.set(\"creationTime\",currentData.ontologyRepositoryInfo.content.creationTime);", 
                            "    pm.environment.set(\"announceTo\",currentData.ontologyRepositoryInfo.content.announceTo);", 
                            "    pm.environment.set(\"dynamicAuthorizationConsultationIDs\",currentData.ontologyRepositoryInfo.content.dynamicAuthorizationConsultationIDs);", 
                            "    pm.environment.set(\"parentID\",currentData.ontologyRepositoryInfo.content.parentID);", 
                            "    pm.environment.set(\"announcedAttribute\",currentData.ontologyRepositoryInfo.content.announcedAttribute);", 
                            "    pm.environment.set(\"resourceName\",currentData.ontologyRepositoryInfo.content.resourceName);", 
                            "    pm.environment.set(\"expirationTime\",currentData.ontologyRepositoryInfo.content.expirationTime);", 
                            "    pm.environment.set(\"lastModifiedTime\",currentData.ontologyRepositoryInfo.content.lastModifiedTime);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.ontologyRepositoryInfo.AuthorizationSignatureIndicator);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.ontologyRepositoryInfo.LocalTokenIDs);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.ontologyRepositoryInfo.AuthorizationSignature);", 
                            "    pm.environment.set(\"Tokens\",currentData.ontologyRepositoryInfo.Tokens);", 
                            "    pm.environment.set(\"VendorInformation\",currentData.ontologyRepositoryInfo.VendorInformation);", 
                            "    pm.environment.set(\"ResponseType\",currentData.ontologyRepositoryInfo.ResponseType);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.ontologyRepositoryInfo.TokenRequestIndicator);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.ontologyRepositoryInfo.GroupRequestTargetMembers);", 
                            "    pm.environment.set(\"FromId\",currentData.ontologyRepositoryInfo.FromId);", 
                            "    pm.environment.set(\"RequestId\",currentData.ontologyRepositoryInfo.RequestId);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.ontologyRepositoryInfo.ReqExpirationTimestamp);", 
                            "    pm.environment.set(\"TokenIDs\",currentData.ontologyRepositoryInfo.TokenIDs);", 
                            "    pm.environment.set(\"resourceType\",currentData.ontologyRepositoryInfo.resourceType);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.ontologyRepositoryInfo.DeliveryAggregation);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.ontologyRepositoryInfo.ReleaseVersionIndicator);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.ontologyRepositoryInfo.DesiredIdentifierResultType);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.ontologyRepositoryInfo.ResExpirationTimestamp);", 
                            "    pm.environment.set(\"RoleIDs\",currentData.ontologyRepositoryInfo.RoleIDs);", 
                            "    pm.environment.set(\"Operation\",currentData.ontologyRepositoryInfo.Operation);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.ontologyRepositoryInfo.ResultPersistence);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.ontologyRepositoryInfo.AuthorizationRelationshipIndicator);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.ontologyRepositoryInfo.FilterCriteria);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "PUT", 
            "preRequestScript": "", 
            "data": [], 
            "id": "1421fcfb-ea28-44de-a055-739f58162ea7256", 
            "description": "This method updates the information about a specific ontologyRepositoryInfo resource. "
        }, 
        {
            "responses": [], 
            "dataMode": "raw", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?ToAddress={{ToAddress}}&FromId={{FromId}}&Operation={{Operation}}&RequestId={{RequestId}}&ResourceType={{ResourceType}}&OriginatingTimestamp={{OriginatingTimestamp}}&ReqExpirationTimestamp={{ReqExpirationTimestamp}}&ResExpirationTimestamp={{ResExpirationTimestamp}}&EventCategory={{EventCategory}}&OperationalExecutionTime={{OperationalExecutionTime}}&ResponseType={{ResponseType}}&ResultPersistence={{ResultPersistence}}&ResultContent={{ResultContent}}&DeliveryAggregation={{DeliveryAggregation}}&GroupRequestIdentifier={{GroupRequestIdentifier}}&FilterCriteria={{FilterCriteria}}&DesiredIdentifierResultType={{DesiredIdentifierResultType}}&TokenRequestIndicator={{TokenRequestIndicator}}&Tokens={{Tokens}}&TokenIDs={{TokenIDs}}&RoleIDs={{RoleIDs}}&LocalTokenIDs={{LocalTokenIDs}}&ReleaseVersionIndicator={{ReleaseVersionIndicator}}&VendorInformation={{VendorInformation}}&GroupRequestTargetMembers={{GroupRequestTargetMembers}}&AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}&AuthorizationSignature={{AuthorizationSignature}}&AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}&SemanticQueryIndicator={{SemanticQueryIndicator}}", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"semanticMashupJobProfileInfo\": {\n        \"ResponseType\": \"{{ResponseType}}\",\n        \"GroupRequestIdentifier\": \"{{GroupRequestIdentifier}}\",\n        \"ToAddress\": \"{{ToAddress}}\",\n        \"OriginatingTimestamp\": \"{{OriginatingTimestamp}}\",\n        \"TokenRequestIndicator\": \"{{TokenRequestIndicator}}\",\n        \"GroupRequestTargetMembers\": \"{{GroupRequestTargetMembers}}\",\n        \"ResultContent\": \"{{ResultContent}}\",\n        \"SemanticQueryIndicator\": \"{{SemanticQueryIndicator}}\",\n        \"AuthorizationSignature\": \"{{AuthorizationSignature}}\",\n        \"OperationalExecutionTime\": \"{{OperationalExecutionTime}}\",\n        \"FromId\": \"{{FromId}}\",\n        \"RequestId\": \"{{RequestId}}\",\n        \"ReqExpirationTimestamp\": \"{{ReqExpirationTimestamp}}\",\n        \"EventCategory\": \"{{EventCategory}}\",\n        \"TokenIDs\": \"{{TokenIDs}}\",\n        \"RoleIDs\": \"{{RoleIDs}}\",\n        \"Tokens\": \"{{Tokens}}\",\n        \"resourceType\": \"{{resourceType}}\",\n        \"AuthorizationSignatureIndicator\": \"{{AuthorizationSignatureIndicator}}\",\n        \"LocalTokenIDs\": \"{{LocalTokenIDs}}\",\n        \"DeliveryAggregation\": \"{{DeliveryAggregation}}\",\n        \"content\": {\n            \"smiID\": \"{{smiID}}\",\n            \"creator\": \"{{creator}}\",\n            \"outputDescriptor\": \"{{outputDescriptor}}\",\n            \"accessControlPolicyIDs\": \"{{accessControlPolicyIDs}}\",\n            \"labels\": \"{{labels}}\",\n            \"functionDescriptor\": \"{{functionDescriptor}}\",\n            \"parentID\": \"{{parentID}}\",\n            \"resourceName\": \"{{resourceName}}\",\n            \"lastModifiedTime\": \"{{lastModifiedTime}}\",\n            \"resourceType\": \"{{resourceType}}\",\n            \"resourceID\": \"{{resourceID}}\",\n            \"announcedAttribute\": \"{{announcedAttribute}}\",\n            \"creationTime\": \"{{creationTime}}\",\n            \"memberFilter\": \"{{memberFilter}}\",\n            \"announceTo\": \"{{announceTo}}\",\n            \"inputDescriptor\": \"{{inputDescriptor}}\",\n            \"dynamicAuthorizationConsultationIDs\": \"{{dynamicAuthorizationConsultationIDs}}\",\n            \"expirationTime\": \"{{expirationTime}}\"\n        },\n        \"ReleaseVersionIndicator\": \"{{ReleaseVersionIndicator}}\",\n        \"DesiredIdentifierResultType\": \"{{DesiredIdentifierResultType}}\",\n        \"ResExpirationTimestamp\": \"{{ResExpirationTimestamp}}\",\n        \"VendorInformation\": \"{{VendorInformation}}\",\n        \"Operation\": \"{{Operation}}\",\n        \"ResultPersistence\": \"{{ResultPersistence}}\",\n        \"AuthorizationRelationshipIndicator\": \"{{AuthorizationRelationshipIndicator}}\",\n        \"FilterCriteria\": \"{{FilterCriteria}}\"\n    }\n}", 
            "time": 1560229469605, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticMashupJobProfileInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"smiID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"outputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"functionDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"memberFilter\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"inputDescriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['smiID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['outputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['functionDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['memberFilter']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['inputDescriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticMashupJobProfileInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/258?query=/iot3/example/semanticMashupJobProfile?ToAddress={{ToAddress}}?FromId={{FromId}}?Operation={{Operation}}?RequestId={{RequestId}}?ResourceType={{ResourceType}}?OriginatingTimestamp={{OriginatingTimestamp}}?ReqExpirationTimestamp={{ReqExpirationTimestamp}}?ResExpirationTimestamp={{ResExpirationTimestamp}}?EventCategory={{EventCategory}}?OperationalExecutionTime={{OperationalExecutionTime}}?ResponseType={{ResponseType}}?ResultPersistence={{ResultPersistence}}?ResultContent={{ResultContent}}?DeliveryAggregation={{DeliveryAggregation}}?GroupRequestIdentifier={{GroupRequestIdentifier}}?FilterCriteria={{FilterCriteria}}?DesiredIdentifierResultType={{DesiredIdentifierResultType}}?TokenRequestIndicator={{TokenRequestIndicator}}?Tokens={{Tokens}}?TokenIDs={{TokenIDs}}?RoleIDs={{RoleIDs}}?LocalTokenIDs={{LocalTokenIDs}}?ReleaseVersionIndicator={{ReleaseVersionIndicator}}?VendorInformation={{VendorInformation}}?GroupRequestTargetMembers={{GroupRequestTargetMembers}}?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}?AuthorizationSignature={{AuthorizationSignature}}?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}?SemanticQueryIndicator={{SemanticQueryIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ToAddress\",currentData.ToAddress);", 
                            "    pm.environment.set(\"FromId\",currentData.FromId);", 
                            "    pm.environment.set(\"Operation\",currentData.Operation);", 
                            "    pm.environment.set(\"RequestId\",currentData.RequestId);", 
                            "    pm.environment.set(\"ResourceType\",currentData.ResourceType);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.OriginatingTimestamp);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.ReqExpirationTimestamp);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.ResExpirationTimestamp);", 
                            "    pm.environment.set(\"EventCategory\",currentData.EventCategory);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.OperationalExecutionTime);", 
                            "    pm.environment.set(\"ResponseType\",currentData.ResponseType);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.ResultPersistence);", 
                            "    pm.environment.set(\"ResultContent\",currentData.ResultContent);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.DeliveryAggregation);", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.GroupRequestIdentifier);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.FilterCriteria);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.DesiredIdentifierResultType);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.TokenRequestIndicator);", 
                            "    pm.environment.set(\"Tokens\",currentData.Tokens);", 
                            "    pm.environment.set(\"TokenIDs\",currentData.TokenIDs);", 
                            "    pm.environment.set(\"RoleIDs\",currentData.RoleIDs);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.LocalTokenIDs);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.ReleaseVersionIndicator);", 
                            "    pm.environment.set(\"VendorInformation\",currentData.VendorInformation);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.GroupRequestTargetMembers);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.AuthorizationSignatureIndicator);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.AuthorizationSignature);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.AuthorizationRelationshipIndicator);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.SemanticQueryIndicator);", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.semanticMashupJobProfileInfo.GroupRequestIdentifier);", 
                            "    pm.environment.set(\"ToAddress\",currentData.semanticMashupJobProfileInfo.ToAddress);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.semanticMashupJobProfileInfo.OriginatingTimestamp);", 
                            "    pm.environment.set(\"ResultContent\",currentData.semanticMashupJobProfileInfo.ResultContent);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.semanticMashupJobProfileInfo.SemanticQueryIndicator);", 
                            "    pm.environment.set(\"EventCategory\",currentData.semanticMashupJobProfileInfo.EventCategory);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.semanticMashupJobProfileInfo.OperationalExecutionTime);", 
                            "    pm.environment.set(\"resourceType\",currentData.semanticMashupJobProfileInfo.content.resourceType);", 
                            "    pm.environment.set(\"smiID\",currentData.semanticMashupJobProfileInfo.content.smiID);", 
                            "    pm.environment.set(\"inputDescriptor\",currentData.semanticMashupJobProfileInfo.content.inputDescriptor);", 
                            "    pm.environment.set(\"creator\",currentData.semanticMashupJobProfileInfo.content.creator);", 
                            "    pm.environment.set(\"outputDescriptor\",currentData.semanticMashupJobProfileInfo.content.outputDescriptor);", 
                            "    pm.environment.set(\"accessControlPolicyIDs\",currentData.semanticMashupJobProfileInfo.content.accessControlPolicyIDs);", 
                            "    pm.environment.set(\"labels\",currentData.semanticMashupJobProfileInfo.content.labels);", 
                            "    pm.environment.set(\"creationTime\",currentData.semanticMashupJobProfileInfo.content.creationTime);", 
                            "    pm.environment.set(\"memberFilter\",currentData.semanticMashupJobProfileInfo.content.memberFilter);", 
                            "    pm.environment.set(\"announceTo\",currentData.semanticMashupJobProfileInfo.content.announceTo);", 
                            "    pm.environment.set(\"functionDescriptor\",currentData.semanticMashupJobProfileInfo.content.functionDescriptor);", 
                            "    pm.environment.set(\"dynamicAuthorizationConsultationIDs\",currentData.semanticMashupJobProfileInfo.content.dynamicAuthorizationConsultationIDs);", 
                            "    pm.environment.set(\"parentID\",currentData.semanticMashupJobProfileInfo.content.parentID);", 
                            "    pm.environment.set(\"announcedAttribute\",currentData.semanticMashupJobProfileInfo.content.announcedAttribute);", 
                            "    pm.environment.set(\"resourceName\",currentData.semanticMashupJobProfileInfo.content.resourceName);", 
                            "    pm.environment.set(\"lastModifiedTime\",currentData.semanticMashupJobProfileInfo.content.lastModifiedTime);", 
                            "    pm.environment.set(\"expirationTime\",currentData.semanticMashupJobProfileInfo.content.expirationTime);", 
                            "    pm.environment.set(\"resourceID\",currentData.semanticMashupJobProfileInfo.content.resourceID);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.semanticMashupJobProfileInfo.AuthorizationSignatureIndicator);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.semanticMashupJobProfileInfo.LocalTokenIDs);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.semanticMashupJobProfileInfo.AuthorizationSignature);", 
                            "    pm.environment.set(\"Tokens\",currentData.semanticMashupJobProfileInfo.Tokens);", 
                            "    pm.environment.set(\"VendorInformation\",currentData.semanticMashupJobProfileInfo.VendorInformation);", 
                            "    pm.environment.set(\"ResponseType\",currentData.semanticMashupJobProfileInfo.ResponseType);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.semanticMashupJobProfileInfo.TokenRequestIndicator);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.semanticMashupJobProfileInfo.GroupRequestTargetMembers);", 
                            "    pm.environment.set(\"FromId\",currentData.semanticMashupJobProfileInfo.FromId);", 
                            "    pm.environment.set(\"RequestId\",currentData.semanticMashupJobProfileInfo.RequestId);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.semanticMashupJobProfileInfo.ReqExpirationTimestamp);", 
                            "    pm.environment.set(\"TokenIDs\",currentData.semanticMashupJobProfileInfo.TokenIDs);", 
                            "    pm.environment.set(\"resourceType\",currentData.semanticMashupJobProfileInfo.resourceType);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.semanticMashupJobProfileInfo.DeliveryAggregation);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.semanticMashupJobProfileInfo.ReleaseVersionIndicator);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.semanticMashupJobProfileInfo.DesiredIdentifierResultType);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.semanticMashupJobProfileInfo.ResExpirationTimestamp);", 
                            "    pm.environment.set(\"RoleIDs\",currentData.semanticMashupJobProfileInfo.RoleIDs);", 
                            "    pm.environment.set(\"Operation\",currentData.semanticMashupJobProfileInfo.Operation);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.semanticMashupJobProfileInfo.ResultPersistence);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.semanticMashupJobProfileInfo.AuthorizationRelationshipIndicator);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.semanticMashupJobProfileInfo.FilterCriteria);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "PUT", 
            "preRequestScript": "", 
            "data": [], 
            "id": "1735b70b-992f-4e85-9e1a-81d4b3c01bf9257", 
            "description": "This method updates the information about a specific semanticMashupJobProfileInfo resource. "
        }, 
        {
            "responses": [], 
            "dataMode": "raw", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?ToAddress={{ToAddress}}&FromId={{FromId}}&Operation={{Operation}}&RequestId={{RequestId}}&ResourceType={{ResourceType}}&OriginatingTimestamp={{OriginatingTimestamp}}&ReqExpirationTimestamp={{ReqExpirationTimestamp}}&ResExpirationTimestamp={{ResExpirationTimestamp}}&EventCategory={{EventCategory}}&OperationalExecutionTime={{OperationalExecutionTime}}&ResponseType={{ResponseType}}&ResultPersistence={{ResultPersistence}}&ResultContent={{ResultContent}}&DeliveryAggregation={{DeliveryAggregation}}&GroupRequestIdentifier={{GroupRequestIdentifier}}&FilterCriteria={{FilterCriteria}}&DesiredIdentifierResultType={{DesiredIdentifierResultType}}&TokenRequestIndicator={{TokenRequestIndicator}}&Tokens={{Tokens}}&TokenIDs={{TokenIDs}}&RoleIDs={{RoleIDs}}&LocalTokenIDs={{LocalTokenIDs}}&ReleaseVersionIndicator={{ReleaseVersionIndicator}}&VendorInformation={{VendorInformation}}&GroupRequestTargetMembers={{GroupRequestTargetMembers}}&AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}&AuthorizationSignature={{AuthorizationSignature}}&AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}&SemanticQueryIndicator={{SemanticQueryIndicator}}", 
            "name": "TC_200", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": "{\n    \"semanticDescriptorInfo\": {\n        \"ResponseType\": \"{{ResponseType}}\",\n        \"GroupRequestIdentifier\": \"{{GroupRequestIdentifier}}\",\n        \"ToAddress\": \"{{ToAddress}}\",\n        \"OriginatingTimestamp\": \"{{OriginatingTimestamp}}\",\n        \"TokenRequestIndicator\": \"{{TokenRequestIndicator}}\",\n        \"GroupRequestTargetMembers\": \"{{GroupRequestTargetMembers}}\",\n        \"ResultContent\": \"{{ResultContent}}\",\n        \"SemanticQueryIndicator\": \"{{SemanticQueryIndicator}}\",\n        \"AuthorizationSignature\": \"{{AuthorizationSignature}}\",\n        \"OperationalExecutionTime\": \"{{OperationalExecutionTime}}\",\n        \"FromId\": \"{{FromId}}\",\n        \"RequestId\": \"{{RequestId}}\",\n        \"ReqExpirationTimestamp\": \"{{ReqExpirationTimestamp}}\",\n        \"EventCategory\": \"{{EventCategory}}\",\n        \"TokenIDs\": \"{{TokenIDs}}\",\n        \"RoleIDs\": \"{{RoleIDs}}\",\n        \"Tokens\": \"{{Tokens}}\",\n        \"resourceType\": \"{{resourceType}}\",\n        \"AuthorizationSignatureIndicator\": \"{{AuthorizationSignatureIndicator}}\",\n        \"LocalTokenIDs\": \"{{LocalTokenIDs}}\",\n        \"DeliveryAggregation\": \"{{DeliveryAggregation}}\",\n        \"content\": {\n            \"ontologyRef\": \"{{ontologyRef}}\",\n            \"creator\": \"{{creator}}\",\n            \"accessControlPolicyIDs\": \"{{accessControlPolicyIDs}}\",\n            \"labels\": \"{{labels}}\",\n            \"semanticOpExec\": \"{{semanticOpExec}}\",\n            \"validationEnable\": \"{{validationEnable}}\",\n            \"parentID\": \"{{parentID}}\",\n            \"resourceName\": \"{{resourceName}}\",\n            \"lastModifiedTime\": \"{{lastModifiedTime}}\",\n            \"descriptorRepresentation\": \"{{descriptorRepresentation}}\",\n            \"resourceType\": \"{{resourceType}}\",\n            \"relatedSemantics\": \"{{relatedSemantics}}\",\n            \"resourceID\": \"{{resourceID}}\",\n            \"announcedAttribute\": \"{{announcedAttribute}}\",\n            \"creationTime\": \"{{creationTime}}\",\n            \"announceTo\": \"{{announceTo}}\",\n            \"descriptor\": \"{{descriptor}}\",\n            \"dynamicAuthorizationConsultationIDs\": \"{{dynamicAuthorizationConsultationIDs}}\",\n            \"semanticValidated\": \"{{semanticValidated}}\",\n            \"expirationTime\": \"{{expirationTime}}\"\n        },\n        \"ReleaseVersionIndicator\": \"{{ReleaseVersionIndicator}}\",\n        \"DesiredIdentifierResultType\": \"{{DesiredIdentifierResultType}}\",\n        \"ResExpirationTimestamp\": \"{{ResExpirationTimestamp}}\",\n        \"VendorInformation\": \"{{VendorInformation}}\",\n        \"Operation\": \"{{Operation}}\",\n        \"ResultPersistence\": \"{{ResultPersistence}}\",\n        \"AuthorizationRelationshipIndicator\": \"{{AuthorizationRelationshipIndicator}}\",\n        \"FilterCriteria\": \"{{FilterCriteria}}\"\n    }\n}", 
            "time": 1560229469605, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "var jsonData = pm.response.json();", 
                            "pm.test(\"Status code is -  \"+ jsonData['statuscode'] , function() {", 
                            "    pm.expect(jsonData['statuscode']).to.be.eql(200)", 
                            "});", 
                            "", 
                            "pm.test(\"Body matches string\", function () {", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticDescriptorInfo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResponseType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestIdentifier\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ToAddress\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OriginatingTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenRequestIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"GroupRequestTargetMembers\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultContent\");", 
                            "    pm.expect(pm.response.text()).to.include(\"SemanticQueryIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignature\");", 
                            "    pm.expect(pm.response.text()).to.include(\"OperationalExecutionTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FromId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RequestId\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReqExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"EventCategory\");", 
                            "    pm.expect(pm.response.text()).to.include(\"TokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"RoleIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Tokens\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationSignatureIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"LocalTokenIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DeliveryAggregation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"content\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ontologyRef\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"accessControlPolicyIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"labels\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticOpExec\");", 
                            "    pm.expect(pm.response.text()).to.include(\"validationEnable\");", 
                            "    pm.expect(pm.response.text()).to.include(\"parentID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceName\");", 
                            "    pm.expect(pm.response.text()).to.include(\"lastModifiedTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptorRepresentation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"relatedSemantics\");", 
                            "    pm.expect(pm.response.text()).to.include(\"resourceID\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announcedAttribute\");", 
                            "    pm.expect(pm.response.text()).to.include(\"creationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"announceTo\");", 
                            "    pm.expect(pm.response.text()).to.include(\"descriptor\");", 
                            "    pm.expect(pm.response.text()).to.include(\"dynamicAuthorizationConsultationIDs\");", 
                            "    pm.expect(pm.response.text()).to.include(\"semanticValidated\");", 
                            "    pm.expect(pm.response.text()).to.include(\"expirationTime\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ReleaseVersionIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"DesiredIdentifierResultType\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResExpirationTimestamp\");", 
                            "    pm.expect(pm.response.text()).to.include(\"VendorInformation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"Operation\");", 
                            "    pm.expect(pm.response.text()).to.include(\"ResultPersistence\");", 
                            "    pm.expect(pm.response.text()).to.include(\"AuthorizationRelationshipIndicator\");", 
                            "    pm.expect(pm.response.text()).to.include(\"FilterCriteria\");", 
                            "});", 
                            "", 
                            "pm.test(\"isString\" ,function() {", 
                            "    if  (pm.response.json().res){", 
                            "        jsonData = pm.response.json().res; \n    }", 
                            "    else{", 
                            "        var jsonData = [pm.response.json()];\n    }", 
                            "    for (i = 0; i < jsonData.length; i++) {", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResponseType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestIdentifier']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ToAddress']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OriginatingTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenRequestIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['GroupRequestTargetMembers']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultContent']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['SemanticQueryIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignature']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['OperationalExecutionTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FromId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RequestId']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReqExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['EventCategory']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['TokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['RoleIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Tokens']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationSignatureIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['LocalTokenIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DeliveryAggregation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['ontologyRef']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['accessControlPolicyIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['labels']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticOpExec']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['validationEnable']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['parentID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceName']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['lastModifiedTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptorRepresentation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['relatedSemantics']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['resourceID']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announcedAttribute']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['creationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['announceTo']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['descriptor']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['dynamicAuthorizationConsultationIDs']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['semanticValidated']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['content']['expirationTime']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ReleaseVersionIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['DesiredIdentifierResultType']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResExpirationTimestamp']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['VendorInformation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['Operation']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['ResultPersistence']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['AuthorizationRelationshipIndicator']).to.not.be.a('number');", 
                            "        pm.expect(jsonData[i]['semanticDescriptorInfo']['FilterCriteria']).to.not.be.a('number');", 
                            "    }", 
                            "})"
                        ]
                    }, 
                    "listen": "test"
                }, 
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/259?query=/iot3/example/semanticDescriptor?ToAddress={{ToAddress}}?FromId={{FromId}}?Operation={{Operation}}?RequestId={{RequestId}}?ResourceType={{ResourceType}}?OriginatingTimestamp={{OriginatingTimestamp}}?ReqExpirationTimestamp={{ReqExpirationTimestamp}}?ResExpirationTimestamp={{ResExpirationTimestamp}}?EventCategory={{EventCategory}}?OperationalExecutionTime={{OperationalExecutionTime}}?ResponseType={{ResponseType}}?ResultPersistence={{ResultPersistence}}?ResultContent={{ResultContent}}?DeliveryAggregation={{DeliveryAggregation}}?GroupRequestIdentifier={{GroupRequestIdentifier}}?FilterCriteria={{FilterCriteria}}?DesiredIdentifierResultType={{DesiredIdentifierResultType}}?TokenRequestIndicator={{TokenRequestIndicator}}?Tokens={{Tokens}}?TokenIDs={{TokenIDs}}?RoleIDs={{RoleIDs}}?LocalTokenIDs={{LocalTokenIDs}}?ReleaseVersionIndicator={{ReleaseVersionIndicator}}?VendorInformation={{VendorInformation}}?GroupRequestTargetMembers={{GroupRequestTargetMembers}}?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}?AuthorizationSignature={{AuthorizationSignature}}?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}?SemanticQueryIndicator={{SemanticQueryIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ToAddress\",currentData.ToAddress);", 
                            "    pm.environment.set(\"FromId\",currentData.FromId);", 
                            "    pm.environment.set(\"Operation\",currentData.Operation);", 
                            "    pm.environment.set(\"RequestId\",currentData.RequestId);", 
                            "    pm.environment.set(\"ResourceType\",currentData.ResourceType);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.OriginatingTimestamp);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.ReqExpirationTimestamp);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.ResExpirationTimestamp);", 
                            "    pm.environment.set(\"EventCategory\",currentData.EventCategory);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.OperationalExecutionTime);", 
                            "    pm.environment.set(\"ResponseType\",currentData.ResponseType);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.ResultPersistence);", 
                            "    pm.environment.set(\"ResultContent\",currentData.ResultContent);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.DeliveryAggregation);", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.GroupRequestIdentifier);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.FilterCriteria);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.DesiredIdentifierResultType);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.TokenRequestIndicator);", 
                            "    pm.environment.set(\"Tokens\",currentData.Tokens);", 
                            "    pm.environment.set(\"TokenIDs\",currentData.TokenIDs);", 
                            "    pm.environment.set(\"RoleIDs\",currentData.RoleIDs);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.LocalTokenIDs);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.ReleaseVersionIndicator);", 
                            "    pm.environment.set(\"VendorInformation\",currentData.VendorInformation);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.GroupRequestTargetMembers);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.AuthorizationSignatureIndicator);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.AuthorizationSignature);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.AuthorizationRelationshipIndicator);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.SemanticQueryIndicator);", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.semanticDescriptorInfo.GroupRequestIdentifier);", 
                            "    pm.environment.set(\"ToAddress\",currentData.semanticDescriptorInfo.ToAddress);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.semanticDescriptorInfo.OriginatingTimestamp);", 
                            "    pm.environment.set(\"ResultContent\",currentData.semanticDescriptorInfo.ResultContent);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.semanticDescriptorInfo.SemanticQueryIndicator);", 
                            "    pm.environment.set(\"EventCategory\",currentData.semanticDescriptorInfo.EventCategory);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.semanticDescriptorInfo.OperationalExecutionTime);", 
                            "    pm.environment.set(\"ontologyRef\",currentData.semanticDescriptorInfo.content.ontologyRef);", 
                            "    pm.environment.set(\"expirationTime\",currentData.semanticDescriptorInfo.content.expirationTime);", 
                            "    pm.environment.set(\"creator\",currentData.semanticDescriptorInfo.content.creator);", 
                            "    pm.environment.set(\"resourceType\",currentData.semanticDescriptorInfo.content.resourceType);", 
                            "    pm.environment.set(\"accessControlPolicyIDs\",currentData.semanticDescriptorInfo.content.accessControlPolicyIDs);", 
                            "    pm.environment.set(\"labels\",currentData.semanticDescriptorInfo.content.labels);", 
                            "    pm.environment.set(\"semanticOpExec\",currentData.semanticDescriptorInfo.content.semanticOpExec);", 
                            "    pm.environment.set(\"descriptor\",currentData.semanticDescriptorInfo.content.descriptor);", 
                            "    pm.environment.set(\"creationTime\",currentData.semanticDescriptorInfo.content.creationTime);", 
                            "    pm.environment.set(\"announceTo\",currentData.semanticDescriptorInfo.content.announceTo);", 
                            "    pm.environment.set(\"relatedSemantics\",currentData.semanticDescriptorInfo.content.relatedSemantics);", 
                            "    pm.environment.set(\"dynamicAuthorizationConsultationIDs\",currentData.semanticDescriptorInfo.content.dynamicAuthorizationConsultationIDs);", 
                            "    pm.environment.set(\"validationEnable\",currentData.semanticDescriptorInfo.content.validationEnable);", 
                            "    pm.environment.set(\"parentID\",currentData.semanticDescriptorInfo.content.parentID);", 
                            "    pm.environment.set(\"announcedAttribute\",currentData.semanticDescriptorInfo.content.announcedAttribute);", 
                            "    pm.environment.set(\"resourceName\",currentData.semanticDescriptorInfo.content.resourceName);", 
                            "    pm.environment.set(\"lastModifiedTime\",currentData.semanticDescriptorInfo.content.lastModifiedTime);", 
                            "    pm.environment.set(\"resourceID\",currentData.semanticDescriptorInfo.content.resourceID);", 
                            "    pm.environment.set(\"descriptorRepresentation\",currentData.semanticDescriptorInfo.content.descriptorRepresentation);", 
                            "    pm.environment.set(\"semanticValidated\",currentData.semanticDescriptorInfo.content.semanticValidated);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.semanticDescriptorInfo.AuthorizationSignatureIndicator);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.semanticDescriptorInfo.LocalTokenIDs);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.semanticDescriptorInfo.AuthorizationSignature);", 
                            "    pm.environment.set(\"Tokens\",currentData.semanticDescriptorInfo.Tokens);", 
                            "    pm.environment.set(\"VendorInformation\",currentData.semanticDescriptorInfo.VendorInformation);", 
                            "    pm.environment.set(\"ResponseType\",currentData.semanticDescriptorInfo.ResponseType);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.semanticDescriptorInfo.TokenRequestIndicator);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.semanticDescriptorInfo.GroupRequestTargetMembers);", 
                            "    pm.environment.set(\"FromId\",currentData.semanticDescriptorInfo.FromId);", 
                            "    pm.environment.set(\"RequestId\",currentData.semanticDescriptorInfo.RequestId);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.semanticDescriptorInfo.ReqExpirationTimestamp);", 
                            "    pm.environment.set(\"TokenIDs\",currentData.semanticDescriptorInfo.TokenIDs);", 
                            "    pm.environment.set(\"resourceType\",currentData.semanticDescriptorInfo.resourceType);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.semanticDescriptorInfo.DeliveryAggregation);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.semanticDescriptorInfo.ReleaseVersionIndicator);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.semanticDescriptorInfo.DesiredIdentifierResultType);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.semanticDescriptorInfo.ResExpirationTimestamp);", 
                            "    pm.environment.set(\"RoleIDs\",currentData.semanticDescriptorInfo.RoleIDs);", 
                            "    pm.environment.set(\"Operation\",currentData.semanticDescriptorInfo.Operation);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.semanticDescriptorInfo.ResultPersistence);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.semanticDescriptorInfo.AuthorizationRelationshipIndicator);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.semanticDescriptorInfo.FilterCriteria);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "PUT", 
            "preRequestScript": "", 
            "data": [], 
            "id": "9e441758-b2cb-44d5-90a4-12ac2b784b4d258", 
            "description": "This method updates the information about a specific semanticDescriptorInfo resource. "
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupResult?ToAddress={{ToAddress}}&FromId={{FromId}}&Operation={{Operation}}&RequestId={{RequestId}}&ResourceType={{ResourceType}}&OriginatingTimestamp={{OriginatingTimestamp}}&ReqExpirationTimestamp={{ReqExpirationTimestamp}}&ResExpirationTimestamp={{ResExpirationTimestamp}}&EventCategory={{EventCategory}}&OperationalExecutionTime={{OperationalExecutionTime}}&ResponseType={{ResponseType}}&ResultPersistence={{ResultPersistence}}&ResultContent={{ResultContent}}&DeliveryAggregation={{DeliveryAggregation}}&GroupRequestIdentifier={{GroupRequestIdentifier}}&FilterCriteria={{FilterCriteria}}&DesiredIdentifierResultType={{DesiredIdentifierResultType}}&TokenRequestIndicator={{TokenRequestIndicator}}&Tokens={{Tokens}}&TokenIDs={{TokenIDs}}&RoleIDs={{RoleIDs}}&LocalTokenIDs={{LocalTokenIDs}}&ReleaseVersionIndicator={{ReleaseVersionIndicator}}&VendorInformation={{VendorInformation}}&GroupRequestTargetMembers={{GroupRequestTargetMembers}}&AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}&AuthorizationSignature={{AuthorizationSignature}}&AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}&SemanticQueryIndicator={{SemanticQueryIndicator}}", 
            "name": "TC_204", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/260?query=/iot3/example/semanticMashupResult?ToAddress={{ToAddress}}?FromId={{FromId}}?Operation={{Operation}}?RequestId={{RequestId}}?ResourceType={{ResourceType}}?OriginatingTimestamp={{OriginatingTimestamp}}?ReqExpirationTimestamp={{ReqExpirationTimestamp}}?ResExpirationTimestamp={{ResExpirationTimestamp}}?EventCategory={{EventCategory}}?OperationalExecutionTime={{OperationalExecutionTime}}?ResponseType={{ResponseType}}?ResultPersistence={{ResultPersistence}}?ResultContent={{ResultContent}}?DeliveryAggregation={{DeliveryAggregation}}?GroupRequestIdentifier={{GroupRequestIdentifier}}?FilterCriteria={{FilterCriteria}}?DesiredIdentifierResultType={{DesiredIdentifierResultType}}?TokenRequestIndicator={{TokenRequestIndicator}}?Tokens={{Tokens}}?TokenIDs={{TokenIDs}}?RoleIDs={{RoleIDs}}?LocalTokenIDs={{LocalTokenIDs}}?ReleaseVersionIndicator={{ReleaseVersionIndicator}}?VendorInformation={{VendorInformation}}?GroupRequestTargetMembers={{GroupRequestTargetMembers}}?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}?AuthorizationSignature={{AuthorizationSignature}}?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}?SemanticQueryIndicator={{SemanticQueryIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ToAddress\",currentData.ToAddress);", 
                            "    pm.environment.set(\"FromId\",currentData.FromId);", 
                            "    pm.environment.set(\"Operation\",currentData.Operation);", 
                            "    pm.environment.set(\"RequestId\",currentData.RequestId);", 
                            "    pm.environment.set(\"ResourceType\",currentData.ResourceType);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.OriginatingTimestamp);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.ReqExpirationTimestamp);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.ResExpirationTimestamp);", 
                            "    pm.environment.set(\"EventCategory\",currentData.EventCategory);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.OperationalExecutionTime);", 
                            "    pm.environment.set(\"ResponseType\",currentData.ResponseType);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.ResultPersistence);", 
                            "    pm.environment.set(\"ResultContent\",currentData.ResultContent);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.DeliveryAggregation);", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.GroupRequestIdentifier);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.FilterCriteria);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.DesiredIdentifierResultType);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.TokenRequestIndicator);", 
                            "    pm.environment.set(\"Tokens\",currentData.Tokens);", 
                            "    pm.environment.set(\"TokenIDs\",currentData.TokenIDs);", 
                            "    pm.environment.set(\"RoleIDs\",currentData.RoleIDs);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.LocalTokenIDs);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.ReleaseVersionIndicator);", 
                            "    pm.environment.set(\"VendorInformation\",currentData.VendorInformation);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.GroupRequestTargetMembers);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.AuthorizationSignatureIndicator);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.AuthorizationSignature);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.AuthorizationRelationshipIndicator);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.SemanticQueryIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "DELETE", 
            "preRequestScript": "", 
            "data": [], 
            "id": "dbf582e9-bdfa-48fd-959c-5c09ed198690259", 
            "description": "This method delete the information about a specific semanticMashupResultInfo resource. "
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontology?ToAddress={{ToAddress}}&FromId={{FromId}}&Operation={{Operation}}&RequestId={{RequestId}}&ResourceType={{ResourceType}}&OriginatingTimestamp={{OriginatingTimestamp}}&ReqExpirationTimestamp={{ReqExpirationTimestamp}}&ResExpirationTimestamp={{ResExpirationTimestamp}}&EventCategory={{EventCategory}}&OperationalExecutionTime={{OperationalExecutionTime}}&ResponseType={{ResponseType}}&ResultPersistence={{ResultPersistence}}&ResultContent={{ResultContent}}&DeliveryAggregation={{DeliveryAggregation}}&GroupRequestIdentifier={{GroupRequestIdentifier}}&FilterCriteria={{FilterCriteria}}&DesiredIdentifierResultType={{DesiredIdentifierResultType}}&TokenRequestIndicator={{TokenRequestIndicator}}&Tokens={{Tokens}}&TokenIDs={{TokenIDs}}&RoleIDs={{RoleIDs}}&LocalTokenIDs={{LocalTokenIDs}}&ReleaseVersionIndicator={{ReleaseVersionIndicator}}&VendorInformation={{VendorInformation}}&GroupRequestTargetMembers={{GroupRequestTargetMembers}}&AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}&AuthorizationSignature={{AuthorizationSignature}}&AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}&SemanticQueryIndicator={{SemanticQueryIndicator}}", 
            "name": "TC_204", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469603, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/261?query=/iot3/example/ontology?ToAddress={{ToAddress}}?FromId={{FromId}}?Operation={{Operation}}?RequestId={{RequestId}}?ResourceType={{ResourceType}}?OriginatingTimestamp={{OriginatingTimestamp}}?ReqExpirationTimestamp={{ReqExpirationTimestamp}}?ResExpirationTimestamp={{ResExpirationTimestamp}}?EventCategory={{EventCategory}}?OperationalExecutionTime={{OperationalExecutionTime}}?ResponseType={{ResponseType}}?ResultPersistence={{ResultPersistence}}?ResultContent={{ResultContent}}?DeliveryAggregation={{DeliveryAggregation}}?GroupRequestIdentifier={{GroupRequestIdentifier}}?FilterCriteria={{FilterCriteria}}?DesiredIdentifierResultType={{DesiredIdentifierResultType}}?TokenRequestIndicator={{TokenRequestIndicator}}?Tokens={{Tokens}}?TokenIDs={{TokenIDs}}?RoleIDs={{RoleIDs}}?LocalTokenIDs={{LocalTokenIDs}}?ReleaseVersionIndicator={{ReleaseVersionIndicator}}?VendorInformation={{VendorInformation}}?GroupRequestTargetMembers={{GroupRequestTargetMembers}}?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}?AuthorizationSignature={{AuthorizationSignature}}?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}?SemanticQueryIndicator={{SemanticQueryIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ToAddress\",currentData.ToAddress);", 
                            "    pm.environment.set(\"FromId\",currentData.FromId);", 
                            "    pm.environment.set(\"Operation\",currentData.Operation);", 
                            "    pm.environment.set(\"RequestId\",currentData.RequestId);", 
                            "    pm.environment.set(\"ResourceType\",currentData.ResourceType);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.OriginatingTimestamp);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.ReqExpirationTimestamp);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.ResExpirationTimestamp);", 
                            "    pm.environment.set(\"EventCategory\",currentData.EventCategory);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.OperationalExecutionTime);", 
                            "    pm.environment.set(\"ResponseType\",currentData.ResponseType);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.ResultPersistence);", 
                            "    pm.environment.set(\"ResultContent\",currentData.ResultContent);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.DeliveryAggregation);", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.GroupRequestIdentifier);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.FilterCriteria);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.DesiredIdentifierResultType);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.TokenRequestIndicator);", 
                            "    pm.environment.set(\"Tokens\",currentData.Tokens);", 
                            "    pm.environment.set(\"TokenIDs\",currentData.TokenIDs);", 
                            "    pm.environment.set(\"RoleIDs\",currentData.RoleIDs);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.LocalTokenIDs);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.ReleaseVersionIndicator);", 
                            "    pm.environment.set(\"VendorInformation\",currentData.VendorInformation);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.GroupRequestTargetMembers);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.AuthorizationSignatureIndicator);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.AuthorizationSignature);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.AuthorizationRelationshipIndicator);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.SemanticQueryIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "DELETE", 
            "preRequestScript": "", 
            "data": [], 
            "id": "57d0a782-ad66-4bf8-8daf-9ebf9f547910260", 
            "description": "This method delete the information about a specific ontologyInfo resource. "
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupInstance?ToAddress={{ToAddress}}&FromId={{FromId}}&Operation={{Operation}}&RequestId={{RequestId}}&ResourceType={{ResourceType}}&OriginatingTimestamp={{OriginatingTimestamp}}&ReqExpirationTimestamp={{ReqExpirationTimestamp}}&ResExpirationTimestamp={{ResExpirationTimestamp}}&EventCategory={{EventCategory}}&OperationalExecutionTime={{OperationalExecutionTime}}&ResponseType={{ResponseType}}&ResultPersistence={{ResultPersistence}}&ResultContent={{ResultContent}}&DeliveryAggregation={{DeliveryAggregation}}&GroupRequestIdentifier={{GroupRequestIdentifier}}&FilterCriteria={{FilterCriteria}}&DesiredIdentifierResultType={{DesiredIdentifierResultType}}&TokenRequestIndicator={{TokenRequestIndicator}}&Tokens={{Tokens}}&TokenIDs={{TokenIDs}}&RoleIDs={{RoleIDs}}&LocalTokenIDs={{LocalTokenIDs}}&ReleaseVersionIndicator={{ReleaseVersionIndicator}}&VendorInformation={{VendorInformation}}&GroupRequestTargetMembers={{GroupRequestTargetMembers}}&AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}&AuthorizationSignature={{AuthorizationSignature}}&AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}&SemanticQueryIndicator={{SemanticQueryIndicator}}", 
            "name": "TC_204", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/262?query=/iot3/example/semanticMashupInstance?ToAddress={{ToAddress}}?FromId={{FromId}}?Operation={{Operation}}?RequestId={{RequestId}}?ResourceType={{ResourceType}}?OriginatingTimestamp={{OriginatingTimestamp}}?ReqExpirationTimestamp={{ReqExpirationTimestamp}}?ResExpirationTimestamp={{ResExpirationTimestamp}}?EventCategory={{EventCategory}}?OperationalExecutionTime={{OperationalExecutionTime}}?ResponseType={{ResponseType}}?ResultPersistence={{ResultPersistence}}?ResultContent={{ResultContent}}?DeliveryAggregation={{DeliveryAggregation}}?GroupRequestIdentifier={{GroupRequestIdentifier}}?FilterCriteria={{FilterCriteria}}?DesiredIdentifierResultType={{DesiredIdentifierResultType}}?TokenRequestIndicator={{TokenRequestIndicator}}?Tokens={{Tokens}}?TokenIDs={{TokenIDs}}?RoleIDs={{RoleIDs}}?LocalTokenIDs={{LocalTokenIDs}}?ReleaseVersionIndicator={{ReleaseVersionIndicator}}?VendorInformation={{VendorInformation}}?GroupRequestTargetMembers={{GroupRequestTargetMembers}}?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}?AuthorizationSignature={{AuthorizationSignature}}?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}?SemanticQueryIndicator={{SemanticQueryIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ToAddress\",currentData.ToAddress);", 
                            "    pm.environment.set(\"FromId\",currentData.FromId);", 
                            "    pm.environment.set(\"Operation\",currentData.Operation);", 
                            "    pm.environment.set(\"RequestId\",currentData.RequestId);", 
                            "    pm.environment.set(\"ResourceType\",currentData.ResourceType);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.OriginatingTimestamp);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.ReqExpirationTimestamp);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.ResExpirationTimestamp);", 
                            "    pm.environment.set(\"EventCategory\",currentData.EventCategory);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.OperationalExecutionTime);", 
                            "    pm.environment.set(\"ResponseType\",currentData.ResponseType);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.ResultPersistence);", 
                            "    pm.environment.set(\"ResultContent\",currentData.ResultContent);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.DeliveryAggregation);", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.GroupRequestIdentifier);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.FilterCriteria);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.DesiredIdentifierResultType);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.TokenRequestIndicator);", 
                            "    pm.environment.set(\"Tokens\",currentData.Tokens);", 
                            "    pm.environment.set(\"TokenIDs\",currentData.TokenIDs);", 
                            "    pm.environment.set(\"RoleIDs\",currentData.RoleIDs);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.LocalTokenIDs);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.ReleaseVersionIndicator);", 
                            "    pm.environment.set(\"VendorInformation\",currentData.VendorInformation);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.GroupRequestTargetMembers);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.AuthorizationSignatureIndicator);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.AuthorizationSignature);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.AuthorizationRelationshipIndicator);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.SemanticQueryIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "DELETE", 
            "preRequestScript": "", 
            "data": [], 
            "id": "c09d73c1-a9ba-42f4-ae75-9c30cd0e2ec7261", 
            "description": "This method delete the information about a specific semanticMashupInstanceInfo resource. "
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/ontologyRepository?ToAddress={{ToAddress}}&FromId={{FromId}}&Operation={{Operation}}&RequestId={{RequestId}}&ResourceType={{ResourceType}}&OriginatingTimestamp={{OriginatingTimestamp}}&ReqExpirationTimestamp={{ReqExpirationTimestamp}}&ResExpirationTimestamp={{ResExpirationTimestamp}}&EventCategory={{EventCategory}}&OperationalExecutionTime={{OperationalExecutionTime}}&ResponseType={{ResponseType}}&ResultPersistence={{ResultPersistence}}&ResultContent={{ResultContent}}&DeliveryAggregation={{DeliveryAggregation}}&GroupRequestIdentifier={{GroupRequestIdentifier}}&FilterCriteria={{FilterCriteria}}&DesiredIdentifierResultType={{DesiredIdentifierResultType}}&TokenRequestIndicator={{TokenRequestIndicator}}&Tokens={{Tokens}}&TokenIDs={{TokenIDs}}&RoleIDs={{RoleIDs}}&LocalTokenIDs={{LocalTokenIDs}}&ReleaseVersionIndicator={{ReleaseVersionIndicator}}&VendorInformation={{VendorInformation}}&GroupRequestTargetMembers={{GroupRequestTargetMembers}}&AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}&AuthorizationSignature={{AuthorizationSignature}}&AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}&SemanticQueryIndicator={{SemanticQueryIndicator}}", 
            "name": "TC_204", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469604, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/263?query=/iot3/example/ontologyRepository?ToAddress={{ToAddress}}?FromId={{FromId}}?Operation={{Operation}}?RequestId={{RequestId}}?ResourceType={{ResourceType}}?OriginatingTimestamp={{OriginatingTimestamp}}?ReqExpirationTimestamp={{ReqExpirationTimestamp}}?ResExpirationTimestamp={{ResExpirationTimestamp}}?EventCategory={{EventCategory}}?OperationalExecutionTime={{OperationalExecutionTime}}?ResponseType={{ResponseType}}?ResultPersistence={{ResultPersistence}}?ResultContent={{ResultContent}}?DeliveryAggregation={{DeliveryAggregation}}?GroupRequestIdentifier={{GroupRequestIdentifier}}?FilterCriteria={{FilterCriteria}}?DesiredIdentifierResultType={{DesiredIdentifierResultType}}?TokenRequestIndicator={{TokenRequestIndicator}}?Tokens={{Tokens}}?TokenIDs={{TokenIDs}}?RoleIDs={{RoleIDs}}?LocalTokenIDs={{LocalTokenIDs}}?ReleaseVersionIndicator={{ReleaseVersionIndicator}}?VendorInformation={{VendorInformation}}?GroupRequestTargetMembers={{GroupRequestTargetMembers}}?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}?AuthorizationSignature={{AuthorizationSignature}}?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}?SemanticQueryIndicator={{SemanticQueryIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ToAddress\",currentData.ToAddress);", 
                            "    pm.environment.set(\"FromId\",currentData.FromId);", 
                            "    pm.environment.set(\"Operation\",currentData.Operation);", 
                            "    pm.environment.set(\"RequestId\",currentData.RequestId);", 
                            "    pm.environment.set(\"ResourceType\",currentData.ResourceType);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.OriginatingTimestamp);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.ReqExpirationTimestamp);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.ResExpirationTimestamp);", 
                            "    pm.environment.set(\"EventCategory\",currentData.EventCategory);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.OperationalExecutionTime);", 
                            "    pm.environment.set(\"ResponseType\",currentData.ResponseType);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.ResultPersistence);", 
                            "    pm.environment.set(\"ResultContent\",currentData.ResultContent);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.DeliveryAggregation);", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.GroupRequestIdentifier);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.FilterCriteria);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.DesiredIdentifierResultType);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.TokenRequestIndicator);", 
                            "    pm.environment.set(\"Tokens\",currentData.Tokens);", 
                            "    pm.environment.set(\"TokenIDs\",currentData.TokenIDs);", 
                            "    pm.environment.set(\"RoleIDs\",currentData.RoleIDs);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.LocalTokenIDs);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.ReleaseVersionIndicator);", 
                            "    pm.environment.set(\"VendorInformation\",currentData.VendorInformation);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.GroupRequestTargetMembers);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.AuthorizationSignatureIndicator);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.AuthorizationSignature);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.AuthorizationRelationshipIndicator);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.SemanticQueryIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "DELETE", 
            "preRequestScript": "", 
            "data": [], 
            "id": "8261fa4b-667d-46fd-8122-696ff3ace629262", 
            "description": "This method delete the information about a specific ontologyRepositoryInfo resource. "
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticMashupJobProfile?ToAddress={{ToAddress}}&FromId={{FromId}}&Operation={{Operation}}&RequestId={{RequestId}}&ResourceType={{ResourceType}}&OriginatingTimestamp={{OriginatingTimestamp}}&ReqExpirationTimestamp={{ReqExpirationTimestamp}}&ResExpirationTimestamp={{ResExpirationTimestamp}}&EventCategory={{EventCategory}}&OperationalExecutionTime={{OperationalExecutionTime}}&ResponseType={{ResponseType}}&ResultPersistence={{ResultPersistence}}&ResultContent={{ResultContent}}&DeliveryAggregation={{DeliveryAggregation}}&GroupRequestIdentifier={{GroupRequestIdentifier}}&FilterCriteria={{FilterCriteria}}&DesiredIdentifierResultType={{DesiredIdentifierResultType}}&TokenRequestIndicator={{TokenRequestIndicator}}&Tokens={{Tokens}}&TokenIDs={{TokenIDs}}&RoleIDs={{RoleIDs}}&LocalTokenIDs={{LocalTokenIDs}}&ReleaseVersionIndicator={{ReleaseVersionIndicator}}&VendorInformation={{VendorInformation}}&GroupRequestTargetMembers={{GroupRequestTargetMembers}}&AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}&AuthorizationSignature={{AuthorizationSignature}}&AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}&SemanticQueryIndicator={{SemanticQueryIndicator}}", 
            "name": "TC_204", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/264?query=/iot3/example/semanticMashupJobProfile?ToAddress={{ToAddress}}?FromId={{FromId}}?Operation={{Operation}}?RequestId={{RequestId}}?ResourceType={{ResourceType}}?OriginatingTimestamp={{OriginatingTimestamp}}?ReqExpirationTimestamp={{ReqExpirationTimestamp}}?ResExpirationTimestamp={{ResExpirationTimestamp}}?EventCategory={{EventCategory}}?OperationalExecutionTime={{OperationalExecutionTime}}?ResponseType={{ResponseType}}?ResultPersistence={{ResultPersistence}}?ResultContent={{ResultContent}}?DeliveryAggregation={{DeliveryAggregation}}?GroupRequestIdentifier={{GroupRequestIdentifier}}?FilterCriteria={{FilterCriteria}}?DesiredIdentifierResultType={{DesiredIdentifierResultType}}?TokenRequestIndicator={{TokenRequestIndicator}}?Tokens={{Tokens}}?TokenIDs={{TokenIDs}}?RoleIDs={{RoleIDs}}?LocalTokenIDs={{LocalTokenIDs}}?ReleaseVersionIndicator={{ReleaseVersionIndicator}}?VendorInformation={{VendorInformation}}?GroupRequestTargetMembers={{GroupRequestTargetMembers}}?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}?AuthorizationSignature={{AuthorizationSignature}}?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}?SemanticQueryIndicator={{SemanticQueryIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ToAddress\",currentData.ToAddress);", 
                            "    pm.environment.set(\"FromId\",currentData.FromId);", 
                            "    pm.environment.set(\"Operation\",currentData.Operation);", 
                            "    pm.environment.set(\"RequestId\",currentData.RequestId);", 
                            "    pm.environment.set(\"ResourceType\",currentData.ResourceType);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.OriginatingTimestamp);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.ReqExpirationTimestamp);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.ResExpirationTimestamp);", 
                            "    pm.environment.set(\"EventCategory\",currentData.EventCategory);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.OperationalExecutionTime);", 
                            "    pm.environment.set(\"ResponseType\",currentData.ResponseType);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.ResultPersistence);", 
                            "    pm.environment.set(\"ResultContent\",currentData.ResultContent);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.DeliveryAggregation);", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.GroupRequestIdentifier);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.FilterCriteria);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.DesiredIdentifierResultType);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.TokenRequestIndicator);", 
                            "    pm.environment.set(\"Tokens\",currentData.Tokens);", 
                            "    pm.environment.set(\"TokenIDs\",currentData.TokenIDs);", 
                            "    pm.environment.set(\"RoleIDs\",currentData.RoleIDs);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.LocalTokenIDs);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.ReleaseVersionIndicator);", 
                            "    pm.environment.set(\"VendorInformation\",currentData.VendorInformation);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.GroupRequestTargetMembers);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.AuthorizationSignatureIndicator);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.AuthorizationSignature);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.AuthorizationRelationshipIndicator);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.SemanticQueryIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "DELETE", 
            "preRequestScript": "", 
            "data": [], 
            "id": "e5b43cf6-bc49-4f35-a4ab-d95b9edf7cab263", 
            "description": "This method delete the information about a specific semanticMashupJobProfileInfo resource. "
        }, 
        {
            "responses": [], 
            "dataMode": "params", 
            "tests": "", 
            "pathVariables": {}, 
            "collectionId": "e2aa6f6d-f3f2-47cd-9474-694b0a6a60e2", 
            "url": "{{scheme}}://{{host}}:{{port}}/iot3/example/semanticDescriptor?ToAddress={{ToAddress}}&FromId={{FromId}}&Operation={{Operation}}&RequestId={{RequestId}}&ResourceType={{ResourceType}}&OriginatingTimestamp={{OriginatingTimestamp}}&ReqExpirationTimestamp={{ReqExpirationTimestamp}}&ResExpirationTimestamp={{ResExpirationTimestamp}}&EventCategory={{EventCategory}}&OperationalExecutionTime={{OperationalExecutionTime}}&ResponseType={{ResponseType}}&ResultPersistence={{ResultPersistence}}&ResultContent={{ResultContent}}&DeliveryAggregation={{DeliveryAggregation}}&GroupRequestIdentifier={{GroupRequestIdentifier}}&FilterCriteria={{FilterCriteria}}&DesiredIdentifierResultType={{DesiredIdentifierResultType}}&TokenRequestIndicator={{TokenRequestIndicator}}&Tokens={{Tokens}}&TokenIDs={{TokenIDs}}&RoleIDs={{RoleIDs}}&LocalTokenIDs={{LocalTokenIDs}}&ReleaseVersionIndicator={{ReleaseVersionIndicator}}&VendorInformation={{VendorInformation}}&GroupRequestTargetMembers={{GroupRequestTargetMembers}}&AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}&AuthorizationSignature={{AuthorizationSignature}}&AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}&SemanticQueryIndicator={{SemanticQueryIndicator}}", 
            "name": "TC_204", 
            "headers": "Accept: application/json\nContent-Type: application/json\n", 
            "descriptionFormat": "html", 
            "version": 2, 
            "rawModeData": null, 
            "time": 1560229469605, 
            "synced": false, 
            "events": [
                {
                    "script": {
                        "type": "text/javascript", 
                        "exec": [
                            "    var list = [];", 
                            "    pm.sendRequest({", 
                            [
                                "    url: 'localhost:8081/read_db/265?query=/iot3/example/semanticDescriptor?ToAddress={{ToAddress}}?FromId={{FromId}}?Operation={{Operation}}?RequestId={{RequestId}}?ResourceType={{ResourceType}}?OriginatingTimestamp={{OriginatingTimestamp}}?ReqExpirationTimestamp={{ReqExpirationTimestamp}}?ResExpirationTimestamp={{ResExpirationTimestamp}}?EventCategory={{EventCategory}}?OperationalExecutionTime={{OperationalExecutionTime}}?ResponseType={{ResponseType}}?ResultPersistence={{ResultPersistence}}?ResultContent={{ResultContent}}?DeliveryAggregation={{DeliveryAggregation}}?GroupRequestIdentifier={{GroupRequestIdentifier}}?FilterCriteria={{FilterCriteria}}?DesiredIdentifierResultType={{DesiredIdentifierResultType}}?TokenRequestIndicator={{TokenRequestIndicator}}?Tokens={{Tokens}}?TokenIDs={{TokenIDs}}?RoleIDs={{RoleIDs}}?LocalTokenIDs={{LocalTokenIDs}}?ReleaseVersionIndicator={{ReleaseVersionIndicator}}?VendorInformation={{VendorInformation}}?GroupRequestTargetMembers={{GroupRequestTargetMembers}}?AuthorizationSignatureIndicator={{AuthorizationSignatureIndicator}}?AuthorizationSignature={{AuthorizationSignature}}?AuthorizationRelationshipIndicator={{AuthorizationRelationshipIndicator}}?SemanticQueryIndicator={{SemanticQueryIndicator}}',"
                            ], 
                            "    method: 'GET',", 
                            "    header: 'Content-Type:application/x-www-form-urlencoded',", 
                            "    }, function (err, res) {", 
                            "    var response_json = res.json();", 
                            "    if(list.length === 0){", 
                            "    var key;", 
                            "    for (key in response_json) {", 
                            "        if (response_json.hasOwnProperty(key))", 
                            "        {", 
                            "            list.push(response_json[key]);", 
                            "        }", 
                            "    }", 
                            "", 
                            "    var currentData = list.shift();", 
                            "", 
                            "    pm.environment.set(\"ToAddress\",currentData.ToAddress);", 
                            "    pm.environment.set(\"FromId\",currentData.FromId);", 
                            "    pm.environment.set(\"Operation\",currentData.Operation);", 
                            "    pm.environment.set(\"RequestId\",currentData.RequestId);", 
                            "    pm.environment.set(\"ResourceType\",currentData.ResourceType);", 
                            "    pm.environment.set(\"OriginatingTimestamp\",currentData.OriginatingTimestamp);", 
                            "    pm.environment.set(\"ReqExpirationTimestamp\",currentData.ReqExpirationTimestamp);", 
                            "    pm.environment.set(\"ResExpirationTimestamp\",currentData.ResExpirationTimestamp);", 
                            "    pm.environment.set(\"EventCategory\",currentData.EventCategory);", 
                            "    pm.environment.set(\"OperationalExecutionTime\",currentData.OperationalExecutionTime);", 
                            "    pm.environment.set(\"ResponseType\",currentData.ResponseType);", 
                            "    pm.environment.set(\"ResultPersistence\",currentData.ResultPersistence);", 
                            "    pm.environment.set(\"ResultContent\",currentData.ResultContent);", 
                            "    pm.environment.set(\"DeliveryAggregation\",currentData.DeliveryAggregation);", 
                            "    pm.environment.set(\"GroupRequestIdentifier\",currentData.GroupRequestIdentifier);", 
                            "    pm.environment.set(\"FilterCriteria\",currentData.FilterCriteria);", 
                            "    pm.environment.set(\"DesiredIdentifierResultType\",currentData.DesiredIdentifierResultType);", 
                            "    pm.environment.set(\"TokenRequestIndicator\",currentData.TokenRequestIndicator);", 
                            "    pm.environment.set(\"Tokens\",currentData.Tokens);", 
                            "    pm.environment.set(\"TokenIDs\",currentData.TokenIDs);", 
                            "    pm.environment.set(\"RoleIDs\",currentData.RoleIDs);", 
                            "    pm.environment.set(\"LocalTokenIDs\",currentData.LocalTokenIDs);", 
                            "    pm.environment.set(\"ReleaseVersionIndicator\",currentData.ReleaseVersionIndicator);", 
                            "    pm.environment.set(\"VendorInformation\",currentData.VendorInformation);", 
                            "    pm.environment.set(\"GroupRequestTargetMembers\",currentData.GroupRequestTargetMembers);", 
                            "    pm.environment.set(\"AuthorizationSignatureIndicator\",currentData.AuthorizationSignatureIndicator);", 
                            "    pm.environment.set(\"AuthorizationSignature\",currentData.AuthorizationSignature);", 
                            "    pm.environment.set(\"AuthorizationRelationshipIndicator\",currentData.AuthorizationRelationshipIndicator);", 
                            "    pm.environment.set(\"SemanticQueryIndicator\",currentData.SemanticQueryIndicator);", 
                            "    }", 
                            "});"
                        ]
                    }, 
                    "listen": "prerequest"
                }
            ], 
            "method": "DELETE", 
            "preRequestScript": "", 
            "data": [], 
            "id": "dc2f8144-80d9-4677-94ae-6e8c2dcb2d29264", 
            "description": "This method delete the information about a specific semanticDescriptorInfo resource. "
        }
    ], 
    "order": [], 
    "name": "IOT3_API3"
}